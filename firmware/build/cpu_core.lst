ARM GAS  /tmp/cc6MS5yX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"cpu_core.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CPU_Init,"ax",%progbits
  18              		.align	1
  19              		.global	CPU_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	CPU_Init:
  27              	.LFB0:
  28              		.file 1 "rtos/uC-CPU/cpu_core.c"
   1:rtos/uC-CPU/cpu_core.c **** /*
   2:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
   3:rtos/uC-CPU/cpu_core.c **** *                                                uC/CPU
   4:rtos/uC-CPU/cpu_core.c **** *                                    CPU CONFIGURATION & PORT LAYER
   5:rtos/uC-CPU/cpu_core.c **** *
   6:rtos/uC-CPU/cpu_core.c **** *                         (c) Copyright 2004-2019; Silicon Laboratories Inc.,
   7:rtos/uC-CPU/cpu_core.c **** *                                400 W. Cesar Chavez, Austin, TX 78701
   8:rtos/uC-CPU/cpu_core.c **** *
   9:rtos/uC-CPU/cpu_core.c **** *                   All rights reserved. Protected by international copyright laws.
  10:rtos/uC-CPU/cpu_core.c **** *
  11:rtos/uC-CPU/cpu_core.c **** *                  Your use of this software is subject to your acceptance of the terms
  12:rtos/uC-CPU/cpu_core.c **** *                  of a Silicon Labs Micrium software license, which can be obtained by
  13:rtos/uC-CPU/cpu_core.c **** *                  contacting info@micrium.com. If you do not agree to the terms of this
  14:rtos/uC-CPU/cpu_core.c **** *                  license, you may not use this software.
  15:rtos/uC-CPU/cpu_core.c **** *
  16:rtos/uC-CPU/cpu_core.c **** *                  Please help us continue to provide the Embedded community with the finest
  17:rtos/uC-CPU/cpu_core.c **** *                  software available. Your honesty is greatly appreciated.
  18:rtos/uC-CPU/cpu_core.c **** *
  19:rtos/uC-CPU/cpu_core.c **** *                    You can find our product's documentation at: doc.micrium.com
  20:rtos/uC-CPU/cpu_core.c **** *
  21:rtos/uC-CPU/cpu_core.c **** *                          For more information visit us at: www.micrium.com
  22:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  23:rtos/uC-CPU/cpu_core.c **** */
  24:rtos/uC-CPU/cpu_core.c **** 
  25:rtos/uC-CPU/cpu_core.c **** /*
  26:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  27:rtos/uC-CPU/cpu_core.c **** *
  28:rtos/uC-CPU/cpu_core.c **** *                                           CORE CPU MODULE
  29:rtos/uC-CPU/cpu_core.c **** *
  30:rtos/uC-CPU/cpu_core.c **** * Filename : cpu_core.c
ARM GAS  /tmp/cc6MS5yX.s 			page 2


  31:rtos/uC-CPU/cpu_core.c **** * Version  : V1.31.05
  32:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  33:rtos/uC-CPU/cpu_core.c **** */
  34:rtos/uC-CPU/cpu_core.c **** 
  35:rtos/uC-CPU/cpu_core.c **** 
  36:rtos/uC-CPU/cpu_core.c **** /*
  37:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  38:rtos/uC-CPU/cpu_core.c **** *                                            INCLUDE FILES
  39:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  40:rtos/uC-CPU/cpu_core.c **** */
  41:rtos/uC-CPU/cpu_core.c **** 
  42:rtos/uC-CPU/cpu_core.c **** #define    MICRIUM_SOURCE
  43:rtos/uC-CPU/cpu_core.c **** #define    CPU_CORE_MODULE
  44:rtos/uC-CPU/cpu_core.c **** #include  "cpu_core.h"
  45:rtos/uC-CPU/cpu_core.c **** 
  46:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
  47:rtos/uC-CPU/cpu_core.c **** #include  "cpu_cache.h"
  48:rtos/uC-CPU/cpu_core.c **** #endif
  49:rtos/uC-CPU/cpu_core.c **** 
  50:rtos/uC-CPU/cpu_core.c **** 
  51:rtos/uC-CPU/cpu_core.c **** /*
  52:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  53:rtos/uC-CPU/cpu_core.c **** *                                            LOCAL DEFINES
  54:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  55:rtos/uC-CPU/cpu_core.c **** */
  56:rtos/uC-CPU/cpu_core.c **** 
  57:rtos/uC-CPU/cpu_core.c ****                                                                 /* Pop cnt algorithm csts.         
  58:rtos/uC-CPU/cpu_core.c **** #define CRC_UTIL_POPCNT_MASK01010101_32  0x55555555u
  59:rtos/uC-CPU/cpu_core.c **** #define CRC_UTIL_POPCNT_MASK00110011_32  0x33333333u
  60:rtos/uC-CPU/cpu_core.c **** #define CRC_UTIL_POPCNT_MASK00001111_32  0x0F0F0F0Fu
  61:rtos/uC-CPU/cpu_core.c **** #define CRC_UTIL_POPCNT_POWERSOF256_32   0x01010101u
  62:rtos/uC-CPU/cpu_core.c **** 
  63:rtos/uC-CPU/cpu_core.c **** 
  64:rtos/uC-CPU/cpu_core.c **** /*
  65:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  66:rtos/uC-CPU/cpu_core.c **** *                                           LOCAL CONSTANTS
  67:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  68:rtos/uC-CPU/cpu_core.c **** */
  69:rtos/uC-CPU/cpu_core.c **** 
  70:rtos/uC-CPU/cpu_core.c **** 
  71:rtos/uC-CPU/cpu_core.c **** /*
  72:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  73:rtos/uC-CPU/cpu_core.c **** *                                          LOCAL DATA TYPES
  74:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  75:rtos/uC-CPU/cpu_core.c **** */
  76:rtos/uC-CPU/cpu_core.c **** 
  77:rtos/uC-CPU/cpu_core.c **** 
  78:rtos/uC-CPU/cpu_core.c **** /*
  79:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  80:rtos/uC-CPU/cpu_core.c **** *                                            LOCAL TABLES
  81:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  82:rtos/uC-CPU/cpu_core.c **** */
  83:rtos/uC-CPU/cpu_core.c **** 
  84:rtos/uC-CPU/cpu_core.c **** /*
  85:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
  86:rtos/uC-CPU/cpu_core.c **** *                                  CPU COUNT LEAD ZEROs LOOKUP TABLE
  87:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 3


  88:rtos/uC-CPU/cpu_core.c **** * Note(s) : (1) Index into bit pattern table determines the number of leading zeros in an 8-bit val
  89:rtos/uC-CPU/cpu_core.c **** *
  90:rtos/uC-CPU/cpu_core.c **** *                         b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
  91:rtos/uC-CPU/cpu_core.c **** *                         ---  ---  ---  ---  ---  ---  ---  ---    ---------------
  92:rtos/uC-CPU/cpu_core.c **** *                          1    x    x    x    x    x    x    x            0
  93:rtos/uC-CPU/cpu_core.c **** *                          0    1    x    x    x    x    x    x            1
  94:rtos/uC-CPU/cpu_core.c **** *                          0    0    1    x    x    x    x    x            2
  95:rtos/uC-CPU/cpu_core.c **** *                          0    0    0    1    x    x    x    x            3
  96:rtos/uC-CPU/cpu_core.c **** *                          0    0    0    0    1    x    x    x            4
  97:rtos/uC-CPU/cpu_core.c **** *                          0    0    0    0    0    1    x    x            5
  98:rtos/uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    1    x            6
  99:rtos/uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    0    1            7
 100:rtos/uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    0    0            8
 101:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 102:rtos/uC-CPU/cpu_core.c **** */
 103:rtos/uC-CPU/cpu_core.c **** 
 104:rtos/uC-CPU/cpu_core.c **** #if (!(defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) || \
 105:rtos/uC-CPU/cpu_core.c ****       (CPU_CFG_DATA_SIZE_MAX > CPU_CFG_DATA_SIZE))
 106:rtos/uC-CPU/cpu_core.c **** static  const  CPU_INT08U  CPU_CntLeadZerosTbl[256] = {                             /* Data vals : 
 107:rtos/uC-CPU/cpu_core.c **** /*   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F   */
 108:rtos/uC-CPU/cpu_core.c ****     8u,  7u,  6u,  6u,  5u,  5u,  5u,  5u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  /*   0x00 to 0x
 109:rtos/uC-CPU/cpu_core.c ****     3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  /*   0x10 to 0x
 110:rtos/uC-CPU/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x20 to 0x
 111:rtos/uC-CPU/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x30 to 0x
 112:rtos/uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x40 to 0x
 113:rtos/uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x50 to 0x
 114:rtos/uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x60 to 0x
 115:rtos/uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x70 to 0x
 116:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x80 to 0x
 117:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x90 to 0x
 118:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xA0 to 0x
 119:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xB0 to 0x
 120:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xC0 to 0x
 121:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xD0 to 0x
 122:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xE0 to 0x
 123:rtos/uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u   /*   0xF0 to 0x
 124:rtos/uC-CPU/cpu_core.c **** };
 125:rtos/uC-CPU/cpu_core.c **** #endif
 126:rtos/uC-CPU/cpu_core.c **** 
 127:rtos/uC-CPU/cpu_core.c **** 
 128:rtos/uC-CPU/cpu_core.c **** /*
 129:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 130:rtos/uC-CPU/cpu_core.c **** *                                       LOCAL GLOBAL VARIABLES
 131:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 132:rtos/uC-CPU/cpu_core.c **** */
 133:rtos/uC-CPU/cpu_core.c **** 
 134:rtos/uC-CPU/cpu_core.c **** CPU_INT32U  const  CPU_EndiannessTest = 0x12345678LU;               /* Variable to test CPU endiann
 135:rtos/uC-CPU/cpu_core.c **** 
 136:rtos/uC-CPU/cpu_core.c **** 
 137:rtos/uC-CPU/cpu_core.c **** /*
 138:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 139:rtos/uC-CPU/cpu_core.c **** *                                      LOCAL FUNCTION PROTOTYPES
 140:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 141:rtos/uC-CPU/cpu_core.c **** */
 142:rtos/uC-CPU/cpu_core.c **** 
 143:rtos/uC-CPU/cpu_core.c **** #if    (CPU_CFG_NAME_EN   == DEF_ENABLED)                           /* ---------------- CPU NAME FN
 144:rtos/uC-CPU/cpu_core.c **** static  void        CPU_NameInit         (void);
ARM GAS  /tmp/cc6MS5yX.s 			page 4


 145:rtos/uC-CPU/cpu_core.c **** #endif
 146:rtos/uC-CPU/cpu_core.c **** 
 147:rtos/uC-CPU/cpu_core.c **** 
 148:rtos/uC-CPU/cpu_core.c ****                                                                     /* ----------------- CPU TS FNC
 149:rtos/uC-CPU/cpu_core.c **** #if   ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 150:rtos/uC-CPU/cpu_core.c ****        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 151:rtos/uC-CPU/cpu_core.c **** static  void        CPU_TS_Init          (void);
 152:rtos/uC-CPU/cpu_core.c **** #endif
 153:rtos/uC-CPU/cpu_core.c **** 
 154:rtos/uC-CPU/cpu_core.c **** 
 155:rtos/uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN                                     /* ---------- CPU INT DIS TIME 
 156:rtos/uC-CPU/cpu_core.c **** static  void        CPU_IntDisMeasInit   (void);
 157:rtos/uC-CPU/cpu_core.c **** 
 158:rtos/uC-CPU/cpu_core.c **** static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc(CPU_TS_TMR  time_tot_cnts);
 159:rtos/uC-CPU/cpu_core.c **** #endif
 160:rtos/uC-CPU/cpu_core.c **** 
 161:rtos/uC-CPU/cpu_core.c **** 
 162:rtos/uC-CPU/cpu_core.c **** /*
 163:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 164:rtos/uC-CPU/cpu_core.c **** *                                     LOCAL CONFIGURATION ERRORS
 165:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 166:rtos/uC-CPU/cpu_core.c **** */
 167:rtos/uC-CPU/cpu_core.c **** 
 168:rtos/uC-CPU/cpu_core.c **** 
 169:rtos/uC-CPU/cpu_core.c **** /*
 170:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 171:rtos/uC-CPU/cpu_core.c **** *                                             CPU_Init()
 172:rtos/uC-CPU/cpu_core.c **** *
 173:rtos/uC-CPU/cpu_core.c **** * Description : (1) Initialize CPU module :
 174:rtos/uC-CPU/cpu_core.c **** *
 175:rtos/uC-CPU/cpu_core.c **** *                   (a) Initialize CPU timestamps
 176:rtos/uC-CPU/cpu_core.c **** *                   (b) Initialize CPU interrupts disabled time measurements
 177:rtos/uC-CPU/cpu_core.c **** *                   (c) Initialize CPU host name
 178:rtos/uC-CPU/cpu_core.c **** *
 179:rtos/uC-CPU/cpu_core.c **** *
 180:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 181:rtos/uC-CPU/cpu_core.c **** *
 182:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 183:rtos/uC-CPU/cpu_core.c **** *
 184:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (2) CPU_Init() MUST be called ... :
 185:rtos/uC-CPU/cpu_core.c **** *
 186:rtos/uC-CPU/cpu_core.c **** *                   (a) ONLY ONCE from a product's application; ...
 187:rtos/uC-CPU/cpu_core.c **** *                   (b) BEFORE product's application calls any core CPU module function(s)
 188:rtos/uC-CPU/cpu_core.c **** *
 189:rtos/uC-CPU/cpu_core.c **** *               (3) The following initialization functions MUST be sequenced as follows :
 190:rtos/uC-CPU/cpu_core.c **** *
 191:rtos/uC-CPU/cpu_core.c **** *                   (a) CPU_TS_Init()           SHOULD precede ALL calls to other CPU timestamp fun
 192:rtos/uC-CPU/cpu_core.c **** *
 193:rtos/uC-CPU/cpu_core.c **** *                   (b) CPU_IntDisMeasInit()    SHOULD precede ALL calls to CPU_CRITICAL_ENTER()/CP
 194:rtos/uC-CPU/cpu_core.c **** *                                                   & other CPU interrupts disabled time measuremen
 195:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 196:rtos/uC-CPU/cpu_core.c **** */
 197:rtos/uC-CPU/cpu_core.c **** 
 198:rtos/uC-CPU/cpu_core.c **** void  CPU_Init (void)
 199:rtos/uC-CPU/cpu_core.c **** {
  29              		.loc 1 199 1 view -0
  30              		.cfi_startproc
ARM GAS  /tmp/cc6MS5yX.s 			page 5


  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 200:rtos/uC-CPU/cpu_core.c ****                                                                 /* --------------------- INIT TS --
 201:rtos/uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 202:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 203:rtos/uC-CPU/cpu_core.c ****     CPU_TS_Init();                                              /* See Note #3a.                   
 204:rtos/uC-CPU/cpu_core.c **** #endif
 205:rtos/uC-CPU/cpu_core.c ****                                                                 /* -------------- INIT INT DIS TIME
 206:rtos/uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 207:rtos/uC-CPU/cpu_core.c ****     CPU_IntDisMeasInit();                                       /* See Note #3b.                   
 208:rtos/uC-CPU/cpu_core.c **** #endif
 209:rtos/uC-CPU/cpu_core.c **** 
 210:rtos/uC-CPU/cpu_core.c ****                                                                 /* ------------------ INIT CPU NAME
 211:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 212:rtos/uC-CPU/cpu_core.c ****      CPU_NameInit();
 213:rtos/uC-CPU/cpu_core.c **** #endif
 214:rtos/uC-CPU/cpu_core.c **** 
 215:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
 216:rtos/uC-CPU/cpu_core.c ****      CPU_Cache_Init();
 217:rtos/uC-CPU/cpu_core.c **** #endif
 218:rtos/uC-CPU/cpu_core.c **** }
  34              		.loc 1 218 1 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE0:
  39              		.section	.text.CPU_SW_Exception,"ax",%progbits
  40              		.align	1
  41              		.global	CPU_SW_Exception
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	CPU_SW_Exception:
  48              	.LFB1:
 219:rtos/uC-CPU/cpu_core.c **** 
 220:rtos/uC-CPU/cpu_core.c **** 
 221:rtos/uC-CPU/cpu_core.c **** /*
 222:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 223:rtos/uC-CPU/cpu_core.c **** *                                         CPU_SW_Exception()
 224:rtos/uC-CPU/cpu_core.c **** *
 225:rtos/uC-CPU/cpu_core.c **** * Description : Trap unrecoverable software exception.
 226:rtos/uC-CPU/cpu_core.c **** *
 227:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 228:rtos/uC-CPU/cpu_core.c **** *
 229:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 230:rtos/uC-CPU/cpu_core.c **** *
 231:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) CPU_SW_Exception() deadlocks the current code execution -- whether multi-tasked
 232:rtos/uC-CPU/cpu_core.c **** *                   -processed/-threaded or single-threaded -- when the current code execution cann
 233:rtos/uC-CPU/cpu_core.c **** *                   gracefully recover or report a fault or exception condition.
 234:rtos/uC-CPU/cpu_core.c **** *
 235:rtos/uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
 236:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 237:rtos/uC-CPU/cpu_core.c **** */
 238:rtos/uC-CPU/cpu_core.c **** 
 239:rtos/uC-CPU/cpu_core.c **** void  CPU_SW_Exception (void)
 240:rtos/uC-CPU/cpu_core.c **** {
ARM GAS  /tmp/cc6MS5yX.s 			page 6


  49              		.loc 1 240 1 view -0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L3:
 241:rtos/uC-CPU/cpu_core.c ****     for (;;) {
  56              		.loc 1 241 5 discriminator 1 view .LVU3
 242:rtos/uC-CPU/cpu_core.c ****         ;
  57              		.loc 1 242 9 discriminator 1 view .LVU4
 241:rtos/uC-CPU/cpu_core.c ****     for (;;) {
  58              		.loc 1 241 11 discriminator 1 view .LVU5
  59 0000 FEE7     		b	.L3
  60              		.cfi_endproc
  61              	.LFE1:
  63              		.section	.text.CPU_CntLeadZeros08,"ax",%progbits
  64              		.align	1
  65              		.global	CPU_CntLeadZeros08
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	CPU_CntLeadZeros08:
  72              	.LVL0:
  73              	.LFB2:
 243:rtos/uC-CPU/cpu_core.c ****     }
 244:rtos/uC-CPU/cpu_core.c **** }
 245:rtos/uC-CPU/cpu_core.c **** 
 246:rtos/uC-CPU/cpu_core.c **** 
 247:rtos/uC-CPU/cpu_core.c **** /*
 248:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 249:rtos/uC-CPU/cpu_core.c **** *                                            CPU_NameClr()
 250:rtos/uC-CPU/cpu_core.c **** *
 251:rtos/uC-CPU/cpu_core.c **** * Description : Clear CPU Name.
 252:rtos/uC-CPU/cpu_core.c **** *
 253:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 254:rtos/uC-CPU/cpu_core.c **** *
 255:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 256:rtos/uC-CPU/cpu_core.c **** *
 257:rtos/uC-CPU/cpu_core.c **** * Note(s)     : none.
 258:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 259:rtos/uC-CPU/cpu_core.c **** */
 260:rtos/uC-CPU/cpu_core.c **** 
 261:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 262:rtos/uC-CPU/cpu_core.c **** void  CPU_NameClr (void)
 263:rtos/uC-CPU/cpu_core.c **** {
 264:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 265:rtos/uC-CPU/cpu_core.c **** 
 266:rtos/uC-CPU/cpu_core.c **** 
 267:rtos/uC-CPU/cpu_core.c ****     CPU_CRITICAL_ENTER();
 268:rtos/uC-CPU/cpu_core.c ****     Mem_Clr((void     *)&CPU_Name[0],
 269:rtos/uC-CPU/cpu_core.c ****             (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
 270:rtos/uC-CPU/cpu_core.c ****     CPU_CRITICAL_EXIT();
 271:rtos/uC-CPU/cpu_core.c **** }
 272:rtos/uC-CPU/cpu_core.c **** #endif
 273:rtos/uC-CPU/cpu_core.c **** 
ARM GAS  /tmp/cc6MS5yX.s 			page 7


 274:rtos/uC-CPU/cpu_core.c **** 
 275:rtos/uC-CPU/cpu_core.c **** /*
 276:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 277:rtos/uC-CPU/cpu_core.c **** *                                            CPU_NameGet()
 278:rtos/uC-CPU/cpu_core.c **** *
 279:rtos/uC-CPU/cpu_core.c **** * Description : Get CPU host name.
 280:rtos/uC-CPU/cpu_core.c **** *
 281:rtos/uC-CPU/cpu_core.c **** * Argument(s) : p_name      Pointer to an ASCII character array that will receive the return CPU ho
 282:rtos/uC-CPU/cpu_core.c **** *                               name ASCII string from this function (see Note #1).
 283:rtos/uC-CPU/cpu_core.c **** *
 284:rtos/uC-CPU/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 285:rtos/uC-CPU/cpu_core.c **** *
 286:rtos/uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully returned
 287:rtos/uC-CPU/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 288:rtos/uC-CPU/cpu_core.c **** *
 289:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 290:rtos/uC-CPU/cpu_core.c **** *
 291:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) The size of the ASCII character array that will receive the return CPU host nam
 292:rtos/uC-CPU/cpu_core.c **** *                   ASCII string :
 293:rtos/uC-CPU/cpu_core.c **** *
 294:rtos/uC-CPU/cpu_core.c **** *                   (a) MUST   be greater than or equal to the current CPU host name's ASCII string
 295:rtos/uC-CPU/cpu_core.c **** *                           size including the terminating NULL character;
 296:rtos/uC-CPU/cpu_core.c **** *                   (b) SHOULD be greater than or equal to CPU_CFG_NAME_SIZE
 297:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 298:rtos/uC-CPU/cpu_core.c **** */
 299:rtos/uC-CPU/cpu_core.c **** 
 300:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 301:rtos/uC-CPU/cpu_core.c **** void  CPU_NameGet (CPU_CHAR  *p_name,
 302:rtos/uC-CPU/cpu_core.c ****                    CPU_ERR   *p_err)
 303:rtos/uC-CPU/cpu_core.c **** {
 304:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 305:rtos/uC-CPU/cpu_core.c **** 
 306:rtos/uC-CPU/cpu_core.c **** 
 307:rtos/uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 308:rtos/uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 309:rtos/uC-CPU/cpu_core.c ****     }
 310:rtos/uC-CPU/cpu_core.c **** 
 311:rtos/uC-CPU/cpu_core.c ****     if (p_name == (CPU_CHAR *)0) {
 312:rtos/uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 313:rtos/uC-CPU/cpu_core.c ****         return;
 314:rtos/uC-CPU/cpu_core.c ****     }
 315:rtos/uC-CPU/cpu_core.c **** 
 316:rtos/uC-CPU/cpu_core.c ****     CPU_CRITICAL_ENTER();
 317:rtos/uC-CPU/cpu_core.c ****    (void)Str_Copy_N(p_name,
 318:rtos/uC-CPU/cpu_core.c ****                    &CPU_Name[0],
 319:rtos/uC-CPU/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 320:rtos/uC-CPU/cpu_core.c ****     CPU_CRITICAL_EXIT();
 321:rtos/uC-CPU/cpu_core.c **** 
 322:rtos/uC-CPU/cpu_core.c ****    *p_err = CPU_ERR_NONE;
 323:rtos/uC-CPU/cpu_core.c **** }
 324:rtos/uC-CPU/cpu_core.c **** #endif
 325:rtos/uC-CPU/cpu_core.c **** 
 326:rtos/uC-CPU/cpu_core.c **** 
 327:rtos/uC-CPU/cpu_core.c **** /*
 328:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 329:rtos/uC-CPU/cpu_core.c **** *                                            CPU_NameSet()
 330:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 8


 331:rtos/uC-CPU/cpu_core.c **** * Description : Set CPU host name.
 332:rtos/uC-CPU/cpu_core.c **** *
 333:rtos/uC-CPU/cpu_core.c **** * Argument(s) : p_name      Pointer to CPU host name to set.
 334:rtos/uC-CPU/cpu_core.c **** *
 335:rtos/uC-CPU/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 336:rtos/uC-CPU/cpu_core.c **** *
 337:rtos/uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully set.
 338:rtos/uC-CPU/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 339:rtos/uC-CPU/cpu_core.c **** *                               CPU_ERR_NAME_SIZE               Invalid CPU host name size (see Not
 340:rtos/uC-CPU/cpu_core.c **** *
 341:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 342:rtos/uC-CPU/cpu_core.c **** *
 343:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) 'p_name' ASCII string size, including the terminating NULL character, MUST be l
 344:rtos/uC-CPU/cpu_core.c **** *                    than or equal to CPU_CFG_NAME_SIZE.
 345:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 346:rtos/uC-CPU/cpu_core.c **** */
 347:rtos/uC-CPU/cpu_core.c **** 
 348:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 349:rtos/uC-CPU/cpu_core.c **** void  CPU_NameSet (const  CPU_CHAR  *p_name,
 350:rtos/uC-CPU/cpu_core.c ****                           CPU_ERR   *p_err)
 351:rtos/uC-CPU/cpu_core.c **** {
 352:rtos/uC-CPU/cpu_core.c ****     CPU_SIZE_T  len;
 353:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 354:rtos/uC-CPU/cpu_core.c **** 
 355:rtos/uC-CPU/cpu_core.c **** 
 356:rtos/uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 357:rtos/uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 358:rtos/uC-CPU/cpu_core.c ****     }
 359:rtos/uC-CPU/cpu_core.c **** 
 360:rtos/uC-CPU/cpu_core.c ****     if (p_name == (const CPU_CHAR *)0) {
 361:rtos/uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 362:rtos/uC-CPU/cpu_core.c ****         return;
 363:rtos/uC-CPU/cpu_core.c ****     }
 364:rtos/uC-CPU/cpu_core.c **** 
 365:rtos/uC-CPU/cpu_core.c ****     len = Str_Len_N(p_name,
 366:rtos/uC-CPU/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 367:rtos/uC-CPU/cpu_core.c ****     if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name
 368:rtos/uC-CPU/cpu_core.c ****         CPU_CRITICAL_ENTER();
 369:rtos/uC-CPU/cpu_core.c ****        (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host na
 370:rtos/uC-CPU/cpu_core.c ****                          p_name,
 371:rtos/uC-CPU/cpu_core.c ****                          CPU_CFG_NAME_SIZE);
 372:rtos/uC-CPU/cpu_core.c ****         CPU_CRITICAL_EXIT();
 373:rtos/uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NONE;
 374:rtos/uC-CPU/cpu_core.c **** 
 375:rtos/uC-CPU/cpu_core.c ****     } else {
 376:rtos/uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NAME_SIZE;
 377:rtos/uC-CPU/cpu_core.c ****     }
 378:rtos/uC-CPU/cpu_core.c **** }
 379:rtos/uC-CPU/cpu_core.c **** #endif
 380:rtos/uC-CPU/cpu_core.c **** 
 381:rtos/uC-CPU/cpu_core.c **** 
 382:rtos/uC-CPU/cpu_core.c **** /*
 383:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 384:rtos/uC-CPU/cpu_core.c **** *                                           CPU_TS_Get32()
 385:rtos/uC-CPU/cpu_core.c **** *
 386:rtos/uC-CPU/cpu_core.c **** * Description : Get current 32-bit CPU timestamp.
 387:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 9


 388:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 389:rtos/uC-CPU/cpu_core.c **** *
 390:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Current 32-bit CPU timestamp (in timestamp timer counts).
 391:rtos/uC-CPU/cpu_core.c **** *
 392:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 393:rtos/uC-CPU/cpu_core.c **** *                   either of the following equations :
 394:rtos/uC-CPU/cpu_core.c **** *
 395:rtos/uC-CPU/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 396:rtos/uC-CPU/cpu_core.c **** *
 397:rtos/uC-CPU/cpu_core.c **** *                               where
 398:rtos/uC-CPU/cpu_core.c **** *
 399:rtos/uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 400:rtos/uC-CPU/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 401:rtos/uC-CPU/cpu_core.c **** *                                                               (fractional) seconds
 402:rtos/uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 403:rtos/uC-CPU/cpu_core.c **** *                                                               units of (fractional) seconds
 404:rtos/uC-CPU/cpu_core.c **** *                                                               as the Timer period
 405:rtos/uC-CPU/cpu_core.c **** *
 406:rtos/uC-CPU/cpu_core.c **** *                                              Number timer counts
 407:rtos/uC-CPU/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 408:rtos/uC-CPU/cpu_core.c **** *                                                Timer frequency
 409:rtos/uC-CPU/cpu_core.c **** *
 410:rtos/uC-CPU/cpu_core.c **** *                               where
 411:rtos/uC-CPU/cpu_core.c **** *
 412:rtos/uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 413:rtos/uC-CPU/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 414:rtos/uC-CPU/cpu_core.c **** *                                                               of counts per second
 415:rtos/uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 416:rtos/uC-CPU/cpu_core.c **** *
 417:rtos/uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 418:rtos/uC-CPU/cpu_core.c **** *
 419:rtos/uC-CPU/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 32-bit CPU timesta
 420:rtos/uC-CPU/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 421:rtos/uC-CPU/cpu_core.c **** *                   timestamp timer count values into the higher-precision 32-bit CPU timestamp.
 422:rtos/uC-CPU/cpu_core.c **** *
 423:rtos/uC-CPU/cpu_core.c **** *               (3) After initialization, 'CPU_TS_32_Accum' & 'CPU_TS_32_TmrPrev' MUST ALWAYS
 424:rtos/uC-CPU/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 425:rtos/uC-CPU/cpu_core.c **** *                   with critical sections.
 426:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 427:rtos/uC-CPU/cpu_core.c **** */
 428:rtos/uC-CPU/cpu_core.c **** 
 429:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
 430:rtos/uC-CPU/cpu_core.c **** CPU_TS32  CPU_TS_Get32 (void)
 431:rtos/uC-CPU/cpu_core.c **** {
 432:rtos/uC-CPU/cpu_core.c ****     CPU_TS32    ts;
 433:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
 434:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 435:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 436:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 437:rtos/uC-CPU/cpu_core.c **** 
 438:rtos/uC-CPU/cpu_core.c **** #endif
 439:rtos/uC-CPU/cpu_core.c **** 
 440:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
 441:rtos/uC-CPU/cpu_core.c ****     ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bi
 442:rtos/uC-CPU/cpu_core.c **** 
 443:rtos/uC-CPU/cpu_core.c **** #else
 444:rtos/uC-CPU/cpu_core.c ****     CPU_INT_DIS();
ARM GAS  /tmp/cc6MS5yX.s 			page 10


 445:rtos/uC-CPU/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 446:rtos/uC-CPU/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.
 447:rtos/uC-CPU/cpu_core.c ****     CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 448:rtos/uC-CPU/cpu_core.c ****     CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 449:rtos/uC-CPU/cpu_core.c ****     ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
 450:rtos/uC-CPU/cpu_core.c ****     CPU_INT_EN();
 451:rtos/uC-CPU/cpu_core.c **** #endif
 452:rtos/uC-CPU/cpu_core.c **** 
 453:rtos/uC-CPU/cpu_core.c ****     return (ts);
 454:rtos/uC-CPU/cpu_core.c **** }
 455:rtos/uC-CPU/cpu_core.c **** #endif
 456:rtos/uC-CPU/cpu_core.c **** 
 457:rtos/uC-CPU/cpu_core.c **** 
 458:rtos/uC-CPU/cpu_core.c **** /*
 459:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 460:rtos/uC-CPU/cpu_core.c **** *                                           CPU_TS_Get64()
 461:rtos/uC-CPU/cpu_core.c **** *
 462:rtos/uC-CPU/cpu_core.c **** * Description : Get current 64-bit CPU timestamp.
 463:rtos/uC-CPU/cpu_core.c **** *
 464:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 465:rtos/uC-CPU/cpu_core.c **** *
 466:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Current 64-bit CPU timestamp (in timestamp timer counts).
 467:rtos/uC-CPU/cpu_core.c **** *
 468:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 469:rtos/uC-CPU/cpu_core.c **** *                   either of the following equations :
 470:rtos/uC-CPU/cpu_core.c **** *
 471:rtos/uC-CPU/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 472:rtos/uC-CPU/cpu_core.c **** *
 473:rtos/uC-CPU/cpu_core.c **** *                               where
 474:rtos/uC-CPU/cpu_core.c **** *
 475:rtos/uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 476:rtos/uC-CPU/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 477:rtos/uC-CPU/cpu_core.c **** *                                                               (fractional) seconds
 478:rtos/uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 479:rtos/uC-CPU/cpu_core.c **** *                                                               units of (fractional) seconds
 480:rtos/uC-CPU/cpu_core.c **** *                                                               as the Timer period
 481:rtos/uC-CPU/cpu_core.c **** *
 482:rtos/uC-CPU/cpu_core.c **** *                                              Number timer counts
 483:rtos/uC-CPU/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 484:rtos/uC-CPU/cpu_core.c **** *                                                Timer frequency
 485:rtos/uC-CPU/cpu_core.c **** *
 486:rtos/uC-CPU/cpu_core.c **** *                               where
 487:rtos/uC-CPU/cpu_core.c **** *
 488:rtos/uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 489:rtos/uC-CPU/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 490:rtos/uC-CPU/cpu_core.c **** *                                                               of counts per second
 491:rtos/uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 492:rtos/uC-CPU/cpu_core.c **** *
 493:rtos/uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 494:rtos/uC-CPU/cpu_core.c **** *
 495:rtos/uC-CPU/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 64-bit CPU timesta
 496:rtos/uC-CPU/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 497:rtos/uC-CPU/cpu_core.c **** *                   timestamp timer count values into the higher-precision 64-bit CPU timestamp.
 498:rtos/uC-CPU/cpu_core.c **** *
 499:rtos/uC-CPU/cpu_core.c **** *               (3) After initialization, 'CPU_TS_64_Accum' & 'CPU_TS_64_TmrPrev' MUST ALWAYS
 500:rtos/uC-CPU/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 501:rtos/uC-CPU/cpu_core.c **** *                   with critical sections.
ARM GAS  /tmp/cc6MS5yX.s 			page 11


 502:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 503:rtos/uC-CPU/cpu_core.c **** */
 504:rtos/uC-CPU/cpu_core.c **** 
 505:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_64_EN == DEF_ENABLED)
 506:rtos/uC-CPU/cpu_core.c **** CPU_TS64  CPU_TS_Get64 (void)
 507:rtos/uC-CPU/cpu_core.c **** {
 508:rtos/uC-CPU/cpu_core.c ****     CPU_TS64    ts;
 509:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)
 510:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 511:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 512:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 513:rtos/uC-CPU/cpu_core.c **** #endif
 514:rtos/uC-CPU/cpu_core.c **** 
 515:rtos/uC-CPU/cpu_core.c **** 
 516:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_64)
 517:rtos/uC-CPU/cpu_core.c ****     ts = (CPU_TS64)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 64-bi
 518:rtos/uC-CPU/cpu_core.c **** 
 519:rtos/uC-CPU/cpu_core.c **** #else
 520:rtos/uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 521:rtos/uC-CPU/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 522:rtos/uC-CPU/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_64_TmrPrev); /* Calc      delta ts tmr cnts.
 523:rtos/uC-CPU/cpu_core.c ****     CPU_TS_64_Accum   += (CPU_TS64  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 524:rtos/uC-CPU/cpu_core.c ****     CPU_TS_64_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 525:rtos/uC-CPU/cpu_core.c ****     ts                 = (CPU_TS64  ) CPU_TS_64_Accum;
 526:rtos/uC-CPU/cpu_core.c ****     CPU_INT_EN();
 527:rtos/uC-CPU/cpu_core.c **** #endif
 528:rtos/uC-CPU/cpu_core.c **** 
 529:rtos/uC-CPU/cpu_core.c ****     return (ts);
 530:rtos/uC-CPU/cpu_core.c **** }
 531:rtos/uC-CPU/cpu_core.c **** #endif
 532:rtos/uC-CPU/cpu_core.c **** 
 533:rtos/uC-CPU/cpu_core.c **** 
 534:rtos/uC-CPU/cpu_core.c **** /*
 535:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 536:rtos/uC-CPU/cpu_core.c **** *                                           CPU_TS_Update()
 537:rtos/uC-CPU/cpu_core.c **** *
 538:rtos/uC-CPU/cpu_core.c **** * Description : Update current CPU timestamp(s).
 539:rtos/uC-CPU/cpu_core.c **** *
 540:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 541:rtos/uC-CPU/cpu_core.c **** *
 542:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 543:rtos/uC-CPU/cpu_core.c **** *
 544:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) CPU timestamp(s) MUST be updated periodically by some application (or BSP) 
 545:rtos/uC-CPU/cpu_core.c **** *                       handler in order to (adequately) maintain CPU timestamp(s)' time.
 546:rtos/uC-CPU/cpu_core.c **** *
 547:rtos/uC-CPU/cpu_core.c **** *                   (b) CPU timestamp(s) MUST be updated more frequently than the CPU timestamp tim
 548:rtos/uC-CPU/cpu_core.c **** *                       overflows; otherwise, CPU timestamp(s) will lose time.
 549:rtos/uC-CPU/cpu_core.c **** *
 550:rtos/uC-CPU/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c2'.
 551:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 552:rtos/uC-CPU/cpu_core.c **** */
 553:rtos/uC-CPU/cpu_core.c **** 
 554:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_EN == DEF_ENABLED)
 555:rtos/uC-CPU/cpu_core.c **** void  CPU_TS_Update (void)
 556:rtos/uC-CPU/cpu_core.c **** {
 557:rtos/uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
 558:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
ARM GAS  /tmp/cc6MS5yX.s 			page 12


 559:rtos/uC-CPU/cpu_core.c ****    (void)CPU_TS_Get32();
 560:rtos/uC-CPU/cpu_core.c **** #endif
 561:rtos/uC-CPU/cpu_core.c **** 
 562:rtos/uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
 563:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
 564:rtos/uC-CPU/cpu_core.c ****    (void)CPU_TS_Get64();
 565:rtos/uC-CPU/cpu_core.c **** #endif
 566:rtos/uC-CPU/cpu_core.c **** }
 567:rtos/uC-CPU/cpu_core.c **** #endif
 568:rtos/uC-CPU/cpu_core.c **** 
 569:rtos/uC-CPU/cpu_core.c **** 
 570:rtos/uC-CPU/cpu_core.c **** /*
 571:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 572:rtos/uC-CPU/cpu_core.c **** *                                         CPU_TS_TmrFreqGet()
 573:rtos/uC-CPU/cpu_core.c **** *
 574:rtos/uC-CPU/cpu_core.c **** * Description : Get CPU timestamp's timer frequency.
 575:rtos/uC-CPU/cpu_core.c **** *
 576:rtos/uC-CPU/cpu_core.c **** * Argument(s) : p_err       Pointer to variable that will receive the return error code from this f
 577:rtos/uC-CPU/cpu_core.c **** *
 578:rtos/uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU timestamp's timer frequency suc
 579:rtos/uC-CPU/cpu_core.c **** *                                                                   returned.
 580:rtos/uC-CPU/cpu_core.c **** *                               CPU_ERR_TS_FREQ_INVALID         CPU timestamp's timer frequency inv
 581:rtos/uC-CPU/cpu_core.c **** *                                                                   NOT yet configured.
 582:rtos/uC-CPU/cpu_core.c **** *
 583:rtos/uC-CPU/cpu_core.c **** * Return(s)   : CPU timestamp's timer frequency (in Hertz), if NO error(s).
 584:rtos/uC-CPU/cpu_core.c **** *
 585:rtos/uC-CPU/cpu_core.c **** *               0,                                          otherwise.
 586:rtos/uC-CPU/cpu_core.c **** *
 587:rtos/uC-CPU/cpu_core.c **** * Note(s)     : none.
 588:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 589:rtos/uC-CPU/cpu_core.c **** */
 590:rtos/uC-CPU/cpu_core.c **** 
 591:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 592:rtos/uC-CPU/cpu_core.c **** CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
 593:rtos/uC-CPU/cpu_core.c **** {
 594:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR_FREQ  freq_hz;
 595:rtos/uC-CPU/cpu_core.c **** 
 596:rtos/uC-CPU/cpu_core.c **** 
 597:rtos/uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 598:rtos/uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(0);
 599:rtos/uC-CPU/cpu_core.c ****     }
 600:rtos/uC-CPU/cpu_core.c **** 
 601:rtos/uC-CPU/cpu_core.c ****     freq_hz =  CPU_TS_TmrFreq_Hz;
 602:rtos/uC-CPU/cpu_core.c ****    *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
 603:rtos/uC-CPU/cpu_core.c **** 
 604:rtos/uC-CPU/cpu_core.c ****     return (freq_hz);
 605:rtos/uC-CPU/cpu_core.c **** }
 606:rtos/uC-CPU/cpu_core.c **** #endif
 607:rtos/uC-CPU/cpu_core.c **** 
 608:rtos/uC-CPU/cpu_core.c **** 
 609:rtos/uC-CPU/cpu_core.c **** /*
 610:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 611:rtos/uC-CPU/cpu_core.c **** *                                         CPU_TS_TmrFreqSet()
 612:rtos/uC-CPU/cpu_core.c **** *
 613:rtos/uC-CPU/cpu_core.c **** * Description : Set CPU timestamp's timer frequency.
 614:rtos/uC-CPU/cpu_core.c **** *
 615:rtos/uC-CPU/cpu_core.c **** * Argument(s) : freq_hz     Frequency (in Hertz) to set for CPU timestamp's timer.
ARM GAS  /tmp/cc6MS5yX.s 			page 13


 616:rtos/uC-CPU/cpu_core.c **** *
 617:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 618:rtos/uC-CPU/cpu_core.c **** *
 619:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) (1) CPU timestamp timer frequency is NOT required for internal CPU timestam
 620:rtos/uC-CPU/cpu_core.c **** *                           operations but may OPTIONALLY be configured by CPU_TS_TmrInit() or othe
 621:rtos/uC-CPU/cpu_core.c **** *                           application/BSP initialization functions.
 622:rtos/uC-CPU/cpu_core.c **** *
 623:rtos/uC-CPU/cpu_core.c **** *                       (2) CPU timestamp timer frequency MAY be used with optional CPU_TSxx_to_uSe
 624:rtos/uC-CPU/cpu_core.c **** *                           to convert CPU timestamps from timer counts into microseconds.
 625:rtos/uC-CPU/cpu_core.c **** *
 626:rtos/uC-CPU/cpu_core.c **** *                           See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2a
 627:rtos/uC-CPU/cpu_core.c **** *
 628:rtos/uC-CPU/cpu_core.c **** *                   (b) CPU timestamp timer period SHOULD be less than the typical measured time bu
 629:rtos/uC-CPU/cpu_core.c **** *                       be less than the maximum measured time; otherwise, timer resolution inadequ
 630:rtos/uC-CPU/cpu_core.c **** *                       measure desired times.
 631:rtos/uC-CPU/cpu_core.c **** *
 632:rtos/uC-CPU/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2b'.
 633:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 634:rtos/uC-CPU/cpu_core.c **** */
 635:rtos/uC-CPU/cpu_core.c **** 
 636:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 637:rtos/uC-CPU/cpu_core.c **** void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
 638:rtos/uC-CPU/cpu_core.c **** {
 639:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TmrFreq_Hz = freq_hz;
 640:rtos/uC-CPU/cpu_core.c **** }
 641:rtos/uC-CPU/cpu_core.c **** #endif
 642:rtos/uC-CPU/cpu_core.c **** 
 643:rtos/uC-CPU/cpu_core.c **** 
 644:rtos/uC-CPU/cpu_core.c **** /*
 645:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 646:rtos/uC-CPU/cpu_core.c **** *                                     CPU_IntDisMeasMaxCurReset()
 647:rtos/uC-CPU/cpu_core.c **** *
 648:rtos/uC-CPU/cpu_core.c **** * Description : Reset current maximum interrupts disabled time.
 649:rtos/uC-CPU/cpu_core.c **** *
 650:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 651:rtos/uC-CPU/cpu_core.c **** *
 652:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Maximum interrupts disabled time (in CPU timestamp timer counts) before resetting.
 653:rtos/uC-CPU/cpu_core.c **** *
 654:rtos/uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 655:rtos/uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 656:rtos/uC-CPU/cpu_core.c **** *
 657:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 658:rtos/uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 659:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 660:rtos/uC-CPU/cpu_core.c **** */
 661:rtos/uC-CPU/cpu_core.c **** 
 662:rtos/uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 663:rtos/uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
 664:rtos/uC-CPU/cpu_core.c **** {
 665:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 666:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 667:rtos/uC-CPU/cpu_core.c **** 
 668:rtos/uC-CPU/cpu_core.c **** 
 669:rtos/uC-CPU/cpu_core.c ****     time_max_cnts             = CPU_IntDisMeasMaxCurGet();
 670:rtos/uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 671:rtos/uC-CPU/cpu_core.c ****     CPU_IntDisMeasMaxCur_cnts = 0u;
 672:rtos/uC-CPU/cpu_core.c ****     CPU_INT_EN();
ARM GAS  /tmp/cc6MS5yX.s 			page 14


 673:rtos/uC-CPU/cpu_core.c **** 
 674:rtos/uC-CPU/cpu_core.c ****     return (time_max_cnts);
 675:rtos/uC-CPU/cpu_core.c **** }
 676:rtos/uC-CPU/cpu_core.c **** #endif
 677:rtos/uC-CPU/cpu_core.c **** 
 678:rtos/uC-CPU/cpu_core.c **** 
 679:rtos/uC-CPU/cpu_core.c **** /*
 680:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 681:rtos/uC-CPU/cpu_core.c **** *                                      CPU_IntDisMeasMaxCurGet()
 682:rtos/uC-CPU/cpu_core.c **** *
 683:rtos/uC-CPU/cpu_core.c **** * Description : Get current maximum interrupts disabled time.
 684:rtos/uC-CPU/cpu_core.c **** *
 685:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 686:rtos/uC-CPU/cpu_core.c **** *
 687:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Current maximum interrupts disabled time (in CPU timestamp timer counts).
 688:rtos/uC-CPU/cpu_core.c **** *
 689:rtos/uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 690:rtos/uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 691:rtos/uC-CPU/cpu_core.c **** *
 692:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 693:rtos/uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 694:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 695:rtos/uC-CPU/cpu_core.c **** */
 696:rtos/uC-CPU/cpu_core.c **** 
 697:rtos/uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 698:rtos/uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
 699:rtos/uC-CPU/cpu_core.c **** {
 700:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 701:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 702:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 703:rtos/uC-CPU/cpu_core.c **** 
 704:rtos/uC-CPU/cpu_core.c **** 
 705:rtos/uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 706:rtos/uC-CPU/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
 707:rtos/uC-CPU/cpu_core.c ****     CPU_INT_EN();
 708:rtos/uC-CPU/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 709:rtos/uC-CPU/cpu_core.c **** 
 710:rtos/uC-CPU/cpu_core.c ****     return (time_max_cnts);
 711:rtos/uC-CPU/cpu_core.c **** }
 712:rtos/uC-CPU/cpu_core.c **** #endif
 713:rtos/uC-CPU/cpu_core.c **** 
 714:rtos/uC-CPU/cpu_core.c **** 
 715:rtos/uC-CPU/cpu_core.c **** /*
 716:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 717:rtos/uC-CPU/cpu_core.c **** *                                       CPU_IntDisMeasMaxGet()
 718:rtos/uC-CPU/cpu_core.c **** *
 719:rtos/uC-CPU/cpu_core.c **** * Description : Get (non-resetable) maximum interrupts disabled time.
 720:rtos/uC-CPU/cpu_core.c **** *
 721:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 722:rtos/uC-CPU/cpu_core.c **** *
 723:rtos/uC-CPU/cpu_core.c **** * Return(s)   : (Non-resetable) maximum interrupts disabled time (in CPU timestamp timer counts).
 724:rtos/uC-CPU/cpu_core.c **** *
 725:rtos/uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 726:rtos/uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 727:rtos/uC-CPU/cpu_core.c **** *
 728:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMax_cnts' MUST ALWAYS be accessed
 729:rtos/uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
ARM GAS  /tmp/cc6MS5yX.s 			page 15


 730:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 731:rtos/uC-CPU/cpu_core.c **** */
 732:rtos/uC-CPU/cpu_core.c **** 
 733:rtos/uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 734:rtos/uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
 735:rtos/uC-CPU/cpu_core.c **** {
 736:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 737:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 738:rtos/uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 739:rtos/uC-CPU/cpu_core.c **** 
 740:rtos/uC-CPU/cpu_core.c **** 
 741:rtos/uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 742:rtos/uC-CPU/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMax_cnts;
 743:rtos/uC-CPU/cpu_core.c ****     CPU_INT_EN();
 744:rtos/uC-CPU/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 745:rtos/uC-CPU/cpu_core.c **** 
 746:rtos/uC-CPU/cpu_core.c ****     return (time_max_cnts);
 747:rtos/uC-CPU/cpu_core.c **** }
 748:rtos/uC-CPU/cpu_core.c **** #endif
 749:rtos/uC-CPU/cpu_core.c **** 
 750:rtos/uC-CPU/cpu_core.c **** 
 751:rtos/uC-CPU/cpu_core.c **** /*
 752:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 753:rtos/uC-CPU/cpu_core.c **** *                                        CPU_IntDisMeasStart()
 754:rtos/uC-CPU/cpu_core.c **** *
 755:rtos/uC-CPU/cpu_core.c **** * Description : Start interrupts disabled time measurement.
 756:rtos/uC-CPU/cpu_core.c **** *
 757:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 758:rtos/uC-CPU/cpu_core.c **** *
 759:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 760:rtos/uC-CPU/cpu_core.c **** *
 761:rtos/uC-CPU/cpu_core.c **** * Note(s)     : none.
 762:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 763:rtos/uC-CPU/cpu_core.c **** */
 764:rtos/uC-CPU/cpu_core.c **** 
 765:rtos/uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 766:rtos/uC-CPU/cpu_core.c **** void  CPU_IntDisMeasStart (void)
 767:rtos/uC-CPU/cpu_core.c **** {
 768:rtos/uC-CPU/cpu_core.c ****     CPU_IntDisMeasCtr++;
 769:rtos/uC-CPU/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...  
 770:rtos/uC-CPU/cpu_core.c ****         CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start tim
 771:rtos/uC-CPU/cpu_core.c ****     }
 772:rtos/uC-CPU/cpu_core.c ****     CPU_IntDisNestCtr++;
 773:rtos/uC-CPU/cpu_core.c **** }
 774:rtos/uC-CPU/cpu_core.c **** #endif
 775:rtos/uC-CPU/cpu_core.c **** 
 776:rtos/uC-CPU/cpu_core.c **** 
 777:rtos/uC-CPU/cpu_core.c **** /*
 778:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 779:rtos/uC-CPU/cpu_core.c **** *                                        CPU_IntDisMeasStop()
 780:rtos/uC-CPU/cpu_core.c **** *
 781:rtos/uC-CPU/cpu_core.c **** * Description : Stop interrupts disabled time measurement.
 782:rtos/uC-CPU/cpu_core.c **** *
 783:rtos/uC-CPU/cpu_core.c **** * Argument(s) : none.
 784:rtos/uC-CPU/cpu_core.c **** *
 785:rtos/uC-CPU/cpu_core.c **** * Return(s)   : none.
 786:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 16


 787:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) The total amount of time interrupts are disabled by system &/or application
 788:rtos/uC-CPU/cpu_core.c **** *                       during critical sections is calculated by the following equations :
 789:rtos/uC-CPU/cpu_core.c **** *
 790:rtos/uC-CPU/cpu_core.c **** *                       (1) When interrupts disabled time measurements are disabled :
 791:rtos/uC-CPU/cpu_core.c **** *
 792:rtos/uC-CPU/cpu_core.c **** *
 793:rtos/uC-CPU/cpu_core.c **** *                               |   CRITICAL  |                           |   CRITICAL  |
 794:rtos/uC-CPU/cpu_core.c **** *                               |<- SECTION ->|                           |<- SECTION ->|
 795:rtos/uC-CPU/cpu_core.c **** *                               |    ENTER    |                           |    EXIT     |
 796:rtos/uC-CPU/cpu_core.c **** *
 797:rtos/uC-CPU/cpu_core.c **** *                            Disable                                    Enable
 798:rtos/uC-CPU/cpu_core.c **** *                           Interrupts                                Interrupts
 799:rtos/uC-CPU/cpu_core.c **** *
 800:rtos/uC-CPU/cpu_core.c **** *                               ||           ||                           ||           ||
 801:rtos/uC-CPU/cpu_core.c **** *                               ||           ||                           ||           ||
 802:rtos/uC-CPU/cpu_core.c **** *                               ||       |   ||<------------------------->||       |   ||
 803:rtos/uC-CPU/cpu_core.c **** *                               ||       |<->||             |             ||<----->|   ||
 804:rtos/uC-CPU/cpu_core.c **** *                               ||       | | ||             |             ||   |   |   ||
 805:rtos/uC-CPU/cpu_core.c **** *                                        | |                |                  |   |
 806:rtos/uC-CPU/cpu_core.c **** *                                   interrupts            time                 interrupts
 807:rtos/uC-CPU/cpu_core.c **** *                                    disabled                 interrupts       |enabled
 808:rtos/uC-CPU/cpu_core.c **** *                                          |                   disabled        |
 809:rtos/uC-CPU/cpu_core.c **** *                                          |              (via application)    |
 810:rtos/uC-CPU/cpu_core.c **** *                                       time                                 time
 811:rtos/uC-CPU/cpu_core.c **** *                                           interrupts                           interrupts
 812:rtos/uC-CPU/cpu_core.c **** *                                         disabled ovrhd                        enabled ovrhd
 813:rtos/uC-CPU/cpu_core.c **** *
 814:rtos/uC-CPU/cpu_core.c **** *
 815:rtos/uC-CPU/cpu_core.c **** *                           (A) time            =  [ time            -  time           ]  -  time
 816:rtos/uC-CPU/cpu_core.c **** *                                   interrupts     [     interrupts         interrupts ]         to
 817:rtos/uC-CPU/cpu_core.c **** *                                    disabled      [      enabled            disabled  ]         ov
 818:rtos/uC-CPU/cpu_core.c **** *                               (via application)
 819:rtos/uC-CPU/cpu_core.c **** *
 820:rtos/uC-CPU/cpu_core.c **** *
 821:rtos/uC-CPU/cpu_core.c **** *                           (B) time       =  time              +  time
 822:rtos/uC-CPU/cpu_core.c **** *                                   total         interrupts           interrupts
 823:rtos/uC-CPU/cpu_core.c **** *                                   ovrhd        enabled ovrhd       disabled ovrhd
 824:rtos/uC-CPU/cpu_core.c **** *
 825:rtos/uC-CPU/cpu_core.c **** *
 826:rtos/uC-CPU/cpu_core.c **** *                                   where
 827:rtos/uC-CPU/cpu_core.c **** *
 828:rtos/uC-CPU/cpu_core.c **** *                                           time                    time interrupts are disabled be
 829:rtos/uC-CPU/cpu_core.c **** *                                               interrupts              first critical section ente
 830:rtos/uC-CPU/cpu_core.c **** *                                                disabled               last  critical section exit
 831:rtos/uC-CPU/cpu_core.c **** *                                           (via application)           minus total overhead time)
 832:rtos/uC-CPU/cpu_core.c **** *
 833:rtos/uC-CPU/cpu_core.c **** *                                           time                    time when interrupts are disabl
 834:rtos/uC-CPU/cpu_core.c **** *                                               interrupts
 835:rtos/uC-CPU/cpu_core.c **** *                                                disabled
 836:rtos/uC-CPU/cpu_core.c **** *
 837:rtos/uC-CPU/cpu_core.c **** *                                           time                    time when interrupts are  enabl
 838:rtos/uC-CPU/cpu_core.c **** *                                               interrupts
 839:rtos/uC-CPU/cpu_core.c **** *                                                enabled
 840:rtos/uC-CPU/cpu_core.c **** *
 841:rtos/uC-CPU/cpu_core.c **** *
 842:rtos/uC-CPU/cpu_core.c **** *                                           time                    total overhead time to disable/
 843:rtos/uC-CPU/cpu_core.c **** *                                               total                   interrupts during critical 
ARM GAS  /tmp/cc6MS5yX.s 			page 17


 844:rtos/uC-CPU/cpu_core.c **** *                                               ovrhd                   enter & exit
 845:rtos/uC-CPU/cpu_core.c **** *
 846:rtos/uC-CPU/cpu_core.c **** *                                           time                    total overhead time to disable 
 847:rtos/uC-CPU/cpu_core.c **** *                                               interrupts              during critical section ent
 848:rtos/uC-CPU/cpu_core.c **** *                                             disabled ovrhd
 849:rtos/uC-CPU/cpu_core.c **** *
 850:rtos/uC-CPU/cpu_core.c **** *                                           time                    total overhead time to enable  
 851:rtos/uC-CPU/cpu_core.c **** *                                               interrupts              during critical section exi
 852:rtos/uC-CPU/cpu_core.c **** *                                              enabled ovrhd
 853:rtos/uC-CPU/cpu_core.c **** *
 854:rtos/uC-CPU/cpu_core.c **** *
 855:rtos/uC-CPU/cpu_core.c **** *                       (2) When interrupts disabled time measurements are enabled :
 856:rtos/uC-CPU/cpu_core.c **** *
 857:rtos/uC-CPU/cpu_core.c **** *
 858:rtos/uC-CPU/cpu_core.c **** *        |                                    |                           |                        
 859:rtos/uC-CPU/cpu_core.c **** *        |<----- CRITICAL SECTION ENTER ----->|                           |<------- CRITICAL SECTIO
 860:rtos/uC-CPU/cpu_core.c **** *        |                                    |                           |                        
 861:rtos/uC-CPU/cpu_core.c **** *
 862:rtos/uC-CPU/cpu_core.c **** *                   Time                                                 Time
 863:rtos/uC-CPU/cpu_core.c **** *     Disable    Measurement                                          Measurement                  
 864:rtos/uC-CPU/cpu_core.c **** *    Interrupts     Start                                                Stop                    In
 865:rtos/uC-CPU/cpu_core.c **** *
 866:rtos/uC-CPU/cpu_core.c **** *        ||           |                      ||                           ||                       
 867:rtos/uC-CPU/cpu_core.c **** *        ||           |                      ||                           ||                       
 868:rtos/uC-CPU/cpu_core.c **** *        ||           |        |             ||<------------------------->||               |       
 869:rtos/uC-CPU/cpu_core.c **** *        ||       |   |        |<----------->||             |             ||<------------->|       
 870:rtos/uC-CPU/cpu_core.c **** *        ||       |   |        |      |      ||             |             ||       |       |       
 871:rtos/uC-CPU/cpu_core.c **** *                 |            |      |                     |                      |       |       
 872:rtos/uC-CPU/cpu_core.c **** *            interrupts       get     |                   time                     |      get      
 873:rtos/uC-CPU/cpu_core.c **** *             disabled    start time  |                       interrupts           |   stop time   
 874:rtos/uC-CPU/cpu_core.c **** *                            meas     |                        disabled            |     meas
 875:rtos/uC-CPU/cpu_core.c **** *                                   time                  (via application)      time
 876:rtos/uC-CPU/cpu_core.c **** *                                       start meas                                   stop meas
 877:rtos/uC-CPU/cpu_core.c **** *                                         ovrhd                                        ovrhd
 878:rtos/uC-CPU/cpu_core.c **** *
 879:rtos/uC-CPU/cpu_core.c **** *
 880:rtos/uC-CPU/cpu_core.c **** *                           (A) time            =  [ time       -  time      ]  -  time
 881:rtos/uC-CPU/cpu_core.c **** *                                   interrupts     [      stop         start ]         total meas
 882:rtos/uC-CPU/cpu_core.c **** *                                    disabled      [      meas         meas  ]           ovrhd
 883:rtos/uC-CPU/cpu_core.c **** *                               (via application)
 884:rtos/uC-CPU/cpu_core.c **** *
 885:rtos/uC-CPU/cpu_core.c **** *
 886:rtos/uC-CPU/cpu_core.c **** *                           (B) time            =  time            +  time
 887:rtos/uC-CPU/cpu_core.c **** *                                   total meas         start meas         stop meas
 888:rtos/uC-CPU/cpu_core.c **** *                                     ovrhd              ovrhd              ovrhd
 889:rtos/uC-CPU/cpu_core.c **** *
 890:rtos/uC-CPU/cpu_core.c **** *
 891:rtos/uC-CPU/cpu_core.c **** *                                   where
 892:rtos/uC-CPU/cpu_core.c **** *
 893:rtos/uC-CPU/cpu_core.c **** *                                           time                    time interrupts are disabled be
 894:rtos/uC-CPU/cpu_core.c **** *                                               interrupts              critical section enter & la
 895:rtos/uC-CPU/cpu_core.c **** *                                                disabled               section exit (i.e. minus me
 896:rtos/uC-CPU/cpu_core.c **** *                                           (via application)           overhead time; however, thi
 897:rtos/uC-CPU/cpu_core.c **** *                                                                       include any overhead time t
 898:rtos/uC-CPU/cpu_core.c **** *                                                                       or enable interrupts during
 899:rtos/uC-CPU/cpu_core.c **** *                                                                       section enter & exit)
 900:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 18


 901:rtos/uC-CPU/cpu_core.c **** *                                           time                    time of disable interrupts star
 902:rtos/uC-CPU/cpu_core.c **** *                                               start                   measurement (in timer count
 903:rtos/uC-CPU/cpu_core.c **** *                                               meas
 904:rtos/uC-CPU/cpu_core.c **** *
 905:rtos/uC-CPU/cpu_core.c **** *                                           time                    time of disable interrupts stop
 906:rtos/uC-CPU/cpu_core.c **** *                                               stop                    measurement (in timer count
 907:rtos/uC-CPU/cpu_core.c **** *                                               meas
 908:rtos/uC-CPU/cpu_core.c **** *
 909:rtos/uC-CPU/cpu_core.c **** *
 910:rtos/uC-CPU/cpu_core.c **** *                                           time                    total overhead time to start/st
 911:rtos/uC-CPU/cpu_core.c **** *                                               total meas              interrupts time measurement
 912:rtos/uC-CPU/cpu_core.c **** *                                                 ovrhd                 counts)
 913:rtos/uC-CPU/cpu_core.c **** *
 914:rtos/uC-CPU/cpu_core.c **** *                                           time                    total overhead time after getti
 915:rtos/uC-CPU/cpu_core.c **** *                                               start meas              time until end of start mea
 916:rtos/uC-CPU/cpu_core.c **** *                                                 ovrhd                 function  (in timer counts)
 917:rtos/uC-CPU/cpu_core.c **** *
 918:rtos/uC-CPU/cpu_core.c **** *                                           time                    total overhead time from beginn
 919:rtos/uC-CPU/cpu_core.c **** *                                               stop meas               measurement function until 
 920:rtos/uC-CPU/cpu_core.c **** *                                                 ovrhd                 stop time (in timer counts)
 921:rtos/uC-CPU/cpu_core.c **** *
 922:rtos/uC-CPU/cpu_core.c **** *
 923:rtos/uC-CPU/cpu_core.c **** *                   (b) (1) (A) In order to correctly handle unsigned subtraction overflows of star
 924:rtos/uC-CPU/cpu_core.c **** *                               from stop times, CPU timestamp timer count values MUST be returned 
 925:rtos/uC-CPU/cpu_core.c **** *                               word-size-configurable 'CPU_TS_TMR' data type.
 926:rtos/uC-CPU/cpu_core.c **** *
 927:rtos/uC-CPU/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2a
 928:rtos/uC-CPU/cpu_core.c **** *
 929:rtos/uC-CPU/cpu_core.c **** *                           (B) Since unsigned subtraction of start times from stop times assumes i
 930:rtos/uC-CPU/cpu_core.c **** *                               values, timestamp timer count values MUST increase with each time c
 931:rtos/uC-CPU/cpu_core.c **** *
 932:rtos/uC-CPU/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2b
 933:rtos/uC-CPU/cpu_core.c **** *
 934:rtos/uC-CPU/cpu_core.c **** *                       (2) (A) To expedite & reduce interrupts disabled time measurement overhead;
 935:rtos/uC-CPU/cpu_core.c **** *                               subtraction of start times from stop times is performed.
 936:rtos/uC-CPU/cpu_core.c **** *
 937:rtos/uC-CPU/cpu_core.c **** *                           (B) The final calculations to subtract the interrupts disabled time mea
 938:rtos/uC-CPU/cpu_core.c **** *                               overhead is performed asynchronously in appropriate API functions.
 939:rtos/uC-CPU/cpu_core.c **** *
 940:rtos/uC-CPU/cpu_core.c **** *                               See also 'CPU_IntDisMeasMaxCalc()  Note #1b'.
 941:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 942:rtos/uC-CPU/cpu_core.c **** */
 943:rtos/uC-CPU/cpu_core.c **** 
 944:rtos/uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 945:rtos/uC-CPU/cpu_core.c **** void  CPU_IntDisMeasStop (void)
 946:rtos/uC-CPU/cpu_core.c **** {
 947:rtos/uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_ints_disd_cnts;
 948:rtos/uC-CPU/cpu_core.c **** 
 949:rtos/uC-CPU/cpu_core.c **** 
 950:rtos/uC-CPU/cpu_core.c ****     CPU_IntDisNestCtr--;
 951:rtos/uC-CPU/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,    
 952:rtos/uC-CPU/cpu_core.c ****         CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop tim
 953:rtos/uC-CPU/cpu_core.c ****                                                                     /* ... calc ints dis'd tot  tim
 954:rtos/uC-CPU/cpu_core.c ****         time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
 955:rtos/uC-CPU/cpu_core.c ****                                   CPU_IntDisMeasStart_cnts;
 956:rtos/uC-CPU/cpu_core.c ****                                                                     /* Calc max ints dis'd times.  
 957:rtos/uC-CPU/cpu_core.c ****         if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
ARM GAS  /tmp/cc6MS5yX.s 			page 19


 958:rtos/uC-CPU/cpu_core.c ****             CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
 959:rtos/uC-CPU/cpu_core.c ****         }
 960:rtos/uC-CPU/cpu_core.c ****         if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
 961:rtos/uC-CPU/cpu_core.c ****             CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
 962:rtos/uC-CPU/cpu_core.c ****         }
 963:rtos/uC-CPU/cpu_core.c ****     }
 964:rtos/uC-CPU/cpu_core.c **** }
 965:rtos/uC-CPU/cpu_core.c **** #endif
 966:rtos/uC-CPU/cpu_core.c **** 
 967:rtos/uC-CPU/cpu_core.c **** 
 968:rtos/uC-CPU/cpu_core.c **** /*
 969:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
 970:rtos/uC-CPU/cpu_core.c **** *                                         CPU_CntLeadZeros()
 971:rtos/uC-CPU/cpu_core.c **** *
 972:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a data value
 973:rtos/uC-CPU/cpu_core.c **** *
 974:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
 975:rtos/uC-CPU/cpu_core.c **** *
 976:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val', if NO error(s).
 977:rtos/uC-CPU/cpu_core.c **** *
 978:rtos/uC-CPU/cpu_core.c **** *               DEF_INT_CPU_U_MAX_VAL,                                              otherwise.
 979:rtos/uC-CPU/cpu_core.c **** *
 980:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
 981:rtos/uC-CPU/cpu_core.c **** *
 982:rtos/uC-CPU/cpu_core.c **** *                       (1)  8-bits
 983:rtos/uC-CPU/cpu_core.c **** *                       (2) 16-bits
 984:rtos/uC-CPU/cpu_core.c **** *                       (3) 32-bits
 985:rtos/uC-CPU/cpu_core.c **** *                       (4) 64-bits
 986:rtos/uC-CPU/cpu_core.c **** *
 987:rtos/uC-CPU/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
 988:rtos/uC-CPU/cpu_core.c **** *
 989:rtos/uC-CPU/cpu_core.c **** *                   (b) (1) For  8-bit values :
 990:rtos/uC-CPU/cpu_core.c **** *
 991:rtos/uC-CPU/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
 992:rtos/uC-CPU/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ---------------
 993:rtos/uC-CPU/cpu_core.c **** *                                   1    x    x    x    x    x    x    x            0
 994:rtos/uC-CPU/cpu_core.c **** *                                   0    1    x    x    x    x    x    x            1
 995:rtos/uC-CPU/cpu_core.c **** *                                   0    0    1    x    x    x    x    x            2
 996:rtos/uC-CPU/cpu_core.c **** *                                   0    0    0    1    x    x    x    x            3
 997:rtos/uC-CPU/cpu_core.c **** *                                   0    0    0    0    1    x    x    x            4
 998:rtos/uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    1    x    x            5
 999:rtos/uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    1    x            6
1000:rtos/uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    1            7
1001:rtos/uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1002:rtos/uC-CPU/cpu_core.c **** *
1003:rtos/uC-CPU/cpu_core.c **** *
1004:rtos/uC-CPU/cpu_core.c **** *                       (2) For 16-bit values :
1005:rtos/uC-CPU/cpu_core.c **** *
1006:rtos/uC-CPU/cpu_core.c **** *                             b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1007:rtos/uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1008:rtos/uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1009:rtos/uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1010:rtos/uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1011:rtos/uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1012:rtos/uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1013:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           11
1014:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           12
ARM GAS  /tmp/cc6MS5yX.s 			page 20


1015:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           13
1016:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           14
1017:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           15
1018:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           16
1019:rtos/uC-CPU/cpu_core.c **** *
1020:rtos/uC-CPU/cpu_core.c **** *                       (3) For 32-bit values :
1021:rtos/uC-CPU/cpu_core.c **** *
1022:rtos/uC-CPU/cpu_core.c **** *                             b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1023:rtos/uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1024:rtos/uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1025:rtos/uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1026:rtos/uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1027:rtos/uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1028:rtos/uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1029:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           27
1030:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           28
1031:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           29
1032:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           30
1033:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           31
1034:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           32
1035:rtos/uC-CPU/cpu_core.c **** *
1036:rtos/uC-CPU/cpu_core.c **** *
1037:rtos/uC-CPU/cpu_core.c **** *                       (4) For 64-bit values :
1038:rtos/uC-CPU/cpu_core.c **** *
1039:rtos/uC-CPU/cpu_core.c **** *                             b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1040:rtos/uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1041:rtos/uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1042:rtos/uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1043:rtos/uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1044:rtos/uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1045:rtos/uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1046:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           59
1047:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           60
1048:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           61
1049:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           62
1050:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           63
1051:rtos/uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           64
1052:rtos/uC-CPU/cpu_core.c **** *
1053:rtos/uC-CPU/cpu_core.c **** *
1054:rtos/uC-CPU/cpu_core.c **** *                       See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1055:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1056:rtos/uC-CPU/cpu_core.c **** */
1057:rtos/uC-CPU/cpu_core.c **** 
1058:rtos/uC-CPU/cpu_core.c **** #ifndef   CPU_CFG_LEAD_ZEROS_ASM_PRESENT
1059:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros (CPU_DATA  val)
1060:rtos/uC-CPU/cpu_core.c **** {
1061:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1062:rtos/uC-CPU/cpu_core.c **** 
1063:rtos/uC-CPU/cpu_core.c **** 
1064:rtos/uC-CPU/cpu_core.c **** #if   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_08)
1065:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros08((CPU_INT08U)val);
1066:rtos/uC-CPU/cpu_core.c **** 
1067:rtos/uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
1068:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros16((CPU_INT16U)val);
1069:rtos/uC-CPU/cpu_core.c **** 
1070:rtos/uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
1071:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros32((CPU_INT32U)val);
ARM GAS  /tmp/cc6MS5yX.s 			page 21


1072:rtos/uC-CPU/cpu_core.c **** 
1073:rtos/uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_64)
1074:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros64((CPU_INT64U)val);
1075:rtos/uC-CPU/cpu_core.c **** 
1076:rtos/uC-CPU/cpu_core.c **** #else                                                           /* See Note #1a.                   
1077:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros = DEF_INT_CPU_U_MAX_VAL;
1078:rtos/uC-CPU/cpu_core.c **** #endif
1079:rtos/uC-CPU/cpu_core.c **** 
1080:rtos/uC-CPU/cpu_core.c **** 
1081:rtos/uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1082:rtos/uC-CPU/cpu_core.c **** }
1083:rtos/uC-CPU/cpu_core.c **** #endif
1084:rtos/uC-CPU/cpu_core.c **** 
1085:rtos/uC-CPU/cpu_core.c **** 
1086:rtos/uC-CPU/cpu_core.c **** /*
1087:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1088:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros08()
1089:rtos/uC-CPU/cpu_core.c **** *
1090:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in an 8-bit dat
1091:rtos/uC-CPU/cpu_core.c **** *
1092:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1093:rtos/uC-CPU/cpu_core.c **** *
1094:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1095:rtos/uC-CPU/cpu_core.c **** *
1096:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1097:rtos/uC-CPU/cpu_core.c **** *
1098:rtos/uC-CPU/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1099:rtos/uC-CPU/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1100:rtos/uC-CPU/cpu_core.c **** *                                1    x    x    x    x    x    x    x            0
1101:rtos/uC-CPU/cpu_core.c **** *                                0    1    x    x    x    x    x    x            1
1102:rtos/uC-CPU/cpu_core.c **** *                                0    0    1    x    x    x    x    x            2
1103:rtos/uC-CPU/cpu_core.c **** *                                0    0    0    1    x    x    x    x            3
1104:rtos/uC-CPU/cpu_core.c **** *                                0    0    0    0    1    x    x    x            4
1105:rtos/uC-CPU/cpu_core.c **** *                                0    0    0    0    0    1    x    x            5
1106:rtos/uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    1    x            6
1107:rtos/uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    1            7
1108:rtos/uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1109:rtos/uC-CPU/cpu_core.c **** *
1110:rtos/uC-CPU/cpu_core.c **** *
1111:rtos/uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1112:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1113:rtos/uC-CPU/cpu_core.c **** */
1114:rtos/uC-CPU/cpu_core.c **** 
1115:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1116:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
1117:rtos/uC-CPU/cpu_core.c **** {
  74              		.loc 1 1117 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		.loc 1 1117 1 is_stmt 0 view .LVU7
  79 0000 08B5     		push	{r3, lr}
  80              	.LCFI0:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 3, -8
  83              		.cfi_offset 14, -4
1118:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
ARM GAS  /tmp/cc6MS5yX.s 			page 22


1119:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1120:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1121:rtos/uC-CPU/cpu_core.c **** #endif
1122:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
  84              		.loc 1 1122 5 is_stmt 1 view .LVU8
1123:rtos/uC-CPU/cpu_core.c **** 
1124:rtos/uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1125:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1126:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1127:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
  85              		.loc 1 1127 5 view .LVU9
  86              		.loc 1 1127 24 is_stmt 0 view .LVU10
  87 0002 FFF7FEFF 		bl	CPU_CntLeadZeros
  88              	.LVL1:
1128:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
  89              		.loc 1 1128 5 is_stmt 1 view .LVU11
1129:rtos/uC-CPU/cpu_core.c **** 
1130:rtos/uC-CPU/cpu_core.c **** 
1131:rtos/uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1132:rtos/uC-CPU/cpu_core.c ****                                                                                 /* Chk bits [07:00]
1133:rtos/uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1134:rtos/uC-CPU/cpu_core.c ****     ix              = (CPU_DATA)(val);                                          /* .. lookup tbl ix
1135:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                      /* .. plus nbr msb 
1136:rtos/uC-CPU/cpu_core.c **** #endif
1137:rtos/uC-CPU/cpu_core.c **** 
1138:rtos/uC-CPU/cpu_core.c **** 
1139:rtos/uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
  90              		.loc 1 1139 5 view .LVU12
1140:rtos/uC-CPU/cpu_core.c **** }
  91              		.loc 1 1140 1 is_stmt 0 view .LVU13
  92 0006 1838     		subs	r0, r0, #24
  93              	.LVL2:
  94              		.loc 1 1140 1 view .LVU14
  95 0008 08BD     		pop	{r3, pc}
  96              		.cfi_endproc
  97              	.LFE2:
  99              		.section	.text.CPU_CntLeadZeros16,"ax",%progbits
 100              		.align	1
 101              		.global	CPU_CntLeadZeros16
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu fpv4-sp-d16
 107              	CPU_CntLeadZeros16:
 108              	.LVL3:
 109              	.LFB3:
1141:rtos/uC-CPU/cpu_core.c **** #endif
1142:rtos/uC-CPU/cpu_core.c **** 
1143:rtos/uC-CPU/cpu_core.c **** 
1144:rtos/uC-CPU/cpu_core.c **** /*
1145:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1146:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros16()
1147:rtos/uC-CPU/cpu_core.c **** *
1148:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 16-bit dat
1149:rtos/uC-CPU/cpu_core.c **** *
1150:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1151:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 23


1152:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1153:rtos/uC-CPU/cpu_core.c **** *
1154:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1155:rtos/uC-CPU/cpu_core.c **** *
1156:rtos/uC-CPU/cpu_core.c **** *                          b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1157:rtos/uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1158:rtos/uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1159:rtos/uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1160:rtos/uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1161:rtos/uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1162:rtos/uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1163:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           11
1164:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           12
1165:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           13
1166:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           14
1167:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           15
1168:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           16
1169:rtos/uC-CPU/cpu_core.c **** *
1170:rtos/uC-CPU/cpu_core.c **** *
1171:rtos/uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1172:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1173:rtos/uC-CPU/cpu_core.c **** */
1174:rtos/uC-CPU/cpu_core.c **** 
1175:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1176:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
1177:rtos/uC-CPU/cpu_core.c **** {
 110              		.loc 1 1177 1 is_stmt 1 view -0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		.loc 1 1177 1 is_stmt 0 view .LVU16
 115 0000 08B5     		push	{r3, lr}
 116              	.LCFI1:
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 3, -8
 119              		.cfi_offset 14, -4
1178:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1179:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1180:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1181:rtos/uC-CPU/cpu_core.c **** #endif
1182:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
 120              		.loc 1 1182 5 is_stmt 1 view .LVU17
1183:rtos/uC-CPU/cpu_core.c **** 
1184:rtos/uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1185:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1186:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1187:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 121              		.loc 1 1187 5 view .LVU18
 122              		.loc 1 1187 24 is_stmt 0 view .LVU19
 123 0002 FFF7FEFF 		bl	CPU_CntLeadZeros
 124              	.LVL4:
1188:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
 125              		.loc 1 1188 5 is_stmt 1 view .LVU20
1189:rtos/uC-CPU/cpu_core.c **** 
1190:rtos/uC-CPU/cpu_core.c **** 
1191:rtos/uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1192:rtos/uC-CPU/cpu_core.c ****     if (val > 0x00FFu) {                                                        /* Chk bits [15:08]
ARM GAS  /tmp/cc6MS5yX.s 			page 24


1193:rtos/uC-CPU/cpu_core.c ****         val            >>= 8u;                                                  /* .. Nbr lead zero
1194:rtos/uC-CPU/cpu_core.c ****         ix               = (CPU_DATA)(val);                                     /* .. lookup tbl ix
1195:rtos/uC-CPU/cpu_core.c ****         nbr_lead_zeros   = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);                 /* .. plus nbr msb 
1196:rtos/uC-CPU/cpu_core.c **** 
1197:rtos/uC-CPU/cpu_core.c ****     } else {                                                                    /* Chk bits [07:00]
1198:rtos/uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1199:rtos/uC-CPU/cpu_core.c ****         ix               = (CPU_DATA)(val);                                     /* .. lookup tbl ix
1200:rtos/uC-CPU/cpu_core.c ****         nbr_lead_zeros   = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u); /* .. plus nbr msb 
1201:rtos/uC-CPU/cpu_core.c ****     }
1202:rtos/uC-CPU/cpu_core.c **** #endif
1203:rtos/uC-CPU/cpu_core.c **** 
1204:rtos/uC-CPU/cpu_core.c **** 
1205:rtos/uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
 126              		.loc 1 1205 5 view .LVU21
1206:rtos/uC-CPU/cpu_core.c **** }
 127              		.loc 1 1206 1 is_stmt 0 view .LVU22
 128 0006 1038     		subs	r0, r0, #16
 129              	.LVL5:
 130              		.loc 1 1206 1 view .LVU23
 131 0008 08BD     		pop	{r3, pc}
 132              		.cfi_endproc
 133              	.LFE3:
 135              		.section	.text.CPU_CntLeadZeros32,"ax",%progbits
 136              		.align	1
 137              		.global	CPU_CntLeadZeros32
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv4-sp-d16
 143              	CPU_CntLeadZeros32:
 144              	.LVL6:
 145              	.LFB4:
1207:rtos/uC-CPU/cpu_core.c **** #endif
1208:rtos/uC-CPU/cpu_core.c **** 
1209:rtos/uC-CPU/cpu_core.c **** 
1210:rtos/uC-CPU/cpu_core.c **** /*
1211:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1212:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros32()
1213:rtos/uC-CPU/cpu_core.c **** *
1214:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 32-bit dat
1215:rtos/uC-CPU/cpu_core.c **** *
1216:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1217:rtos/uC-CPU/cpu_core.c **** *
1218:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1219:rtos/uC-CPU/cpu_core.c **** *
1220:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1221:rtos/uC-CPU/cpu_core.c **** *
1222:rtos/uC-CPU/cpu_core.c **** *                          b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1223:rtos/uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1224:rtos/uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1225:rtos/uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1226:rtos/uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1227:rtos/uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1228:rtos/uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1229:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           27
1230:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           28
1231:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           29
ARM GAS  /tmp/cc6MS5yX.s 			page 25


1232:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           30
1233:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           31
1234:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           32
1235:rtos/uC-CPU/cpu_core.c **** *
1236:rtos/uC-CPU/cpu_core.c **** *
1237:rtos/uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1238:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1239:rtos/uC-CPU/cpu_core.c **** */
1240:rtos/uC-CPU/cpu_core.c **** 
1241:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1242:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
1243:rtos/uC-CPU/cpu_core.c **** {
 146              		.loc 1 1243 1 is_stmt 1 view -0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		.loc 1 1243 1 is_stmt 0 view .LVU25
 151 0000 08B5     		push	{r3, lr}
 152              	.LCFI2:
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 3, -8
 155              		.cfi_offset 14, -4
1244:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1245:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1246:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1247:rtos/uC-CPU/cpu_core.c **** #endif
1248:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
 156              		.loc 1 1248 5 is_stmt 1 view .LVU26
1249:rtos/uC-CPU/cpu_core.c **** 
1250:rtos/uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1251:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1252:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1253:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 157              		.loc 1 1253 5 view .LVU27
 158              		.loc 1 1253 24 is_stmt 0 view .LVU28
 159 0002 FFF7FEFF 		bl	CPU_CntLeadZeros
 160              	.LVL7:
1254:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
 161              		.loc 1 1254 5 is_stmt 1 view .LVU29
1255:rtos/uC-CPU/cpu_core.c **** 
1256:rtos/uC-CPU/cpu_core.c **** 
1257:rtos/uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1258:rtos/uC-CPU/cpu_core.c ****     if (val > 0x0000FFFFu) {
1259:rtos/uC-CPU/cpu_core.c ****         if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24]
1260:rtos/uC-CPU/cpu_core.c ****             val            >>= 24u;                                             /* .. Nbr lead zero
1261:rtos/uC-CPU/cpu_core.c ****             ix               = (CPU_DATA)(val);                                 /* .. lookup tbl ix
1262:rtos/uC-CPU/cpu_core.c ****             nbr_lead_zeros   = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);             /* .. plus nbr msb 
1263:rtos/uC-CPU/cpu_core.c **** 
1264:rtos/uC-CPU/cpu_core.c ****         } else {                                                                /* Chk bits [23:16]
1265:rtos/uC-CPU/cpu_core.c ****             val            >>= 16u;                                             /* .. Nbr lead zero
1266:rtos/uC-CPU/cpu_core.c ****             ix               = (CPU_DATA)(val);                                 /* .. lookup tbl ix
1267:rtos/uC-CPU/cpu_core.c ****             nbr_lead_zeros   = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus nbr m
1268:rtos/uC-CPU/cpu_core.c ****         }
1269:rtos/uC-CPU/cpu_core.c **** 
1270:rtos/uC-CPU/cpu_core.c ****     } else {
1271:rtos/uC-CPU/cpu_core.c ****         if (val > 0x000000FFu) {                                                /* Chk bits [15:08]
1272:rtos/uC-CPU/cpu_core.c ****             val            >>= 8u;                                              /* .. Nbr lead zero
ARM GAS  /tmp/cc6MS5yX.s 			page 26


1273:rtos/uC-CPU/cpu_core.c ****             ix               = (CPU_DATA)(val);                                 /* .. lookup tbl ix
1274:rtos/uC-CPU/cpu_core.c ****             nbr_lead_zeros   = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus nbr m
1275:rtos/uC-CPU/cpu_core.c **** 
1276:rtos/uC-CPU/cpu_core.c ****         } else {                                                                /* Chk bits [07:00]
1277:rtos/uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1278:rtos/uC-CPU/cpu_core.c ****             ix               = (CPU_DATA)(val);                                 /* .. lookup tbl ix
1279:rtos/uC-CPU/cpu_core.c ****             nbr_lead_zeros   = (CPU_DATA)((CPU_DATA)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus nbr m
1280:rtos/uC-CPU/cpu_core.c ****         }
1281:rtos/uC-CPU/cpu_core.c ****     }
1282:rtos/uC-CPU/cpu_core.c **** #endif
1283:rtos/uC-CPU/cpu_core.c **** 
1284:rtos/uC-CPU/cpu_core.c **** 
1285:rtos/uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
 162              		.loc 1 1285 5 view .LVU30
1286:rtos/uC-CPU/cpu_core.c **** }
 163              		.loc 1 1286 1 is_stmt 0 view .LVU31
 164 0006 08BD     		pop	{r3, pc}
 165              		.cfi_endproc
 166              	.LFE4:
 168              		.section	.text.CPU_CntLeadZeros64,"ax",%progbits
 169              		.align	1
 170              		.global	CPU_CntLeadZeros64
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu fpv4-sp-d16
 176              	CPU_CntLeadZeros64:
 177              	.LVL8:
 178              	.LFB5:
1287:rtos/uC-CPU/cpu_core.c **** #endif
1288:rtos/uC-CPU/cpu_core.c **** 
1289:rtos/uC-CPU/cpu_core.c **** 
1290:rtos/uC-CPU/cpu_core.c **** /*
1291:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1292:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros64()
1293:rtos/uC-CPU/cpu_core.c **** *
1294:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 64-bit dat
1295:rtos/uC-CPU/cpu_core.c **** *
1296:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1297:rtos/uC-CPU/cpu_core.c **** *
1298:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1299:rtos/uC-CPU/cpu_core.c **** *
1300:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1301:rtos/uC-CPU/cpu_core.c **** *
1302:rtos/uC-CPU/cpu_core.c **** *                          b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1303:rtos/uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1304:rtos/uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1305:rtos/uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1306:rtos/uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1307:rtos/uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1308:rtos/uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1309:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           59
1310:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           60
1311:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           61
1312:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           62
1313:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           63
1314:rtos/uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           64
ARM GAS  /tmp/cc6MS5yX.s 			page 27


1315:rtos/uC-CPU/cpu_core.c **** *
1316:rtos/uC-CPU/cpu_core.c **** *
1317:rtos/uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1318:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1319:rtos/uC-CPU/cpu_core.c **** */
1320:rtos/uC-CPU/cpu_core.c **** 
1321:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
1322:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
1323:rtos/uC-CPU/cpu_core.c **** {
 179              		.loc 1 1323 1 is_stmt 1 view -0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184              		.loc 1 1323 1 is_stmt 0 view .LVU33
 185 0000 10B4     		push	{r4}
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 4
 188              		.cfi_offset 4, -4
1324:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1325:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
1326:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  ix;
 189              		.loc 1 1326 5 is_stmt 1 view .LVU34
1327:rtos/uC-CPU/cpu_core.c **** #endif
1328:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
 190              		.loc 1 1328 5 view .LVU35
1329:rtos/uC-CPU/cpu_core.c **** 
1330:rtos/uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1331:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1332:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
1333:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1334:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
1335:rtos/uC-CPU/cpu_core.c **** 
1336:rtos/uC-CPU/cpu_core.c **** 
1337:rtos/uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1338:rtos/uC-CPU/cpu_core.c ****     if (val > 0x00000000FFFFFFFFuLL) {
 191              		.loc 1 1338 5 view .LVU36
 192              		.loc 1 1338 8 is_stmt 0 view .LVU37
 193 0002 0129     		cmp	r1, #1
 194 0004 08BF     		it	eq
 195 0006 0028     		cmpeq	r0, #0
 196 0008 22D3     		bcc	.L11
1339:rtos/uC-CPU/cpu_core.c ****         if (val > 0x0000FFFFFFFFFFFFuLL) {
 197              		.loc 1 1339 9 is_stmt 1 view .LVU38
 198              		.loc 1 1339 12 is_stmt 0 view .LVU39
 199 000a B1F5803F 		cmp	r1, #65536
 200 000e 08BF     		it	eq
 201 0010 0028     		cmpeq	r0, #0
 202 0012 0FD3     		bcc	.L12
1340:rtos/uC-CPU/cpu_core.c ****             if (val > 0x00FFFFFFFFFFFFFFuLL) {                                  /* Chk bits [63:56]
 203              		.loc 1 1340 13 is_stmt 1 view .LVU40
 204              		.loc 1 1340 16 is_stmt 0 view .LVU41
 205 0014 B1F1807F 		cmp	r1, #16777216
 206 0018 08BF     		it	eq
 207 001a 0028     		cmpeq	r0, #0
 208 001c 05D3     		bcc	.L13
1341:rtos/uC-CPU/cpu_core.c ****                 val            >>= 56u;                                         /* .. Nbr lead zero
ARM GAS  /tmp/cc6MS5yX.s 			page 28


 209              		.loc 1 1341 17 is_stmt 1 view .LVU42
 210              		.loc 1 1341 32 is_stmt 0 view .LVU43
 211 001e 0B0E     		lsrs	r3, r1, #24
 212              	.LVL9:
1342:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 213              		.loc 1 1342 17 is_stmt 1 view .LVU44
1343:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)(CPU_CntLeadZerosTbl[ix]);         /* .. plus nbr msb 
 214              		.loc 1 1343 17 view .LVU45
 215              		.loc 1 1343 66 is_stmt 0 view .LVU46
 216 0020 1F4A     		ldr	r2, .L20
 217 0022 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 218              	.LVL10:
 219              	.L10:
1344:rtos/uC-CPU/cpu_core.c **** 
1345:rtos/uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [55:48]
1346:rtos/uC-CPU/cpu_core.c ****                 val            >>= 48u;                                         /* .. Nbr lead zero
1347:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
1348:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus
1349:rtos/uC-CPU/cpu_core.c ****             }
1350:rtos/uC-CPU/cpu_core.c **** 
1351:rtos/uC-CPU/cpu_core.c ****         } else {
1352:rtos/uC-CPU/cpu_core.c ****             if (val > 0x000000FFFFFFFFFFuLL) {                                  /* Chk bits [47:40]
1353:rtos/uC-CPU/cpu_core.c ****                 val            >>= 40u;                                         /* .. Nbr lead zero
1354:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
1355:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus
1356:rtos/uC-CPU/cpu_core.c **** 
1357:rtos/uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [39:32]
1358:rtos/uC-CPU/cpu_core.c ****                 val            >>= 32u;                                         /* .. Nbr lead zero
1359:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
1360:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus
1361:rtos/uC-CPU/cpu_core.c ****             }
1362:rtos/uC-CPU/cpu_core.c ****         }
1363:rtos/uC-CPU/cpu_core.c **** 
1364:rtos/uC-CPU/cpu_core.c ****     } else {
1365:rtos/uC-CPU/cpu_core.c ****         if (val > 0x000000000000FFFFuLL) {
1366:rtos/uC-CPU/cpu_core.c ****             if (val > 0x0000000000FFFFFFuLL) {                                  /* Chk bits [31:24]
1367:rtos/uC-CPU/cpu_core.c ****                 val            >>= 24u;                                         /* .. Nbr lead zero
1368:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
1369:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 32u);/* .. plus
1370:rtos/uC-CPU/cpu_core.c **** 
1371:rtos/uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [23:16]
1372:rtos/uC-CPU/cpu_core.c ****                 val            >>= 16u;                                         /* .. Nbr lead zero
1373:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
1374:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 40u);/* .. plus
1375:rtos/uC-CPU/cpu_core.c ****             }
1376:rtos/uC-CPU/cpu_core.c **** 
1377:rtos/uC-CPU/cpu_core.c ****         } else {
1378:rtos/uC-CPU/cpu_core.c ****             if (val > 0x00000000000000FFuLL) {                                  /* Chk bits [15:08]
1379:rtos/uC-CPU/cpu_core.c ****                 val            >>= 8u;                                          /* .. Nbr lead zero
1380:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
1381:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 48u);/* .. plus
1382:rtos/uC-CPU/cpu_core.c **** 
1383:rtos/uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [07:00]
1384:rtos/uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1385:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
1386:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 56u);/* .. plus
1387:rtos/uC-CPU/cpu_core.c ****             }
ARM GAS  /tmp/cc6MS5yX.s 			page 29


1388:rtos/uC-CPU/cpu_core.c ****         }
1389:rtos/uC-CPU/cpu_core.c ****     }
1390:rtos/uC-CPU/cpu_core.c **** #endif
1391:rtos/uC-CPU/cpu_core.c **** 
1392:rtos/uC-CPU/cpu_core.c **** 
1393:rtos/uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1394:rtos/uC-CPU/cpu_core.c **** }
 220              		.loc 1 1394 1 view .LVU47
 221 0024 5DF8044B 		ldr	r4, [sp], #4
 222              	.LCFI4:
 223              		.cfi_remember_state
 224              		.cfi_restore 4
 225              		.cfi_def_cfa_offset 0
 226 0028 7047     		bx	lr
 227              	.LVL11:
 228              	.L13:
 229              	.LCFI5:
 230              		.cfi_restore_state
1346:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 231              		.loc 1 1346 17 is_stmt 1 view .LVU48
1346:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 232              		.loc 1 1346 32 is_stmt 0 view .LVU49
 233 002a 0B0C     		lsrs	r3, r1, #16
 234              	.LVL12:
1347:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] +  8u);/* .. plus
 235              		.loc 1 1347 17 is_stmt 1 view .LVU50
1348:rtos/uC-CPU/cpu_core.c ****             }
 236              		.loc 1 1348 17 view .LVU51
1348:rtos/uC-CPU/cpu_core.c ****             }
 237              		.loc 1 1348 78 is_stmt 0 view .LVU52
 238 002c 1C4A     		ldr	r2, .L20
 239 002e D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
1348:rtos/uC-CPU/cpu_core.c ****             }
 240              		.loc 1 1348 34 view .LVU53
 241 0030 0830     		adds	r0, r0, #8
 242              	.LVL13:
1348:rtos/uC-CPU/cpu_core.c ****             }
 243              		.loc 1 1348 34 view .LVU54
 244 0032 F7E7     		b	.L10
 245              	.LVL14:
 246              	.L12:
1352:rtos/uC-CPU/cpu_core.c ****                 val            >>= 40u;                                         /* .. Nbr lead zero
 247              		.loc 1 1352 13 is_stmt 1 view .LVU55
1352:rtos/uC-CPU/cpu_core.c ****                 val            >>= 40u;                                         /* .. Nbr lead zero
 248              		.loc 1 1352 16 is_stmt 0 view .LVU56
 249 0034 B1F5807F 		cmp	r1, #256
 250 0038 08BF     		it	eq
 251 003a 0028     		cmpeq	r0, #0
 252 003c 04D3     		bcc	.L15
1353:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 253              		.loc 1 1353 17 is_stmt 1 view .LVU57
1353:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 254              		.loc 1 1353 32 is_stmt 0 view .LVU58
 255 003e 0B0A     		lsrs	r3, r1, #8
 256              	.LVL15:
1354:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 16u);/* .. plus
 257              		.loc 1 1354 17 is_stmt 1 view .LVU59
ARM GAS  /tmp/cc6MS5yX.s 			page 30


1355:rtos/uC-CPU/cpu_core.c **** 
 258              		.loc 1 1355 17 view .LVU60
1355:rtos/uC-CPU/cpu_core.c **** 
 259              		.loc 1 1355 78 is_stmt 0 view .LVU61
 260 0040 174A     		ldr	r2, .L20
 261 0042 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
1355:rtos/uC-CPU/cpu_core.c **** 
 262              		.loc 1 1355 34 view .LVU62
 263 0044 1030     		adds	r0, r0, #16
 264              	.LVL16:
1355:rtos/uC-CPU/cpu_core.c **** 
 265              		.loc 1 1355 34 view .LVU63
 266 0046 EDE7     		b	.L10
 267              	.LVL17:
 268              	.L15:
1358:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 269              		.loc 1 1358 17 is_stmt 1 view .LVU64
1359:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 24u);/* .. plus
 270              		.loc 1 1359 17 view .LVU65
1360:rtos/uC-CPU/cpu_core.c ****             }
 271              		.loc 1 1360 17 view .LVU66
1360:rtos/uC-CPU/cpu_core.c ****             }
 272              		.loc 1 1360 78 is_stmt 0 view .LVU67
 273 0048 154A     		ldr	r2, .L20
 274 004a 505C     		ldrb	r0, [r2, r1]	@ zero_extendqisi2
1360:rtos/uC-CPU/cpu_core.c ****             }
 275              		.loc 1 1360 34 view .LVU68
 276 004c 1830     		adds	r0, r0, #24
 277              	.LVL18:
1360:rtos/uC-CPU/cpu_core.c ****             }
 278              		.loc 1 1360 34 view .LVU69
 279 004e E9E7     		b	.L10
 280              	.LVL19:
 281              	.L11:
1365:rtos/uC-CPU/cpu_core.c ****             if (val > 0x0000000000FFFFFFuLL) {                                  /* Chk bits [31:24]
 282              		.loc 1 1365 9 is_stmt 1 view .LVU70
1365:rtos/uC-CPU/cpu_core.c ****             if (val > 0x0000000000FFFFFFuLL) {                                  /* Chk bits [31:24]
 283              		.loc 1 1365 12 is_stmt 0 view .LVU71
 284 0050 0029     		cmp	r1, #0
 285 0052 08BF     		it	eq
 286 0054 B0F5803F 		cmpeq	r0, #65536
 287 0058 12D3     		bcc	.L16
1366:rtos/uC-CPU/cpu_core.c ****                 val            >>= 24u;                                         /* .. Nbr lead zero
 288              		.loc 1 1366 13 is_stmt 1 view .LVU72
1366:rtos/uC-CPU/cpu_core.c ****                 val            >>= 24u;                                         /* .. Nbr lead zero
 289              		.loc 1 1366 16 is_stmt 0 view .LVU73
 290 005a 0029     		cmp	r1, #0
 291 005c 08BF     		it	eq
 292 005e B0F1807F 		cmpeq	r0, #16777216
 293 0062 06D3     		bcc	.L17
1367:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 294              		.loc 1 1367 17 is_stmt 1 view .LVU74
1367:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 295              		.loc 1 1367 32 is_stmt 0 view .LVU75
 296 0064 020E     		lsrs	r2, r0, #24
 297 0066 42EA0122 		orr	r2, r2, r1, lsl #8
 298              	.LVL20:
ARM GAS  /tmp/cc6MS5yX.s 			page 31


1368:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 32u);/* .. plus
 299              		.loc 1 1368 17 is_stmt 1 view .LVU76
1369:rtos/uC-CPU/cpu_core.c **** 
 300              		.loc 1 1369 17 view .LVU77
1369:rtos/uC-CPU/cpu_core.c **** 
 301              		.loc 1 1369 78 is_stmt 0 view .LVU78
 302 006a 0D4B     		ldr	r3, .L20
 303 006c 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 304              	.LVL21:
1369:rtos/uC-CPU/cpu_core.c **** 
 305              		.loc 1 1369 34 view .LVU79
 306 006e 2030     		adds	r0, r0, #32
 307              	.LVL22:
1369:rtos/uC-CPU/cpu_core.c **** 
 308              		.loc 1 1369 34 view .LVU80
 309 0070 D8E7     		b	.L10
 310              	.LVL23:
 311              	.L17:
1372:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 312              		.loc 1 1372 17 is_stmt 1 view .LVU81
1372:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 313              		.loc 1 1372 32 is_stmt 0 view .LVU82
 314 0072 020C     		lsrs	r2, r0, #16
 315 0074 42EA0142 		orr	r2, r2, r1, lsl #16
 316              	.LVL24:
1373:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 40u);/* .. plus
 317              		.loc 1 1373 17 is_stmt 1 view .LVU83
1374:rtos/uC-CPU/cpu_core.c ****             }
 318              		.loc 1 1374 17 view .LVU84
1374:rtos/uC-CPU/cpu_core.c ****             }
 319              		.loc 1 1374 78 is_stmt 0 view .LVU85
 320 0078 094B     		ldr	r3, .L20
 321 007a 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
1374:rtos/uC-CPU/cpu_core.c ****             }
 322              		.loc 1 1374 34 view .LVU86
 323 007c 2830     		adds	r0, r0, #40
 324              	.LVL25:
1374:rtos/uC-CPU/cpu_core.c ****             }
 325              		.loc 1 1374 34 view .LVU87
 326 007e D1E7     		b	.L10
 327              	.LVL26:
 328              	.L16:
1378:rtos/uC-CPU/cpu_core.c ****                 val            >>= 8u;                                          /* .. Nbr lead zero
 329              		.loc 1 1378 13 is_stmt 1 view .LVU88
1378:rtos/uC-CPU/cpu_core.c ****                 val            >>= 8u;                                          /* .. Nbr lead zero
 330              		.loc 1 1378 16 is_stmt 0 view .LVU89
 331 0080 0029     		cmp	r1, #0
 332 0082 08BF     		it	eq
 333 0084 B0F5807F 		cmpeq	r0, #256
 334 0088 06D3     		bcc	.L18
1379:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 335              		.loc 1 1379 17 is_stmt 1 view .LVU90
1379:rtos/uC-CPU/cpu_core.c ****                 ix               = (CPU_DATA)(val);                             /* .. lookup tbl ix
 336              		.loc 1 1379 32 is_stmt 0 view .LVU91
 337 008a 020A     		lsrs	r2, r0, #8
 338 008c 42EA0162 		orr	r2, r2, r1, lsl #24
 339              	.LVL27:
ARM GAS  /tmp/cc6MS5yX.s 			page 32


1380:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 48u);/* .. plus
 340              		.loc 1 1380 17 is_stmt 1 view .LVU92
1381:rtos/uC-CPU/cpu_core.c **** 
 341              		.loc 1 1381 17 view .LVU93
1381:rtos/uC-CPU/cpu_core.c **** 
 342              		.loc 1 1381 78 is_stmt 0 view .LVU94
 343 0090 034B     		ldr	r3, .L20
 344 0092 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
1381:rtos/uC-CPU/cpu_core.c **** 
 345              		.loc 1 1381 34 view .LVU95
 346 0094 3030     		adds	r0, r0, #48
 347              	.LVL28:
1381:rtos/uC-CPU/cpu_core.c **** 
 348              		.loc 1 1381 34 view .LVU96
 349 0096 C5E7     		b	.L10
 350              	.LVL29:
 351              	.L18:
1385:rtos/uC-CPU/cpu_core.c ****                 nbr_lead_zeros   = (CPU_DATA)((CPU_INT64U)CPU_CntLeadZerosTbl[ix] + 56u);/* .. plus
 352              		.loc 1 1385 17 is_stmt 1 view .LVU97
1386:rtos/uC-CPU/cpu_core.c ****             }
 353              		.loc 1 1386 17 view .LVU98
1386:rtos/uC-CPU/cpu_core.c ****             }
 354              		.loc 1 1386 78 is_stmt 0 view .LVU99
 355 0098 014B     		ldr	r3, .L20
 356 009a 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
 357              	.LVL30:
1386:rtos/uC-CPU/cpu_core.c ****             }
 358              		.loc 1 1386 34 view .LVU100
 359 009c 3830     		adds	r0, r0, #56
 360              	.LVL31:
1393:rtos/uC-CPU/cpu_core.c **** }
 361              		.loc 1 1393 5 is_stmt 1 view .LVU101
1393:rtos/uC-CPU/cpu_core.c **** }
 362              		.loc 1 1393 12 is_stmt 0 view .LVU102
 363 009e C1E7     		b	.L10
 364              	.L21:
 365              		.align	2
 366              	.L20:
 367 00a0 00000000 		.word	.LANCHOR0
 368              		.cfi_endproc
 369              	.LFE5:
 371              		.section	.text.CPU_CntTrailZeros08,"ax",%progbits
 372              		.align	1
 373              		.global	CPU_CntTrailZeros08
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu fpv4-sp-d16
 379              	CPU_CntTrailZeros08:
 380              	.LVL32:
 381              	.LFB6:
1395:rtos/uC-CPU/cpu_core.c **** #endif
1396:rtos/uC-CPU/cpu_core.c **** 
1397:rtos/uC-CPU/cpu_core.c **** 
1398:rtos/uC-CPU/cpu_core.c **** /*
1399:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1400:rtos/uC-CPU/cpu_core.c **** *                                         CPU_CntTrailZeros()
ARM GAS  /tmp/cc6MS5yX.s 			page 33


1401:rtos/uC-CPU/cpu_core.c **** *
1402:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a data val
1403:rtos/uC-CPU/cpu_core.c **** *
1404:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1405:rtos/uC-CPU/cpu_core.c **** *
1406:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1407:rtos/uC-CPU/cpu_core.c **** *
1408:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1409:rtos/uC-CPU/cpu_core.c **** *
1410:rtos/uC-CPU/cpu_core.c **** *                       (1)  8-bits
1411:rtos/uC-CPU/cpu_core.c **** *                       (2) 16-bits
1412:rtos/uC-CPU/cpu_core.c **** *                       (3) 32-bits
1413:rtos/uC-CPU/cpu_core.c **** *                       (4) 64-bits
1414:rtos/uC-CPU/cpu_core.c **** *
1415:rtos/uC-CPU/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1416:rtos/uC-CPU/cpu_core.c **** *
1417:rtos/uC-CPU/cpu_core.c **** *                   (b) (1) For  8-bit values :
1418:rtos/uC-CPU/cpu_core.c **** *
1419:rtos/uC-CPU/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1420:rtos/uC-CPU/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1421:rtos/uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    x    x    1            0
1422:rtos/uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    x    1    0            1
1423:rtos/uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    1    0    0            2
1424:rtos/uC-CPU/cpu_core.c **** *                                   x    x    x    x    1    0    0    0            3
1425:rtos/uC-CPU/cpu_core.c **** *                                   x    x    x    1    0    0    0    0            4
1426:rtos/uC-CPU/cpu_core.c **** *                                   x    x    1    0    0    0    0    0            5
1427:rtos/uC-CPU/cpu_core.c **** *                                   x    1    0    0    0    0    0    0            6
1428:rtos/uC-CPU/cpu_core.c **** *                                   1    0    0    0    0    0    0    0            7
1429:rtos/uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1430:rtos/uC-CPU/cpu_core.c **** *
1431:rtos/uC-CPU/cpu_core.c **** *
1432:rtos/uC-CPU/cpu_core.c **** *                       (2) For 16-bit values :
1433:rtos/uC-CPU/cpu_core.c **** *
1434:rtos/uC-CPU/cpu_core.c **** *                             b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1435:rtos/uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1436:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1437:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1438:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1439:rtos/uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1440:rtos/uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1441:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           11
1442:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           12
1443:rtos/uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           13
1444:rtos/uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           14
1445:rtos/uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           15
1446:rtos/uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           16
1447:rtos/uC-CPU/cpu_core.c **** *
1448:rtos/uC-CPU/cpu_core.c **** *
1449:rtos/uC-CPU/cpu_core.c **** *                       (3) For 32-bit values :
1450:rtos/uC-CPU/cpu_core.c **** *
1451:rtos/uC-CPU/cpu_core.c **** *                             b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1452:rtos/uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1453:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1454:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1455:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1456:rtos/uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1457:rtos/uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
ARM GAS  /tmp/cc6MS5yX.s 			page 34


1458:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           27
1459:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           28
1460:rtos/uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           29
1461:rtos/uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           30
1462:rtos/uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           31
1463:rtos/uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           32
1464:rtos/uC-CPU/cpu_core.c **** *
1465:rtos/uC-CPU/cpu_core.c **** *
1466:rtos/uC-CPU/cpu_core.c **** *                       (4) For 64-bit values :
1467:rtos/uC-CPU/cpu_core.c **** *
1468:rtos/uC-CPU/cpu_core.c **** *                             b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1469:rtos/uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1470:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1471:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1472:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1473:rtos/uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1474:rtos/uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1475:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           59
1476:rtos/uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           60
1477:rtos/uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           61
1478:rtos/uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           62
1479:rtos/uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           63
1480:rtos/uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           64
1481:rtos/uC-CPU/cpu_core.c **** *
1482:rtos/uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1483:rtos/uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1484:rtos/uC-CPU/cpu_core.c **** *
1485:rtos/uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1486:rtos/uC-CPU/cpu_core.c **** *
1487:rtos/uC-CPU/cpu_core.c **** *                   (a) CPU_CntTrailZeros()'s final conditional statement calculates 'val's number 
1488:rtos/uC-CPU/cpu_core.c **** *                       trailing zeros based on its return data size, 'CPU_CFG_DATA_SIZE', & 'val's
1489:rtos/uC-CPU/cpu_core.c **** *                       calculated number of lead zeros ONLY if the initial 'val' is non-'0' :
1490:rtos/uC-CPU/cpu_core.c **** *
1491:rtos/uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1492:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) -
1493:rtos/uC-CPU/cpu_core.c **** *                           } else {
1494:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1495:rtos/uC-CPU/cpu_core.c **** *                           }
1496:rtos/uC-CPU/cpu_core.c **** *
1497:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1498:rtos/uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1499:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1500:rtos/uC-CPU/cpu_core.c **** */
1501:rtos/uC-CPU/cpu_core.c **** 
1502:rtos/uC-CPU/cpu_core.c **** #ifndef   CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
1503:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros (CPU_DATA  val)
1504:rtos/uC-CPU/cpu_core.c **** {
1505:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  val_bit_mask;
1506:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1507:rtos/uC-CPU/cpu_core.c ****     CPU_DATA  nbr_trail_zeros;
1508:rtos/uC-CPU/cpu_core.c **** 
1509:rtos/uC-CPU/cpu_core.c **** 
1510:rtos/uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1511:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS));
1512:rtos/uC-CPU/cpu_core.c ****     }
1513:rtos/uC-CPU/cpu_core.c **** 
1514:rtos/uC-CPU/cpu_core.c **** 
ARM GAS  /tmp/cc6MS5yX.s 			page 35


1515:rtos/uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_DATA)~val + 1u);              /* Zero/clr all bits EXCEPT least-s
1516:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros(val_bit_mask);           /* Cnt  nbr lead  0s.              
1517:rtos/uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1518:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_DATA)((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros);
1519:rtos/uC-CPU/cpu_core.c **** 
1520:rtos/uC-CPU/cpu_core.c **** 
1521:rtos/uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
1522:rtos/uC-CPU/cpu_core.c **** }
1523:rtos/uC-CPU/cpu_core.c **** #endif
1524:rtos/uC-CPU/cpu_core.c **** 
1525:rtos/uC-CPU/cpu_core.c **** 
1526:rtos/uC-CPU/cpu_core.c **** /*
1527:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1528:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros08()
1529:rtos/uC-CPU/cpu_core.c **** *
1530:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in an 8-bit d
1531:rtos/uC-CPU/cpu_core.c **** *
1532:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1533:rtos/uC-CPU/cpu_core.c **** *
1534:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1535:rtos/uC-CPU/cpu_core.c **** *
1536:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1537:rtos/uC-CPU/cpu_core.c **** *
1538:rtos/uC-CPU/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1539:rtos/uC-CPU/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1540:rtos/uC-CPU/cpu_core.c **** *                                x    x    x    x    x    x    x    1            0
1541:rtos/uC-CPU/cpu_core.c **** *                                x    x    x    x    x    x    1    0            1
1542:rtos/uC-CPU/cpu_core.c **** *                                x    x    x    x    x    1    0    0            2
1543:rtos/uC-CPU/cpu_core.c **** *                                x    x    x    x    1    0    0    0            3
1544:rtos/uC-CPU/cpu_core.c **** *                                x    x    x    1    0    0    0    0            4
1545:rtos/uC-CPU/cpu_core.c **** *                                x    x    1    0    0    0    0    0            5
1546:rtos/uC-CPU/cpu_core.c **** *                                x    1    0    0    0    0    0    0            6
1547:rtos/uC-CPU/cpu_core.c **** *                                1    0    0    0    0    0    0    0            7
1548:rtos/uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1549:rtos/uC-CPU/cpu_core.c **** *
1550:rtos/uC-CPU/cpu_core.c **** *
1551:rtos/uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1552:rtos/uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1553:rtos/uC-CPU/cpu_core.c **** *
1554:rtos/uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1555:rtos/uC-CPU/cpu_core.c **** *
1556:rtos/uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's
1557:rtos/uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.
1558:rtos/uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros08()'s  8-bit retu
1559:rtos/uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1560:rtos/uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros08()'s return data size :
1561:rtos/uC-CPU/cpu_core.c **** *
1562:rtos/uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1563:rtos/uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_08  * DEF_OCTET_NBR_BITS)) {
1564:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCT
1565:rtos/uC-CPU/cpu_core.c **** *                           }
1566:rtos/uC-CPU/cpu_core.c **** *
1567:rtos/uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0'  8-
1568:rtos/uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to  8 bit
1569:rtos/uC-CPU/cpu_core.c **** *
1570:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1571:rtos/uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
ARM GAS  /tmp/cc6MS5yX.s 			page 36


1572:rtos/uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and  8-bit data value bit
1573:rtos/uC-CPU/cpu_core.c **** *
1574:rtos/uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros08()'s C implementation, the final conditional stateme
1575:rtos/uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros08()'s
1576:rtos/uC-CPU/cpu_core.c **** *                        8-bit return data size & 'val's calculated number of lead zeros ONLY if th
1577:rtos/uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1578:rtos/uC-CPU/cpu_core.c **** *
1579:rtos/uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1580:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - 
1581:rtos/uC-CPU/cpu_core.c **** *                           } else {
1582:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1583:rtos/uC-CPU/cpu_core.c **** *                           }
1584:rtos/uC-CPU/cpu_core.c **** *
1585:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1586:rtos/uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1587:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1588:rtos/uC-CPU/cpu_core.c **** */
1589:rtos/uC-CPU/cpu_core.c **** 
1590:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1591:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
1592:rtos/uC-CPU/cpu_core.c **** {
 382              		.loc 1 1592 1 is_stmt 1 view -0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
1593:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1594:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1595:rtos/uC-CPU/cpu_core.c ****     CPU_INT08U  val_bit_mask;
1596:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1597:rtos/uC-CPU/cpu_core.c **** #endif
1598:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
 386              		.loc 1 1598 5 view .LVU104
1599:rtos/uC-CPU/cpu_core.c **** 
1600:rtos/uC-CPU/cpu_core.c **** 
1601:rtos/uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 387              		.loc 1 1601 5 view .LVU105
 388              		.loc 1 1601 8 is_stmt 0 view .LVU106
 389 0000 18B1     		cbz	r0, .L24
1592:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 390              		.loc 1 1592 1 view .LVU107
 391 0002 08B5     		push	{r3, lr}
 392              	.LCFI6:
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 3, -8
 395              		.cfi_offset 14, -4
1602:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS));
1603:rtos/uC-CPU/cpu_core.c ****     }
1604:rtos/uC-CPU/cpu_core.c **** 
1605:rtos/uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1606:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1607:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1608:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 396              		.loc 1 1608 5 is_stmt 1 view .LVU108
 397              		.loc 1 1608 23 is_stmt 0 view .LVU109
 398 0004 FFF7FEFF 		bl	CPU_CntTrailZeros
 399              	.LVL33:
1609:rtos/uC-CPU/cpu_core.c **** 
ARM GAS  /tmp/cc6MS5yX.s 			page 37


1610:rtos/uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1611:rtos/uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1612:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.              
1613:rtos/uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1614:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_DATA)((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros);
1615:rtos/uC-CPU/cpu_core.c **** #endif
1616:rtos/uC-CPU/cpu_core.c **** 
1617:rtos/uC-CPU/cpu_core.c **** 
1618:rtos/uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 400              		.loc 1 1618 5 is_stmt 1 view .LVU110
1619:rtos/uC-CPU/cpu_core.c **** }
 401              		.loc 1 1619 1 is_stmt 0 view .LVU111
 402 0008 08BD     		pop	{r3, pc}
 403              	.LVL34:
 404              	.L24:
 405              	.LCFI7:
 406              		.cfi_def_cfa_offset 0
 407              		.cfi_restore 3
 408              		.cfi_restore 14
1602:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS));
 409              		.loc 1 1602 16 view .LVU112
 410 000a 0820     		movs	r0, #8
 411              	.LVL35:
 412              		.loc 1 1619 1 view .LVU113
 413 000c 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE6:
 417              		.section	.text.CPU_CntTrailZeros16,"ax",%progbits
 418              		.align	1
 419              		.global	CPU_CntTrailZeros16
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu fpv4-sp-d16
 425              	CPU_CntTrailZeros16:
 426              	.LVL36:
 427              	.LFB7:
1620:rtos/uC-CPU/cpu_core.c **** #endif
1621:rtos/uC-CPU/cpu_core.c **** 
1622:rtos/uC-CPU/cpu_core.c **** 
1623:rtos/uC-CPU/cpu_core.c **** /*
1624:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1625:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros16()
1626:rtos/uC-CPU/cpu_core.c **** *
1627:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 16-bit d
1628:rtos/uC-CPU/cpu_core.c **** *
1629:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1630:rtos/uC-CPU/cpu_core.c **** *
1631:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1632:rtos/uC-CPU/cpu_core.c **** *
1633:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1634:rtos/uC-CPU/cpu_core.c **** *
1635:rtos/uC-CPU/cpu_core.c **** *                          b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1636:rtos/uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1637:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1638:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1639:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
ARM GAS  /tmp/cc6MS5yX.s 			page 38


1640:rtos/uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1641:rtos/uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1642:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           11
1643:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           12
1644:rtos/uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           13
1645:rtos/uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           14
1646:rtos/uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           15
1647:rtos/uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           16
1648:rtos/uC-CPU/cpu_core.c **** *
1649:rtos/uC-CPU/cpu_core.c **** *
1650:rtos/uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1651:rtos/uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1652:rtos/uC-CPU/cpu_core.c **** *
1653:rtos/uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1654:rtos/uC-CPU/cpu_core.c **** *
1655:rtos/uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's
1656:rtos/uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.
1657:rtos/uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros16()'s 16-bit retu
1658:rtos/uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1659:rtos/uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros16()'s return data size :
1660:rtos/uC-CPU/cpu_core.c **** *
1661:rtos/uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1662:rtos/uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_16  * DEF_OCTET_NBR_BITS)) {
1663:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCT
1664:rtos/uC-CPU/cpu_core.c **** *                           }
1665:rtos/uC-CPU/cpu_core.c **** *
1666:rtos/uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 16-
1667:rtos/uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 16 bit
1668:rtos/uC-CPU/cpu_core.c **** *
1669:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1670:rtos/uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1671:rtos/uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 16-bit data value bit
1672:rtos/uC-CPU/cpu_core.c **** *
1673:rtos/uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros16()'s C implementation, the final conditional stateme
1674:rtos/uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros16()'s
1675:rtos/uC-CPU/cpu_core.c **** *                       16-bit return data size & 'val's calculated number of lead zeros ONLY if th
1676:rtos/uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1677:rtos/uC-CPU/cpu_core.c **** *
1678:rtos/uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1679:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - 
1680:rtos/uC-CPU/cpu_core.c **** *                           } else {
1681:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1682:rtos/uC-CPU/cpu_core.c **** *                           }
1683:rtos/uC-CPU/cpu_core.c **** *
1684:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1685:rtos/uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1686:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1687:rtos/uC-CPU/cpu_core.c **** */
1688:rtos/uC-CPU/cpu_core.c **** 
1689:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1690:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
1691:rtos/uC-CPU/cpu_core.c **** {
 428              		.loc 1 1691 1 is_stmt 1 view -0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
1692:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
ARM GAS  /tmp/cc6MS5yX.s 			page 39


1693:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1694:rtos/uC-CPU/cpu_core.c ****     CPU_INT16U  val_bit_mask;
1695:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1696:rtos/uC-CPU/cpu_core.c **** #endif
1697:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
 432              		.loc 1 1697 5 view .LVU115
1698:rtos/uC-CPU/cpu_core.c **** 
1699:rtos/uC-CPU/cpu_core.c **** 
1700:rtos/uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 433              		.loc 1 1700 5 view .LVU116
 434              		.loc 1 1700 8 is_stmt 0 view .LVU117
 435 0000 18B1     		cbz	r0, .L31
1691:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 436              		.loc 1 1691 1 view .LVU118
 437 0002 08B5     		push	{r3, lr}
 438              	.LCFI8:
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 3, -8
 441              		.cfi_offset 14, -4
1701:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS));
1702:rtos/uC-CPU/cpu_core.c ****     }
1703:rtos/uC-CPU/cpu_core.c **** 
1704:rtos/uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1705:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1706:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1707:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 442              		.loc 1 1707 5 is_stmt 1 view .LVU119
 443              		.loc 1 1707 23 is_stmt 0 view .LVU120
 444 0004 FFF7FEFF 		bl	CPU_CntTrailZeros
 445              	.LVL37:
1708:rtos/uC-CPU/cpu_core.c **** 
1709:rtos/uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1710:rtos/uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1711:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.              
1712:rtos/uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1713:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_DATA)((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros);
1714:rtos/uC-CPU/cpu_core.c **** #endif
1715:rtos/uC-CPU/cpu_core.c **** 
1716:rtos/uC-CPU/cpu_core.c **** 
1717:rtos/uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 446              		.loc 1 1717 5 is_stmt 1 view .LVU121
1718:rtos/uC-CPU/cpu_core.c **** }
 447              		.loc 1 1718 1 is_stmt 0 view .LVU122
 448 0008 08BD     		pop	{r3, pc}
 449              	.LVL38:
 450              	.L31:
 451              	.LCFI9:
 452              		.cfi_def_cfa_offset 0
 453              		.cfi_restore 3
 454              		.cfi_restore 14
1701:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS));
 455              		.loc 1 1701 16 view .LVU123
 456 000a 1020     		movs	r0, #16
 457              	.LVL39:
 458              		.loc 1 1718 1 view .LVU124
 459 000c 7047     		bx	lr
 460              		.cfi_endproc
ARM GAS  /tmp/cc6MS5yX.s 			page 40


 461              	.LFE7:
 463              		.section	.text.CPU_CntTrailZeros32,"ax",%progbits
 464              		.align	1
 465              		.global	CPU_CntTrailZeros32
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	CPU_CntTrailZeros32:
 472              	.LVL40:
 473              	.LFB8:
1719:rtos/uC-CPU/cpu_core.c **** #endif
1720:rtos/uC-CPU/cpu_core.c **** 
1721:rtos/uC-CPU/cpu_core.c **** 
1722:rtos/uC-CPU/cpu_core.c **** /*
1723:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1724:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros32()
1725:rtos/uC-CPU/cpu_core.c **** *
1726:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 32-bit d
1727:rtos/uC-CPU/cpu_core.c **** *
1728:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1729:rtos/uC-CPU/cpu_core.c **** *
1730:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1731:rtos/uC-CPU/cpu_core.c **** *
1732:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1733:rtos/uC-CPU/cpu_core.c **** *
1734:rtos/uC-CPU/cpu_core.c **** *                          b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1735:rtos/uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1736:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1737:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1738:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1739:rtos/uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1740:rtos/uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1741:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           27
1742:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           28
1743:rtos/uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           29
1744:rtos/uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           30
1745:rtos/uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           31
1746:rtos/uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           32
1747:rtos/uC-CPU/cpu_core.c **** *
1748:rtos/uC-CPU/cpu_core.c **** *
1749:rtos/uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1750:rtos/uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1751:rtos/uC-CPU/cpu_core.c **** *
1752:rtos/uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1753:rtos/uC-CPU/cpu_core.c **** *
1754:rtos/uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's
1755:rtos/uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.
1756:rtos/uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros32()'s 32-bit retu
1757:rtos/uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1758:rtos/uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros32()'s return data size :
1759:rtos/uC-CPU/cpu_core.c **** *
1760:rtos/uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1761:rtos/uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_32  * DEF_OCTET_NBR_BITS)) {
1762:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCT
1763:rtos/uC-CPU/cpu_core.c **** *                           }
1764:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 41


1765:rtos/uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 32-
1766:rtos/uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 32 bit
1767:rtos/uC-CPU/cpu_core.c **** *
1768:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1769:rtos/uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1770:rtos/uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 32-bit data value bit
1771:rtos/uC-CPU/cpu_core.c **** *
1772:rtos/uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros32()'s C implementation, the final conditional stateme
1773:rtos/uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros32()'s
1774:rtos/uC-CPU/cpu_core.c **** *                       32-bit return data size & 'val's calculated number of lead zeros ONLY if th
1775:rtos/uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1776:rtos/uC-CPU/cpu_core.c **** *
1777:rtos/uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1778:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - 
1779:rtos/uC-CPU/cpu_core.c **** *                           } else {
1780:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1781:rtos/uC-CPU/cpu_core.c **** *                           }
1782:rtos/uC-CPU/cpu_core.c **** *
1783:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1784:rtos/uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1785:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1786:rtos/uC-CPU/cpu_core.c **** */
1787:rtos/uC-CPU/cpu_core.c **** 
1788:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1789:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
1790:rtos/uC-CPU/cpu_core.c **** {
 474              		.loc 1 1790 1 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
1791:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1792:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1793:rtos/uC-CPU/cpu_core.c ****     CPU_INT32U  val_bit_mask;
1794:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1795:rtos/uC-CPU/cpu_core.c **** #endif
1796:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
 478              		.loc 1 1796 5 view .LVU126
1797:rtos/uC-CPU/cpu_core.c **** 
1798:rtos/uC-CPU/cpu_core.c **** 
1799:rtos/uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 479              		.loc 1 1799 5 view .LVU127
 480              		.loc 1 1799 8 is_stmt 0 view .LVU128
 481 0000 18B1     		cbz	r0, .L38
1790:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
 482              		.loc 1 1790 1 view .LVU129
 483 0002 08B5     		push	{r3, lr}
 484              	.LCFI10:
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 3, -8
 487              		.cfi_offset 14, -4
1800:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS));
1801:rtos/uC-CPU/cpu_core.c ****     }
1802:rtos/uC-CPU/cpu_core.c **** 
1803:rtos/uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1804:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1805:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1806:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
ARM GAS  /tmp/cc6MS5yX.s 			page 42


 488              		.loc 1 1806 5 is_stmt 1 view .LVU130
 489              		.loc 1 1806 23 is_stmt 0 view .LVU131
 490 0004 FFF7FEFF 		bl	CPU_CntTrailZeros
 491              	.LVL41:
1807:rtos/uC-CPU/cpu_core.c **** 
1808:rtos/uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1809:rtos/uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1810:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.              
1811:rtos/uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1812:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_DATA)((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros);
1813:rtos/uC-CPU/cpu_core.c **** #endif
1814:rtos/uC-CPU/cpu_core.c **** 
1815:rtos/uC-CPU/cpu_core.c **** 
1816:rtos/uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 492              		.loc 1 1816 5 is_stmt 1 view .LVU132
1817:rtos/uC-CPU/cpu_core.c **** }
 493              		.loc 1 1817 1 is_stmt 0 view .LVU133
 494 0008 08BD     		pop	{r3, pc}
 495              	.LVL42:
 496              	.L38:
 497              	.LCFI11:
 498              		.cfi_def_cfa_offset 0
 499              		.cfi_restore 3
 500              		.cfi_restore 14
1800:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS));
 501              		.loc 1 1800 16 view .LVU134
 502 000a 2020     		movs	r0, #32
 503              	.LVL43:
 504              		.loc 1 1817 1 view .LVU135
 505 000c 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE8:
 509              		.section	.text.CPU_CntTrailZeros64,"ax",%progbits
 510              		.align	1
 511              		.global	CPU_CntTrailZeros64
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 515              		.fpu fpv4-sp-d16
 517              	CPU_CntTrailZeros64:
 518              	.LVL44:
 519              	.LFB9:
1818:rtos/uC-CPU/cpu_core.c **** #endif
1819:rtos/uC-CPU/cpu_core.c **** 
1820:rtos/uC-CPU/cpu_core.c **** 
1821:rtos/uC-CPU/cpu_core.c **** /*
1822:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1823:rtos/uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros64()
1824:rtos/uC-CPU/cpu_core.c **** *
1825:rtos/uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 64-bit d
1826:rtos/uC-CPU/cpu_core.c **** *
1827:rtos/uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1828:rtos/uC-CPU/cpu_core.c **** *
1829:rtos/uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1830:rtos/uC-CPU/cpu_core.c **** *
1831:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1832:rtos/uC-CPU/cpu_core.c **** *
ARM GAS  /tmp/cc6MS5yX.s 			page 43


1833:rtos/uC-CPU/cpu_core.c **** *                          b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1834:rtos/uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1835:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1836:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1837:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1838:rtos/uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1839:rtos/uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1840:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           59
1841:rtos/uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           60
1842:rtos/uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           61
1843:rtos/uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           62
1844:rtos/uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           63
1845:rtos/uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           64
1846:rtos/uC-CPU/cpu_core.c **** *
1847:rtos/uC-CPU/cpu_core.c **** *
1848:rtos/uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1849:rtos/uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1850:rtos/uC-CPU/cpu_core.c **** *
1851:rtos/uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1852:rtos/uC-CPU/cpu_core.c **** *
1853:rtos/uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's
1854:rtos/uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.
1855:rtos/uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros64()'s 64-bit retu
1856:rtos/uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1857:rtos/uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros64()'s return data size :
1858:rtos/uC-CPU/cpu_core.c **** *
1859:rtos/uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1860:rtos/uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_64  * DEF_OCTET_NBR_BITS)) {
1861:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCT
1862:rtos/uC-CPU/cpu_core.c **** *                           }
1863:rtos/uC-CPU/cpu_core.c **** *
1864:rtos/uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 64-
1865:rtos/uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 64 bit
1866:rtos/uC-CPU/cpu_core.c **** *
1867:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1868:rtos/uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1869:rtos/uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 64-bit data value bit
1870:rtos/uC-CPU/cpu_core.c **** *
1871:rtos/uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros64()'s C implementation, the final conditional stateme
1872:rtos/uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros64()'s
1873:rtos/uC-CPU/cpu_core.c **** *                       64-bit return data size & 'val's calculated number of lead zeros ONLY if th
1874:rtos/uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1875:rtos/uC-CPU/cpu_core.c **** *
1876:rtos/uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1877:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - 
1878:rtos/uC-CPU/cpu_core.c **** *                           } else {
1879:rtos/uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1880:rtos/uC-CPU/cpu_core.c **** *                           }
1881:rtos/uC-CPU/cpu_core.c **** *
1882:rtos/uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1883:rtos/uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1884:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1885:rtos/uC-CPU/cpu_core.c **** */
1886:rtos/uC-CPU/cpu_core.c **** 
1887:rtos/uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
1888:rtos/uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
1889:rtos/uC-CPU/cpu_core.c **** {
ARM GAS  /tmp/cc6MS5yX.s 			page 44


 520              		.loc 1 1889 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              		.loc 1 1889 1 is_stmt 0 view .LVU137
 525 0000 38B5     		push	{r3, r4, r5, lr}
 526              	.LCFI12:
 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
 532 0002 0246     		mov	r2, r0
 533 0004 0B46     		mov	r3, r1
1890:rtos/uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1891:rtos/uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
1892:rtos/uC-CPU/cpu_core.c ****     CPU_INT64U  val_bit_mask;
 534              		.loc 1 1892 5 is_stmt 1 view .LVU138
1893:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
 535              		.loc 1 1893 5 view .LVU139
1894:rtos/uC-CPU/cpu_core.c **** #endif
1895:rtos/uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
 536              		.loc 1 1895 5 view .LVU140
1896:rtos/uC-CPU/cpu_core.c **** 
1897:rtos/uC-CPU/cpu_core.c **** 
1898:rtos/uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 537              		.loc 1 1898 5 view .LVU141
 538              		.loc 1 1898 8 is_stmt 0 view .LVU142
 539 0006 52EA0301 		orrs	r1, r2, r3
 540 000a 0AD0     		beq	.L45
1899:rtos/uC-CPU/cpu_core.c ****         return ((CPU_DATA)(CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS));
1900:rtos/uC-CPU/cpu_core.c ****     }
1901:rtos/uC-CPU/cpu_core.c **** 
1902:rtos/uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1903:rtos/uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1904:rtos/uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
1905:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1906:rtos/uC-CPU/cpu_core.c **** 
1907:rtos/uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1908:rtos/uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
 541              		.loc 1 1908 5 is_stmt 1 view .LVU143
 542              		.loc 1 1908 47 is_stmt 0 view .LVU144
 543 000c 4442     		rsbs	r4, r0, #0
 544 000e 63EB4305 		sbc	r5, r3, r3, lsl #1
 545              	.LVL45:
1909:rtos/uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.              
 546              		.loc 1 1909 5 is_stmt 1 view .LVU145
 547              		.loc 1 1909 23 is_stmt 0 view .LVU146
 548 0012 2040     		ands	r0, r0, r4
 549              	.LVL46:
 550              		.loc 1 1909 23 view .LVU147
 551 0014 05EA0301 		and	r1, r5, r3
 552              	.LVL47:
 553              		.loc 1 1909 23 view .LVU148
 554 0018 FFF7FEFF 		bl	CPU_CntLeadZeros64
 555              	.LVL48:
1910:rtos/uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
ARM GAS  /tmp/cc6MS5yX.s 			page 45


1911:rtos/uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_DATA)((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros);
 556              		.loc 1 1911 5 is_stmt 1 view .LVU149
 557              		.loc 1 1911 21 is_stmt 0 view .LVU150
 558 001c C0F13F00 		rsb	r0, r0, #63
 559              	.LVL49:
1912:rtos/uC-CPU/cpu_core.c **** #endif
1913:rtos/uC-CPU/cpu_core.c **** 
1914:rtos/uC-CPU/cpu_core.c **** 
1915:rtos/uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 560              		.loc 1 1915 5 is_stmt 1 view .LVU151
 561              	.L43:
1916:rtos/uC-CPU/cpu_core.c **** }
 562              		.loc 1 1916 1 is_stmt 0 view .LVU152
 563 0020 38BD     		pop	{r3, r4, r5, pc}
 564              	.LVL50:
 565              	.L45:
1899:rtos/uC-CPU/cpu_core.c ****     }
 566              		.loc 1 1899 16 view .LVU153
 567 0022 4020     		movs	r0, #64
 568              	.LVL51:
1899:rtos/uC-CPU/cpu_core.c ****     }
 569              		.loc 1 1899 16 view .LVU154
 570 0024 FCE7     		b	.L43
 571              		.cfi_endproc
 572              	.LFE9:
 574              		.section	.text.CPU_PopCnt32,"ax",%progbits
 575              		.align	1
 576              		.global	CPU_PopCnt32
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	CPU_PopCnt32:
 583              	.LVL52:
 584              	.LFB10:
1917:rtos/uC-CPU/cpu_core.c **** #endif
1918:rtos/uC-CPU/cpu_core.c **** 
1919:rtos/uC-CPU/cpu_core.c **** 
1920:rtos/uC-CPU/cpu_core.c **** /*
1921:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1922:rtos/uC-CPU/cpu_core.c **** *                                           CRCUtil_PopCnt_32()
1923:rtos/uC-CPU/cpu_core.c **** *
1924:rtos/uC-CPU/cpu_core.c **** * Description : Compute population count (hamming weight) for value (number of bits set).
1925:rtos/uC-CPU/cpu_core.c **** *
1926:rtos/uC-CPU/cpu_core.c **** * Argument(s) : value           Value to compute population count on.
1927:rtos/uC-CPU/cpu_core.c **** *
1928:rtos/uC-CPU/cpu_core.c **** *
1929:rtos/uC-CPU/cpu_core.c **** * Return(s)   : value's population count.
1930:rtos/uC-CPU/cpu_core.c **** *
1931:rtos/uC-CPU/cpu_core.c **** * Note(s)     : (1) Algorithm taken from en.wikipedia.org/wiki/Hamming_weight
1932:rtos/uC-CPU/cpu_core.c **** ***************************************************************************************************
1933:rtos/uC-CPU/cpu_core.c **** */
1934:rtos/uC-CPU/cpu_core.c **** 
1935:rtos/uC-CPU/cpu_core.c **** CPU_INT08U  CPU_PopCnt32 (CPU_INT32U  value)
1936:rtos/uC-CPU/cpu_core.c **** {
 585              		.loc 1 1936 1 is_stmt 1 view -0
 586              		.cfi_startproc
ARM GAS  /tmp/cc6MS5yX.s 			page 46


 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
1937:rtos/uC-CPU/cpu_core.c ****     CPU_INT32U  even_cnt;
 590              		.loc 1 1937 5 view .LVU156
1938:rtos/uC-CPU/cpu_core.c ****     CPU_INT32U  odd_cnt;
 591              		.loc 1 1938 5 view .LVU157
1939:rtos/uC-CPU/cpu_core.c ****     CPU_INT32U  result;
 592              		.loc 1 1939 5 view .LVU158
1940:rtos/uC-CPU/cpu_core.c **** 
1941:rtos/uC-CPU/cpu_core.c **** 
1942:rtos/uC-CPU/cpu_core.c ****     odd_cnt  = (value >> 1u) & CRC_UTIL_POPCNT_MASK01010101_32; /* 2-bits pieces.                  
 593              		.loc 1 1942 5 view .LVU159
 594              		.loc 1 1942 23 is_stmt 0 view .LVU160
 595 0000 4308     		lsrs	r3, r0, #1
 596              		.loc 1 1942 14 view .LVU161
 597 0002 03F05533 		and	r3, r3, #1431655765
 598              	.LVL53:
1943:rtos/uC-CPU/cpu_core.c ****     result   =  value - odd_cnt;                                /* Same result as result=odd_cnt+(v
 599              		.loc 1 1943 5 is_stmt 1 view .LVU162
 600              		.loc 1 1943 14 is_stmt 0 view .LVU163
 601 0006 C01A     		subs	r0, r0, r3
 602              	.LVL54:
1944:rtos/uC-CPU/cpu_core.c **** 
1945:rtos/uC-CPU/cpu_core.c ****     even_cnt =  result & CRC_UTIL_POPCNT_MASK00110011_32;       /* 4-bits pieces.                  
 603              		.loc 1 1945 5 is_stmt 1 view .LVU164
 604              		.loc 1 1945 14 is_stmt 0 view .LVU165
 605 0008 00F03333 		and	r3, r0, #858993459
 606              	.LVL55:
1946:rtos/uC-CPU/cpu_core.c ****     odd_cnt  = (result >> 2u) & CRC_UTIL_POPCNT_MASK00110011_32;
 607              		.loc 1 1946 5 is_stmt 1 view .LVU166
 608              		.loc 1 1946 24 is_stmt 0 view .LVU167
 609 000c 8008     		lsrs	r0, r0, #2
 610              	.LVL56:
 611              		.loc 1 1946 14 view .LVU168
 612 000e 00F03330 		and	r0, r0, #858993459
 613              	.LVL57:
1947:rtos/uC-CPU/cpu_core.c ****     result   =  even_cnt + odd_cnt;
 614              		.loc 1 1947 5 is_stmt 1 view .LVU169
 615              		.loc 1 1947 14 is_stmt 0 view .LVU170
 616 0012 0344     		add	r3, r3, r0
 617              	.LVL58:
1948:rtos/uC-CPU/cpu_core.c **** 
1949:rtos/uC-CPU/cpu_core.c ****     even_cnt =  result & CRC_UTIL_POPCNT_MASK00001111_32;       /* 8-bits pieces.                  
 618              		.loc 1 1949 5 is_stmt 1 view .LVU171
 619              		.loc 1 1949 14 is_stmt 0 view .LVU172
 620 0014 03F00F30 		and	r0, r3, #252645135
 621              	.LVL59:
1950:rtos/uC-CPU/cpu_core.c ****     odd_cnt  = (result >> 4u) & CRC_UTIL_POPCNT_MASK00001111_32;
 622              		.loc 1 1950 5 is_stmt 1 view .LVU173
 623              		.loc 1 1950 24 is_stmt 0 view .LVU174
 624 0018 1B09     		lsrs	r3, r3, #4
 625              	.LVL60:
 626              		.loc 1 1950 14 view .LVU175
 627 001a 03F00F33 		and	r3, r3, #252645135
 628              	.LVL61:
1951:rtos/uC-CPU/cpu_core.c ****     result   =  even_cnt + odd_cnt;
ARM GAS  /tmp/cc6MS5yX.s 			page 47


 629              		.loc 1 1951 5 is_stmt 1 view .LVU176
 630              		.loc 1 1951 14 is_stmt 0 view .LVU177
 631 001e 1844     		add	r0, r0, r3
 632              	.LVL62:
1952:rtos/uC-CPU/cpu_core.c **** 
1953:rtos/uC-CPU/cpu_core.c ****     result = (result * CRC_UTIL_POPCNT_POWERSOF256_32) >> 24u;
 633              		.loc 1 1953 5 is_stmt 1 view .LVU178
 634              		.loc 1 1953 22 is_stmt 0 view .LVU179
 635 0020 00EB0020 		add	r0, r0, r0, lsl #8
 636              	.LVL63:
 637              		.loc 1 1953 22 view .LVU180
 638 0024 00EB0040 		add	r0, r0, r0, lsl #16
 639              	.LVL64:
1954:rtos/uC-CPU/cpu_core.c **** 
1955:rtos/uC-CPU/cpu_core.c ****     return ((CPU_INT08U)result);
 640              		.loc 1 1955 5 is_stmt 1 view .LVU181
1956:rtos/uC-CPU/cpu_core.c **** }
 641              		.loc 1 1956 1 is_stmt 0 view .LVU182
 642 0028 000E     		lsrs	r0, r0, #24
 643              	.LVL65:
 644              		.loc 1 1956 1 view .LVU183
 645 002a 7047     		bx	lr
 646              		.cfi_endproc
 647              	.LFE10:
 649              		.global	CPU_EndiannessTest
 650              		.section	.rodata.CPU_CntLeadZerosTbl,"a"
 651              		.align	2
 652              		.set	.LANCHOR0,. + 0
 655              	CPU_CntLeadZerosTbl:
 656 0000 08070606 		.ascii	"\010\007\006\006\005\005\005\005\004\004\004\004\004"
 656      05050505 
 656      04040404 
 656      04
 657 000d 04040403 		.ascii	"\004\004\004\003\003\003\003\003\003\003\003\003\003"
 657      03030303 
 657      03030303 
 657      03
 658 001a 03030303 		.ascii	"\003\003\003\003\003\003\002\002\002\002\002\002\002"
 658      03030202 
 658      02020202 
 658      02
 659 0027 02020202 		.ascii	"\002\002\002\002\002\002\002\002\002\002\002\002\002"
 659      02020202 
 659      02020202 
 659      02
 660 0034 02020202 		.ascii	"\002\002\002\002\002\002\002\002\002\002\002\002\001"
 660      02020202 
 660      02020202 
 660      01
 661 0041 01010101 		.ascii	"\001\001\001\001\001\001\001\001\001\001\001\001\001"
 661      01010101 
 661      01010101 
 661      01
 662 004e 01010101 		.ascii	"\001\001\001\001\001\001\001\001\001\001\001\001\001"
 662      01010101 
 662      01010101 
 662      01
ARM GAS  /tmp/cc6MS5yX.s 			page 48


 663 005b 01010101 		.ascii	"\001\001\001\001\001\001\001\001\001\001\001\001\001"
 663      01010101 
 663      01010101 
 663      01
 664 0068 01010101 		.ascii	"\001\001\001\001\001\001\001\001\001\001\001\001\001"
 664      01010101 
 664      01010101 
 664      01
 665 0075 01010101 		.ascii	"\001\001\001\001\001\001\001\001\001\001\001\000\000"
 665      01010101 
 665      01010100 
 665      00
 666 0082 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 666      00000000 
 666      00000000 
 666      00
 667 008f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 667      00000000 
 667      00000000 
 667      00
 668 009c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 668      00000000 
 668      00000000 
 668      00
 669 00a9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 669      00000000 
 669      00000000 
 669      00
 670 00b6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 670      00000000 
 670      00000000 
 670      00
 671 00c3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 671      00000000 
 671      00000000 
 671      00
 672 00d0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 672      00000000 
 672      00000000 
 672      00
 673 00dd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 673      00000000 
 673      00000000 
 673      00
 674 00ea 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 674      00000000 
 674      00000000 
 674      00
 675 00f7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000"
 675      00000000 
 675      00
 676              		.section	.rodata.CPU_EndiannessTest,"a"
 677              		.align	2
 680              	CPU_EndiannessTest:
 681 0000 78563412 		.word	305419896
 682              		.text
 683              	.Letext0:
ARM GAS  /tmp/cc6MS5yX.s 			page 49


 684              		.file 2 "rtos/uC-CPU/ARM-Cortex-M/ARMv7-M/GNU/cpu.h"
 685              		.file 3 "rtos/uC-CPU/cpu_core.h"
ARM GAS  /tmp/cc6MS5yX.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 cpu_core.c
     /tmp/cc6MS5yX.s:18     .text.CPU_Init:0000000000000000 $t
     /tmp/cc6MS5yX.s:26     .text.CPU_Init:0000000000000000 CPU_Init
     /tmp/cc6MS5yX.s:40     .text.CPU_SW_Exception:0000000000000000 $t
     /tmp/cc6MS5yX.s:47     .text.CPU_SW_Exception:0000000000000000 CPU_SW_Exception
     /tmp/cc6MS5yX.s:64     .text.CPU_CntLeadZeros08:0000000000000000 $t
     /tmp/cc6MS5yX.s:71     .text.CPU_CntLeadZeros08:0000000000000000 CPU_CntLeadZeros08
     /tmp/cc6MS5yX.s:100    .text.CPU_CntLeadZeros16:0000000000000000 $t
     /tmp/cc6MS5yX.s:107    .text.CPU_CntLeadZeros16:0000000000000000 CPU_CntLeadZeros16
     /tmp/cc6MS5yX.s:136    .text.CPU_CntLeadZeros32:0000000000000000 $t
     /tmp/cc6MS5yX.s:143    .text.CPU_CntLeadZeros32:0000000000000000 CPU_CntLeadZeros32
     /tmp/cc6MS5yX.s:169    .text.CPU_CntLeadZeros64:0000000000000000 $t
     /tmp/cc6MS5yX.s:176    .text.CPU_CntLeadZeros64:0000000000000000 CPU_CntLeadZeros64
     /tmp/cc6MS5yX.s:367    .text.CPU_CntLeadZeros64:00000000000000a0 $d
     /tmp/cc6MS5yX.s:372    .text.CPU_CntTrailZeros08:0000000000000000 $t
     /tmp/cc6MS5yX.s:379    .text.CPU_CntTrailZeros08:0000000000000000 CPU_CntTrailZeros08
     /tmp/cc6MS5yX.s:418    .text.CPU_CntTrailZeros16:0000000000000000 $t
     /tmp/cc6MS5yX.s:425    .text.CPU_CntTrailZeros16:0000000000000000 CPU_CntTrailZeros16
     /tmp/cc6MS5yX.s:464    .text.CPU_CntTrailZeros32:0000000000000000 $t
     /tmp/cc6MS5yX.s:471    .text.CPU_CntTrailZeros32:0000000000000000 CPU_CntTrailZeros32
     /tmp/cc6MS5yX.s:510    .text.CPU_CntTrailZeros64:0000000000000000 $t
     /tmp/cc6MS5yX.s:517    .text.CPU_CntTrailZeros64:0000000000000000 CPU_CntTrailZeros64
     /tmp/cc6MS5yX.s:575    .text.CPU_PopCnt32:0000000000000000 $t
     /tmp/cc6MS5yX.s:582    .text.CPU_PopCnt32:0000000000000000 CPU_PopCnt32
     /tmp/cc6MS5yX.s:680    .rodata.CPU_EndiannessTest:0000000000000000 CPU_EndiannessTest
     /tmp/cc6MS5yX.s:651    .rodata.CPU_CntLeadZerosTbl:0000000000000000 $d
     /tmp/cc6MS5yX.s:655    .rodata.CPU_CntLeadZerosTbl:0000000000000000 CPU_CntLeadZerosTbl
     /tmp/cc6MS5yX.s:677    .rodata.CPU_EndiannessTest:0000000000000000 $d
                           .group:0000000000000000 wm4.0.0f5aa60db9403f389c005f20ecce4286
                           .group:0000000000000000 wm4.cpu_core.h.51.8cc3bba8a54e7a7fd4dfa7837cf71f8e
                           .group:0000000000000000 wm4.cpu_def.h.46.baa122a2898bdc40bb50d1f21ead1515
                           .group:0000000000000000 wm4.cpu_cfg.h.45.38a6a562da8b04490c382a226238c57e
                           .group:0000000000000000 wm4.cpu.h.171.3cb15ee3ccb812cbfdf76d1fbfb9eda0
                           .group:0000000000000000 wm4.lib_def.h.66.6ab2a012067a8e1f4289db5765835062
                           .group:0000000000000000 wm4.cpu_core.h.143.d3b700e12b3a14ed3bee14c822b49a7d

UNDEFINED SYMBOLS
CPU_CntLeadZeros
CPU_CntTrailZeros
