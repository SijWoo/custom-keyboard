ARM GAS  /tmp/ccJaibyu.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"fs_app.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.App_FS_AddSD_SPI.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC0:
  20 0000 20202020 		.ascii	"    ==============================================="
  20      3D3D3D3D 
  20      3D3D3D3D 
  20      3D3D3D3D 
  20      3D3D3D3D 
  21 0033 3D3D3D3D 		.ascii	"============    \015\012\000"
  21      3D3D3D3D 
  21      3D3D3D3D 
  21      20202020 
  21      0D0A00
  22 0046 0000     		.align	2
  23              	.LC1:
  24 0048 20202020 		.ascii	"    Adding/opening SD/MMC (SPI) volume \"sd:0:\"..."
  24      41646469 
  24      6E672F6F 
  24      70656E69 
  24      6E672053 
  25 0079 0D0A00   		.ascii	"\015\012\000"
  26              		.align	2
  27              	.LC2:
  28 007c 73643A30 		.ascii	"sd:0:\000"
  28      3A00
  29 0082 0000     		.align	2
  30              	.LC3:
  31 0084 20202020 		.ascii	"    ...opened device.\015\012\000"
  31      2E2E2E6F 
  31      70656E65 
  31      64206465 
  31      76696365 
  32              		.align	2
  33              	.LC4:
  34 009c 20202020 		.ascii	"    ...opened device (not present).\015\012\000"
  34      2E2E2E6F 
  34      70656E65 
  34      64206465 
  34      76696365 
  35 00c2 0000     		.align	2
  36              	.LC5:
ARM GAS  /tmp/ccJaibyu.s 			page 2


  37 00c4 20202020 		.ascii	"    ...opened volume (mounted).\015\012\000"
  37      2E2E2E6F 
  37      70656E65 
  37      6420766F 
  37      6C756D65 
  38 00e6 0000     		.align	2
  39              	.LC6:
  40 00e8 20202020 		.ascii	"    ...opened volume (unmounted).\015\012\000"
  40      2E2E2E6F 
  40      70656E65 
  40      6420766F 
  40      6C756D65 
  41              		.section	.text.App_FS_AddSD_SPI,"ax",%progbits
  42              		.align	1
  43              		.arch armv7e-m
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu fpv4-sp-d16
  49              	App_FS_AddSD_SPI:
  50              	.LFB1:
  51              		.file 1 "apps/fs/src/fs_app.c"
   1:apps/fs/src/fs_app.c **** /*
   2:apps/fs/src/fs_app.c **** ***************************************************************************************************
   3:apps/fs/src/fs_app.c **** *                                            EXAMPLE CODE
   4:apps/fs/src/fs_app.c **** *
   5:apps/fs/src/fs_app.c **** *               This file is provided as an example on how to use Micrium products.
   6:apps/fs/src/fs_app.c **** *
   7:apps/fs/src/fs_app.c **** *               Please feel free to use any application code labeled as 'EXAMPLE CODE' in
   8:apps/fs/src/fs_app.c **** *               your application products.  Example code may be used as is, in whole or in
   9:apps/fs/src/fs_app.c **** *               part, or may be used as a reference only. This file can be modified as
  10:apps/fs/src/fs_app.c **** *               required to meet the end-product requirements.
  11:apps/fs/src/fs_app.c **** *
  12:apps/fs/src/fs_app.c **** *               Please help us continue to provide the Embedded community with the finest
  13:apps/fs/src/fs_app.c **** *               software available.  Your honesty is greatly appreciated.
  14:apps/fs/src/fs_app.c **** *
  15:apps/fs/src/fs_app.c **** *                    You can find our product's documentation at: doc.micrium.com
  16:apps/fs/src/fs_app.c **** *
  17:apps/fs/src/fs_app.c **** *                          For more information visit us at: www.micrium.com
  18:apps/fs/src/fs_app.c **** ***************************************************************************************************
  19:apps/fs/src/fs_app.c **** */
  20:apps/fs/src/fs_app.c **** 
  21:apps/fs/src/fs_app.c **** /*
  22:apps/fs/src/fs_app.c **** ***************************************************************************************************
  23:apps/fs/src/fs_app.c **** *
  24:apps/fs/src/fs_app.c **** *                               FILE SYSTEM APPLICATION INITIALIZATION
  25:apps/fs/src/fs_app.c **** *
  26:apps/fs/src/fs_app.c **** *                                              TEMPLATE
  27:apps/fs/src/fs_app.c **** *
  28:apps/fs/src/fs_app.c **** * Filename : fs_app.c
  29:apps/fs/src/fs_app.c **** * Version  : v4.07.06
  30:apps/fs/src/fs_app.c **** ***************************************************************************************************
  31:apps/fs/src/fs_app.c **** */
  32:apps/fs/src/fs_app.c **** 
  33:apps/fs/src/fs_app.c **** /*
  34:apps/fs/src/fs_app.c **** ***************************************************************************************************
  35:apps/fs/src/fs_app.c **** *                                            INCLUDE FILES
ARM GAS  /tmp/ccJaibyu.s 			page 3


  36:apps/fs/src/fs_app.c **** ***************************************************************************************************
  37:apps/fs/src/fs_app.c **** */
  38:apps/fs/src/fs_app.c **** 
  39:apps/fs/src/fs_app.c **** #include  "fs_app.h"
  40:apps/fs/src/fs_app.c **** #include  <fs.h>
  41:apps/fs/src/fs_app.c **** #include  <fs_dev.h>
  42:apps/fs/src/fs_app.c **** #include  <fs_vol.h>
  43:apps/fs/src/fs_app.c **** 
  44:apps/fs/src/fs_app.c **** 
  45:apps/fs/src/fs_app.c **** /*
  46:apps/fs/src/fs_app.c **** ***************************************************************************************************
  47:apps/fs/src/fs_app.c **** *                                               ENABLE
  48:apps/fs/src/fs_app.c **** ***************************************************************************************************
  49:apps/fs/src/fs_app.c **** */
  50:apps/fs/src/fs_app.c **** 
  51:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_EN == DEF_ENABLED)
  52:apps/fs/src/fs_app.c **** 
  53:apps/fs/src/fs_app.c **** 
  54:apps/fs/src/fs_app.c **** /*
  55:apps/fs/src/fs_app.c **** ***************************************************************************************************
  56:apps/fs/src/fs_app.c **** *                                            LOCAL DEFINES
  57:apps/fs/src/fs_app.c **** ***************************************************************************************************
  58:apps/fs/src/fs_app.c **** */
  59:apps/fs/src/fs_app.c **** 
  60:apps/fs/src/fs_app.c **** 
  61:apps/fs/src/fs_app.c **** /*
  62:apps/fs/src/fs_app.c **** ***************************************************************************************************
  63:apps/fs/src/fs_app.c **** *                                          LOCAL DATA TYPES
  64:apps/fs/src/fs_app.c **** ***************************************************************************************************
  65:apps/fs/src/fs_app.c **** */
  66:apps/fs/src/fs_app.c **** 
  67:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NAND_EN == DEF_ENABLED)
  68:apps/fs/src/fs_app.c **** 
  69:apps/fs/src/fs_app.c **** #ifdef APP_CFG_FS_NAND_CTRLR_GEN_EXT
  70:apps/fs/src/fs_app.c **** extern  FS_NAND_CTRLR_GEN_EXT  APP_CFG_FS_NAND_CTRLR_GEN_EXT;
  71:apps/fs/src/fs_app.c **** 
  72:apps/fs/src/fs_app.c **** #ifdef APP_CFG_FS_NAND_CTRLR_GEN_EXT_CFG_PTR
  73:apps/fs/src/fs_app.c **** extern  void  *APP_CFG_FS_NAND_CTRLR_GEN_EXT_CFG_PTR
  74:apps/fs/src/fs_app.c **** #endif  /* APP_CFG_FS_NAND_CTRLR_GEN_EXT_CFG_PTR */
  75:apps/fs/src/fs_app.c **** 
  76:apps/fs/src/fs_app.c **** #endif  /* APP_CFG_FS_NAND_CTRLR_GEN_EXT */
  77:apps/fs/src/fs_app.c **** 
  78:apps/fs/src/fs_app.c **** #endif
  79:apps/fs/src/fs_app.c **** 
  80:apps/fs/src/fs_app.c **** /*
  81:apps/fs/src/fs_app.c **** ***************************************************************************************************
  82:apps/fs/src/fs_app.c **** *                                       LOCAL GLOBAL VARIABLES
  83:apps/fs/src/fs_app.c **** ***************************************************************************************************
  84:apps/fs/src/fs_app.c **** */
  85:apps/fs/src/fs_app.c **** 
  86:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_RAM_EN == DEF_ENABLED)
  87:apps/fs/src/fs_app.c **** static  CPU_INT32U  App_FS_RAM_Disk[APP_CFG_FS_RAM_SEC_SIZE * APP_CFG_FS_RAM_NBR_SECS / 4];
  88:apps/fs/src/fs_app.c **** #endif
  89:apps/fs/src/fs_app.c **** 
  90:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NAND_EN == DEF_ENABLED)
  91:apps/fs/src/fs_app.c **** 
  92:apps/fs/src/fs_app.c **** #ifdef APP_CFG_FS_NAND_FREE_SPARE_MAP
ARM GAS  /tmp/ccJaibyu.s 			page 4


  93:apps/fs/src/fs_app.c **** 
  94:apps/fs/src/fs_app.c **** #if (defined (APP_CFG_FS_NAND_FREE_SPARE_START) || defined (APP_CFG_FS_NAND_FREE_SPARE_END))
  95:apps/fs/src/fs_app.c **** #error  "APP_CFG_FS_NAND_FREE_SPARE_MAP          conflicting #define in 'app_cfg.h'             "
  96:apps/fs/src/fs_app.c **** #error  "                                       [conflicts w/APP_CFG_FS_NAND_FREE_SPARE_START]  "
  97:apps/fs/src/fs_app.c **** #error  "                                       [       && w/APP_CFG_FS_NAND_FREE_SPARE_END  ]  "
  98:apps/fs/src/fs_app.c **** #endif /* (defined APP_CFG_FS_NAND_FREE_SPARE_START) || (defined APP_CFG_FS_NAND_FREE_SPARE_END) */
  99:apps/fs/src/fs_app.c **** 
 100:apps/fs/src/fs_app.c **** static  const  FS_NAND_FREE_SPARE_DATA  App_FS_NAND_FreeSpareMap[] = APP_CFG_FS_NAND_FREE_SPARE_MAP
 101:apps/fs/src/fs_app.c **** 
 102:apps/fs/src/fs_app.c **** #else /* !defined APP_CFG_FS_NAND_FREE_SPARE_MAP */
 103:apps/fs/src/fs_app.c **** static  const  FS_NAND_FREE_SPARE_DATA  App_FS_NAND_FreeSpareMap[] = {{ APP_CFG_FS_NAND_FREE_SPARE_
 104:apps/fs/src/fs_app.c ****                                                                       {              (FS_NAND_PG_SI
 105:apps/fs/src/fs_app.c **** #endif /* APP_CFG_FS_NAND_FREE_SPARE_MAP */
 106:apps/fs/src/fs_app.c **** 
 107:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NAND_CTRLR_IMPL == CTRLR_GEN)
 108:apps/fs/src/fs_app.c **** extern  const  FS_NAND_CTRLR_GEN_BSP_API  APP_CFG_FS_NAND_BSP;
 109:apps/fs/src/fs_app.c **** #endif
 110:apps/fs/src/fs_app.c **** 
 111:apps/fs/src/fs_app.c **** #endif /* APP_CFG_FS_NAND_EN == DEF_ENABLED */
 112:apps/fs/src/fs_app.c **** 
 113:apps/fs/src/fs_app.c **** static  const  FS_CFG  App_FS_Cfg = {
 114:apps/fs/src/fs_app.c ****     APP_CFG_FS_DEV_CNT,             /* DevCnt           */
 115:apps/fs/src/fs_app.c ****     APP_CFG_FS_VOL_CNT,             /* VolCnt           */
 116:apps/fs/src/fs_app.c ****     APP_CFG_FS_FILE_CNT,            /* FileCnt          */
 117:apps/fs/src/fs_app.c ****     APP_CFG_FS_DIR_CNT,             /* DirCnt           */
 118:apps/fs/src/fs_app.c ****     APP_CFG_FS_BUF_CNT,             /* BufCnt           */
 119:apps/fs/src/fs_app.c ****     APP_CFG_FS_DEV_DRV_CNT,         /* DevDrvCnt        */
 120:apps/fs/src/fs_app.c ****     APP_CFG_FS_MAX_SEC_SIZE         /* MaxSecSize       */
 121:apps/fs/src/fs_app.c **** };
 122:apps/fs/src/fs_app.c **** 
 123:apps/fs/src/fs_app.c **** 
 124:apps/fs/src/fs_app.c **** /*
 125:apps/fs/src/fs_app.c **** ***************************************************************************************************
 126:apps/fs/src/fs_app.c **** *                                      LOCAL FUNCTION PROTOTYPES
 127:apps/fs/src/fs_app.c **** ***************************************************************************************************
 128:apps/fs/src/fs_app.c **** */
 129:apps/fs/src/fs_app.c **** 
 130:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_MSC_EN == DEF_ENABLED)
 131:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddMSC    (void);
 132:apps/fs/src/fs_app.c **** #endif
 133:apps/fs/src/fs_app.c **** 
 134:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_IDE_EN == DEF_ENABLED)
 135:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddIDE    (void);
 136:apps/fs/src/fs_app.c **** #endif
 137:apps/fs/src/fs_app.c **** 
 138:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NAND_EN == DEF_ENABLED)
 139:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddNAND   (void);
 140:apps/fs/src/fs_app.c **** #endif
 141:apps/fs/src/fs_app.c **** 
 142:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NOR_EN == DEF_ENABLED)
 143:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddNOR    (void);
 144:apps/fs/src/fs_app.c **** #endif
 145:apps/fs/src/fs_app.c **** 
 146:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_RAM_EN == DEF_ENABLED)
 147:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddRAM    (void);
 148:apps/fs/src/fs_app.c **** #endif
 149:apps/fs/src/fs_app.c **** 
ARM GAS  /tmp/ccJaibyu.s 			page 5


 150:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_SD_CARD_EN == DEF_ENABLED)
 151:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddSD_Card(void);
 152:apps/fs/src/fs_app.c **** #endif
 153:apps/fs/src/fs_app.c **** 
 154:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_SD_EN == DEF_ENABLED)
 155:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddSD_SPI (void);
 156:apps/fs/src/fs_app.c **** #endif
 157:apps/fs/src/fs_app.c **** 
 158:apps/fs/src/fs_app.c **** 
 159:apps/fs/src/fs_app.c **** /*
 160:apps/fs/src/fs_app.c **** ***************************************************************************************************
 161:apps/fs/src/fs_app.c **** *                                      LOCAL CONFIGURATION ERRORS
 162:apps/fs/src/fs_app.c **** ***************************************************************************************************
 163:apps/fs/src/fs_app.c **** */
 164:apps/fs/src/fs_app.c **** 
 165:apps/fs/src/fs_app.c **** 
 166:apps/fs/src/fs_app.c **** /*
 167:apps/fs/src/fs_app.c **** ***************************************************************************************************
 168:apps/fs/src/fs_app.c **** *                                            App_FS_Init()
 169:apps/fs/src/fs_app.c **** *
 170:apps/fs/src/fs_app.c **** * Description : Initialize uC/FS.
 171:apps/fs/src/fs_app.c **** *
 172:apps/fs/src/fs_app.c **** * Argument(s) : none.
 173:apps/fs/src/fs_app.c **** *
 174:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if file system suite was initialized.
 175:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 176:apps/fs/src/fs_app.c **** *
 177:apps/fs/src/fs_app.c **** * Note(s)     : (1) MSC device/volumes will be opened/closed dynamically by the USB Host MSC notifi
 178:apps/fs/src/fs_app.c **** *                   callback.
 179:apps/fs/src/fs_app.c **** ***************************************************************************************************
 180:apps/fs/src/fs_app.c **** */
 181:apps/fs/src/fs_app.c **** 
 182:apps/fs/src/fs_app.c **** CPU_BOOLEAN  App_FS_Init (void)
 183:apps/fs/src/fs_app.c **** {
 184:apps/fs/src/fs_app.c ****     FS_ERR       err;
 185:apps/fs/src/fs_app.c ****     CPU_BOOLEAN  ok;
 186:apps/fs/src/fs_app.c **** 
 187:apps/fs/src/fs_app.c **** 
 188:apps/fs/src/fs_app.c ****                                                                 /* ---------------------- INIT FS -
 189:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("\r\n"));
 190:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 191:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("=                        FS INITIALIZATION                        =\r\n"));
 192:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 193:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("Initializing FS...\r\n"));
 194:apps/fs/src/fs_app.c ****     err = FS_Init((FS_CFG *)&App_FS_Cfg);
 195:apps/fs/src/fs_app.c ****     if (err != FS_ERR_NONE) {
 196:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("...init failed w/err = %d\r\n\r\n", err));
 197:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 198:apps/fs/src/fs_app.c ****     }
 199:apps/fs/src/fs_app.c **** 
 200:apps/fs/src/fs_app.c **** 
 201:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_MSC_EN == DEF_ENABLED)                          /* ------------------ ADD MSC DRIVE
 202:apps/fs/src/fs_app.c ****     ok = App_FS_AddMSC();
 203:apps/fs/src/fs_app.c **** 
 204:apps/fs/src/fs_app.c ****     if (ok != DEF_OK) {
 205:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 206:apps/fs/src/fs_app.c ****     }
ARM GAS  /tmp/ccJaibyu.s 			page 6


 207:apps/fs/src/fs_app.c **** #endif
 208:apps/fs/src/fs_app.c **** 
 209:apps/fs/src/fs_app.c **** 
 210:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_IDE_EN == DEF_ENABLED)                          /* ---------------- ADD/OPEN IDE VO
 211:apps/fs/src/fs_app.c ****     ok = App_FS_AddIDE();
 212:apps/fs/src/fs_app.c **** 
 213:apps/fs/src/fs_app.c ****     if (ok != DEF_OK) {
 214:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 215:apps/fs/src/fs_app.c ****     }
 216:apps/fs/src/fs_app.c **** #endif
 217:apps/fs/src/fs_app.c **** 
 218:apps/fs/src/fs_app.c **** 
 219:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NAND_EN == DEF_ENABLED)                         /* ---------------- ADD/OPEN NAND V
 220:apps/fs/src/fs_app.c ****     ok = App_FS_AddNAND();
 221:apps/fs/src/fs_app.c **** 
 222:apps/fs/src/fs_app.c ****     if (ok != DEF_OK) {
 223:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 224:apps/fs/src/fs_app.c ****     }
 225:apps/fs/src/fs_app.c **** #endif
 226:apps/fs/src/fs_app.c **** 
 227:apps/fs/src/fs_app.c **** 
 228:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NOR_EN == DEF_ENABLED)                          /* ---------------- ADD/OPEN NOR VO
 229:apps/fs/src/fs_app.c ****     ok = App_FS_AddNOR();
 230:apps/fs/src/fs_app.c **** 
 231:apps/fs/src/fs_app.c ****     if (ok != DEF_OK) {
 232:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 233:apps/fs/src/fs_app.c ****     }
 234:apps/fs/src/fs_app.c **** #endif
 235:apps/fs/src/fs_app.c **** 
 236:apps/fs/src/fs_app.c **** 
 237:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_RAM_EN == DEF_ENABLED)                          /* ------------- ADD/OPEN RAM DISK 
 238:apps/fs/src/fs_app.c ****     ok = App_FS_AddRAM();
 239:apps/fs/src/fs_app.c **** 
 240:apps/fs/src/fs_app.c ****     if (ok != DEF_OK) {
 241:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 242:apps/fs/src/fs_app.c ****     }
 243:apps/fs/src/fs_app.c **** #endif
 244:apps/fs/src/fs_app.c **** 
 245:apps/fs/src/fs_app.c **** 
 246:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_SD_CARD_EN == DEF_ENABLED)                      /* --------- ADD/OPEN SD/MMC (CARDM
 247:apps/fs/src/fs_app.c ****     ok = App_FS_AddSD_Card();
 248:apps/fs/src/fs_app.c **** 
 249:apps/fs/src/fs_app.c ****     if (ok != DEF_OK) {
 250:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 251:apps/fs/src/fs_app.c ****     }
 252:apps/fs/src/fs_app.c **** #endif
 253:apps/fs/src/fs_app.c **** 
 254:apps/fs/src/fs_app.c **** 
 255:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_SD_EN == DEF_ENABLED)                           /* ----------- ADD/OPEN SD/MMC (SPI
 256:apps/fs/src/fs_app.c ****     ok = App_FS_AddSD_SPI();
 257:apps/fs/src/fs_app.c **** 
 258:apps/fs/src/fs_app.c ****     if (ok != DEF_OK) {
 259:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 260:apps/fs/src/fs_app.c ****     }
 261:apps/fs/src/fs_app.c **** #endif
 262:apps/fs/src/fs_app.c **** 
 263:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("...init succeeded.\r\n"));
ARM GAS  /tmp/ccJaibyu.s 			page 7


 264:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 265:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 266:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("\r\n"));
 267:apps/fs/src/fs_app.c **** 
 268:apps/fs/src/fs_app.c ****     return (DEF_OK);
 269:apps/fs/src/fs_app.c **** }
 270:apps/fs/src/fs_app.c **** 
 271:apps/fs/src/fs_app.c **** /*
 272:apps/fs/src/fs_app.c **** ***************************************************************************************************
 273:apps/fs/src/fs_app.c **** *                                           App_FS_AddMSC()
 274:apps/fs/src/fs_app.c **** *
 275:apps/fs/src/fs_app.c **** * Description : Add MSC driver.
 276:apps/fs/src/fs_app.c **** *
 277:apps/fs/src/fs_app.c **** * Argument(s) : none.
 278:apps/fs/src/fs_app.c **** *
 279:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if volume opened.
 280:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 281:apps/fs/src/fs_app.c **** *
 282:apps/fs/src/fs_app.c **** * Note(s)     : none.
 283:apps/fs/src/fs_app.c **** ***************************************************************************************************
 284:apps/fs/src/fs_app.c **** */
 285:apps/fs/src/fs_app.c **** 
 286:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_MSC_EN == DEF_ENABLED)
 287:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddMSC (void)
 288:apps/fs/src/fs_app.c **** {
 289:apps/fs/src/fs_app.c ****     FS_ERR  err;
 290:apps/fs/src/fs_app.c **** 
 291:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ===========================================================    \r\n"));
 292:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    Adding MSC device driver ...\r\n"));
 293:apps/fs/src/fs_app.c ****     FS_DevDrvAdd((FS_DEV_API *)&FSDev_MSC,                      /* Add MSC device driver (see Note 
 294:apps/fs/src/fs_app.c ****                  (FS_ERR     *)&err);
 295:apps/fs/src/fs_app.c ****     if (err != FS_ERR_NONE) {
 296:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ... could not add MSC driver w/err = %d\r\n\r\n", err));
 297:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 298:apps/fs/src/fs_app.c ****     }
 299:apps/fs/src/fs_app.c ****     return (DEF_OK);
 300:apps/fs/src/fs_app.c **** }
 301:apps/fs/src/fs_app.c **** #endif
 302:apps/fs/src/fs_app.c **** 
 303:apps/fs/src/fs_app.c **** 
 304:apps/fs/src/fs_app.c **** /*
 305:apps/fs/src/fs_app.c **** ***************************************************************************************************
 306:apps/fs/src/fs_app.c **** *                                           App_FS_AddIDE()
 307:apps/fs/src/fs_app.c **** *
 308:apps/fs/src/fs_app.c **** * Description : Add IDE/CF volume.
 309:apps/fs/src/fs_app.c **** *
 310:apps/fs/src/fs_app.c **** * Argument(s) : none.
 311:apps/fs/src/fs_app.c **** *
 312:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if volume opened.
 313:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 314:apps/fs/src/fs_app.c **** *
 315:apps/fs/src/fs_app.c **** * Note(s)     : (1) A device error will be returned from FSDev_Open() & FSVol_Open() if the card is
 316:apps/fs/src/fs_app.c **** *                   present or malfunctions.  The device or volume, respectively, is still open, th
 317:apps/fs/src/fs_app.c **** *                   the device & volume information will need to be refreshed before the medium is
 318:apps/fs/src/fs_app.c **** *                   accessible.
 319:apps/fs/src/fs_app.c **** *
 320:apps/fs/src/fs_app.c **** *               (2) A volume error will be returned from FSVol_Open() if no valid file system is fo
ARM GAS  /tmp/ccJaibyu.s 			page 8


 321:apps/fs/src/fs_app.c **** *                   on the card.  It may need to be formatted.
 322:apps/fs/src/fs_app.c **** ***************************************************************************************************
 323:apps/fs/src/fs_app.c **** */
 324:apps/fs/src/fs_app.c **** 
 325:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_IDE_EN == DEF_ENABLED)
 326:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddIDE (void)
 327:apps/fs/src/fs_app.c **** {
 328:apps/fs/src/fs_app.c ****     FS_ERR  err;
 329:apps/fs/src/fs_app.c **** 
 330:apps/fs/src/fs_app.c **** 
 331:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ===========================================================    \r\n"));
 332:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    Adding/opening IDE volume \"ide:0:\"...\r\n"));
 333:apps/fs/src/fs_app.c **** 
 334:apps/fs/src/fs_app.c ****     FS_DevDrvAdd((FS_DEV_API *)&FSDev_IDE,                      /* Add IDE/CF device driver.       
 335:apps/fs/src/fs_app.c ****                  (FS_ERR     *)&err);
 336:apps/fs/src/fs_app.c ****     if ((err != FS_ERR_NONE) &&
 337:apps/fs/src/fs_app.c ****         (err != FS_ERR_DEV_DRV_ALREADY_ADDED)) {
 338:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ...could not add driver w/err = %d\r\n\r\n", err));
 339:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 340:apps/fs/src/fs_app.c ****     }
 341:apps/fs/src/fs_app.c **** 
 342:apps/fs/src/fs_app.c **** 
 343:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN DEV -
 344:apps/fs/src/fs_app.c ****     FSDev_Open("ide:0:", (void *)0, &err);                      /* Open device "ide:0:".           
 345:apps/fs/src/fs_app.c ****     switch (err) {
 346:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 347:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device.\r\n"));
 348:apps/fs/src/fs_app.c ****              break;
 349:apps/fs/src/fs_app.c **** 
 350:apps/fs/src/fs_app.c **** 
 351:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1).     
 352:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 353:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 354:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 355:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not present).\r\n"));
 356:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 357:apps/fs/src/fs_app.c **** 
 358:apps/fs/src/fs_app.c **** 
 359:apps/fs/src/fs_app.c ****         default:
 360:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening device failed w/err = %d.\r\n\r\n", err));
 361:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 362:apps/fs/src/fs_app.c ****     }
 363:apps/fs/src/fs_app.c **** 
 364:apps/fs/src/fs_app.c **** 
 365:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN VOL -
 366:apps/fs/src/fs_app.c ****     FSVol_Open("ide:0:", "ide:0:", 0, &err);                    /* Open volume "ide:0:".           
 367:apps/fs/src/fs_app.c ****     switch (err) {
 368:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 369:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (mounted).\r\n"));
 370:apps/fs/src/fs_app.c ****              break;
 371:apps/fs/src/fs_app.c **** 
 372:apps/fs/src/fs_app.c **** 
 373:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1).     
 374:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 375:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 376:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 377:apps/fs/src/fs_app.c ****         case FS_ERR_PARTITION_NOT_FOUND:                        /* Volume error (see Note #2).     
ARM GAS  /tmp/ccJaibyu.s 			page 9


 378:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (unmounted).\r\n"));
 379:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 380:apps/fs/src/fs_app.c **** 
 381:apps/fs/src/fs_app.c **** 
 382:apps/fs/src/fs_app.c ****         default:
 383:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening volume failed w/err = %d.\r\n\r\n", err));
 384:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 385:apps/fs/src/fs_app.c ****     }
 386:apps/fs/src/fs_app.c **** 
 387:apps/fs/src/fs_app.c ****     return (DEF_OK);
 388:apps/fs/src/fs_app.c **** }
 389:apps/fs/src/fs_app.c **** #endif
 390:apps/fs/src/fs_app.c **** 
 391:apps/fs/src/fs_app.c **** 
 392:apps/fs/src/fs_app.c **** /*
 393:apps/fs/src/fs_app.c **** ***************************************************************************************************
 394:apps/fs/src/fs_app.c **** *                                           App_FS_AddNAND()
 395:apps/fs/src/fs_app.c **** *
 396:apps/fs/src/fs_app.c **** * Description : Add NAND volume.
 397:apps/fs/src/fs_app.c **** *
 398:apps/fs/src/fs_app.c **** * Argument(s) : none.
 399:apps/fs/src/fs_app.c **** *
 400:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if volume opened.
 401:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 402:apps/fs/src/fs_app.c **** *
 403:apps/fs/src/fs_app.c **** * Note(s)     : (1) (a) A device error will be returned from FSDev_Open(), FSVol_Open(), FSDev_NOR_
 404:apps/fs/src/fs_app.c **** *                       or FSVol_Fmt() if the device malfunctions.  The device may still be open;
 405:apps/fs/src/fs_app.c **** *                       however, since NOR flash are fixed devices assumed to be always-functioning
 406:apps/fs/src/fs_app.c **** *                       application change will be necessary to fully address the problem.
 407:apps/fs/src/fs_app.c **** *
 408:apps/fs/src/fs_app.c **** *                   (b) A low-level format invalid error will be returned from FSDev_Open() if the 
 409:apps/fs/src/fs_app.c **** *                        is not low-level formatted.
 410:apps/fs/src/fs_app.c **** *
 411:apps/fs/src/fs_app.c **** *               (2) A partition-not-found error will be returned from FSVol_Open() if the device is
 412:apps/fs/src/fs_app.c **** *                   formatted (this will always be the situation immediately after FSDev_NAND_LowFm
 413:apps/fs/src/fs_app.c **** ***************************************************************************************************
 414:apps/fs/src/fs_app.c **** */
 415:apps/fs/src/fs_app.c **** 
 416:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NAND_EN == DEF_ENABLED)
 417:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddNAND (void)
 418:apps/fs/src/fs_app.c **** {
 419:apps/fs/src/fs_app.c ****     FS_NAND_CFG                     nand_cfg     = FS_NAND_DfltCfg;
 420:apps/fs/src/fs_app.c ****     FS_NAND_CTRLR_GEN_CFG           ctrlr_cfg    = FS_NAND_CtrlrGen_DfltCfg;
 421:apps/fs/src/fs_app.c ****     FS_NAND_CTRLR_GEN_SOFT_ECC_CFG  soft_ecc_cfg = FS_NAND_CtrlrGen_SoftECC_DfltCfg;
 422:apps/fs/src/fs_app.c **** #if   (APP_CFG_FS_NAND_PART_TYPE == ONFI)
 423:apps/fs/src/fs_app.c ****     FS_NAND_PART_ONFI_CFG           part_cfg     = FS_NAND_PartONFI_DfltCfg;
 424:apps/fs/src/fs_app.c **** #elif (APP_CFG_FS_NAND_PART_TYPE == STATIC)
 425:apps/fs/src/fs_app.c ****     FS_NAND_PART_STATIC_CFG         part_cfg     = FS_NAND_PartStatic_DfltCfg;
 426:apps/fs/src/fs_app.c **** #endif
 427:apps/fs/src/fs_app.c ****     FS_ERR                          err;
 428:apps/fs/src/fs_app.c **** 
 429:apps/fs/src/fs_app.c **** 
 430:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ===========================================================    \r\n"));
 431:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    Adding/opening NAND volume \"nand:0:\"...\r\n"));
 432:apps/fs/src/fs_app.c **** 
 433:apps/fs/src/fs_app.c ****     FS_DevDrvAdd((FS_DEV_API *)&FS_NAND,                        /* Add NAND device driver.         
 434:apps/fs/src/fs_app.c ****                  (FS_ERR     *)&err);
ARM GAS  /tmp/ccJaibyu.s 			page 10


 435:apps/fs/src/fs_app.c ****     if ((err != FS_ERR_NONE) &&
 436:apps/fs/src/fs_app.c ****         (err != FS_ERR_DEV_DRV_ALREADY_ADDED)) {
 437:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ...could not add driver w/err = %d\r\n\r\n", err));
 438:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 439:apps/fs/src/fs_app.c ****     }
 440:apps/fs/src/fs_app.c **** 
 441:apps/fs/src/fs_app.c ****                                                                 /* ------------------- CFG NAND FTL
 442:apps/fs/src/fs_app.c ****     nand_cfg.CtrlrPtr          = (FS_NAND_CTRLR_API *)&FS_NAND_CtrlrGen;
 443:apps/fs/src/fs_app.c ****     nand_cfg.CtrlrCfgPtr       = &ctrlr_cfg;
 444:apps/fs/src/fs_app.c **** 
 445:apps/fs/src/fs_app.c **** #if   (APP_CFG_FS_NAND_PART_TYPE == ONFI)
 446:apps/fs/src/fs_app.c ****     nand_cfg.PartPtr           = (FS_NAND_PART_API *)&FS_NAND_PartONFI;
 447:apps/fs/src/fs_app.c **** #elif (APP_CFG_FS_NAND_PART_TYPE == STATIC)
 448:apps/fs/src/fs_app.c ****     nand_cfg.PartPtr           = (FS_NAND_PART_API *)&FS_NAND_PartStatic;
 449:apps/fs/src/fs_app.c **** #endif /* APP_CFG_FS_NAND_PART_TYPE */
 450:apps/fs/src/fs_app.c ****     nand_cfg.PartCfgPtr        = &part_cfg;
 451:apps/fs/src/fs_app.c **** 
 452:apps/fs/src/fs_app.c ****     nand_cfg.BSPPtr            = (FS_NAND_CTRLR_GEN_BSP_API *)&APP_CFG_FS_NAND_BSP;
 453:apps/fs/src/fs_app.c **** 
 454:apps/fs/src/fs_app.c **** #ifdef APP_CFG_FS_NAND_UB_CNT_MAX
 455:apps/fs/src/fs_app.c ****     nand_cfg.UB_CntMax         = APP_CFG_FS_NAND_UB_CNT_MAX;
 456:apps/fs/src/fs_app.c **** #endif /* APP_CFG_FS_NAND_UB_CNT_MAX */
 457:apps/fs/src/fs_app.c **** 
 458:apps/fs/src/fs_app.c ****                                                                 /* ---------------- CFG NAND GEN CT
 459:apps/fs/src/fs_app.c **** #ifdef APP_CFG_FS_NAND_CTRLR_GEN_EXT
 460:apps/fs/src/fs_app.c ****     ctrlr_cfg.CtrlrExt         = &APP_CFG_FS_NAND_CTRLR_GEN_EXT;
 461:apps/fs/src/fs_app.c **** #ifdef APP_CFG_FS_NAND_CTRLR_GEN_EXT_CFG_PTR
 462:apps/fs/src/fs_app.c ****     ctrlr_cfg.CtrlrExtCfg      = APP_CFG_FS_NAND_CTRLR_GEN_EXT_CFG_PTR;
 463:apps/fs/src/fs_app.c **** #else
 464:apps/fs/src/fs_app.c ****     ctrlr_cfg.CtrlrExtCfg      = DEF_NULL;
 465:apps/fs/src/fs_app.c **** #endif /* APP_CFG_FS_NAND_CTRLR_GEN_EXT_CFG_PTR */
 466:apps/fs/src/fs_app.c **** #else
 467:apps/fs/src/fs_app.c ****     ctrlr_cfg.CtrlrExt         = &FS_NAND_CtrlrGen_SoftECC;
 468:apps/fs/src/fs_app.c ****     ctrlr_cfg.CtrlrExtCfg      = &soft_ecc_cfg;
 469:apps/fs/src/fs_app.c **** 
 470:apps/fs/src/fs_app.c ****                                                                 /* --------- CFG NAND GEN CTRLR SOF
 471:apps/fs/src/fs_app.c ****     soft_ecc_cfg.ECC_ModulePtr = &Hamming_ECC;
 472:apps/fs/src/fs_app.c **** #endif /* APP_CFG_FS_NAND_CTRLR_GEN_EXT */
 473:apps/fs/src/fs_app.c **** 
 474:apps/fs/src/fs_app.c ****                                                                 /* ------------------ CFG NAND PART
 475:apps/fs/src/fs_app.c ****     part_cfg.FreeSpareMap      = (FS_NAND_FREE_SPARE_DATA *)App_FS_NAND_FreeSpareMap;
 476:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NAND_PART_TYPE == STATIC)
 477:apps/fs/src/fs_app.c ****     part_cfg.BlkCnt            = APP_CFG_FS_NAND_BLK_CNT;
 478:apps/fs/src/fs_app.c ****     part_cfg.PgPerBlk          = APP_CFG_FS_NAND_PG_PER_BLK;
 479:apps/fs/src/fs_app.c ****     part_cfg.PgSize            = APP_CFG_FS_NAND_PG_SIZE;
 480:apps/fs/src/fs_app.c ****     part_cfg.SpareSize         = APP_CFG_FS_NAND_SPARE_SIZE;
 481:apps/fs/src/fs_app.c **** #ifdef APP_CFG_FS_NAND_NBR_PGM_PER_PG
 482:apps/fs/src/fs_app.c ****     part_cfg.NbrPgmPerPg       = APP_CFG_FS_NAND_NBR_PGM_PER_PG;
 483:apps/fs/src/fs_app.c **** #endif
 484:apps/fs/src/fs_app.c ****     part_cfg.BusWidth          = APP_CFG_FS_NAND_BUS_WIDTH;
 485:apps/fs/src/fs_app.c ****     part_cfg.ECC_CodewordSize  = APP_CFG_FS_NAND_ECC_CODEWORD_SIZE;
 486:apps/fs/src/fs_app.c ****     part_cfg.ECC_NbrCorrBits   = APP_CFG_FS_NAND_ECC_NBR_CORR_BITS;
 487:apps/fs/src/fs_app.c ****     part_cfg.DefectMarkType    = APP_CFG_FS_NAND_DEFECT_MARK_TYPE;
 488:apps/fs/src/fs_app.c ****     part_cfg.MaxBadBlkCnt      = APP_CFG_FS_NAND_MAX_BAD_BLK_CNT;
 489:apps/fs/src/fs_app.c ****     part_cfg.MaxBlkErase       = APP_CFG_FS_NAND_MAX_BLK_ERASE;
 490:apps/fs/src/fs_app.c **** #endif
 491:apps/fs/src/fs_app.c **** 
ARM GAS  /tmp/ccJaibyu.s 			page 11


 492:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN DEV -
 493:apps/fs/src/fs_app.c **** 
 494:apps/fs/src/fs_app.c **** 
 495:apps/fs/src/fs_app.c **** 
 496:apps/fs/src/fs_app.c ****     FSDev_Open("nand:0:", (void *)&nand_cfg, &err);             /* Open device "nand:0:".          
 497:apps/fs/src/fs_app.c ****     switch (err) {
 498:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 499:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device.\r\n"));
 500:apps/fs/src/fs_app.c ****              break;
 501:apps/fs/src/fs_app.c **** 
 502:apps/fs/src/fs_app.c **** 
 503:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_INVALID_LOW_FMT:                        /* Low fmt invalid (see Note #1b). 
 504:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not low-level formatted).\r\n"));
 505:apps/fs/src/fs_app.c **** #if (FS_CFG_RD_ONLY_EN == DEF_DISABLED)
 506:apps/fs/src/fs_app.c ****              FS_NAND_LowFmt("nand:0:", &err);
 507:apps/fs/src/fs_app.c **** #endif
 508:apps/fs/src/fs_app.c ****              if (err != FS_ERR_NONE) {
 509:apps/fs/src/fs_app.c ****                 APP_TRACE_DBG(("    ...low-level format failed w/err = %d.\r\n", err));
 510:apps/fs/src/fs_app.c ****                 return (DEF_FAIL);
 511:apps/fs/src/fs_app.c ****              }
 512:apps/fs/src/fs_app.c ****              break;
 513:apps/fs/src/fs_app.c **** 
 514:apps/fs/src/fs_app.c **** 
 515:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1a).    
 516:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 517:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 518:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 519:apps/fs/src/fs_app.c ****         default:
 520:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening device failed w/err = %d.\r\n\r\n", err));
 521:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 522:apps/fs/src/fs_app.c ****     }
 523:apps/fs/src/fs_app.c **** 
 524:apps/fs/src/fs_app.c **** 
 525:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN VOL -
 526:apps/fs/src/fs_app.c ****     FSVol_Open("nand:0:", "nand:0:", 0, &err);                  /* Open volume "nand:0:".          
 527:apps/fs/src/fs_app.c ****     switch (err) {
 528:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 529:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (mounted).\r\n"));
 530:apps/fs/src/fs_app.c ****              break;
 531:apps/fs/src/fs_app.c **** 
 532:apps/fs/src/fs_app.c **** 
 533:apps/fs/src/fs_app.c ****         case FS_ERR_PARTITION_NOT_FOUND:                        /* Volume error (see Note #2).     
 534:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not formatted).\r\n"));
 535:apps/fs/src/fs_app.c **** #if (FS_CFG_RD_ONLY_EN == DEF_DISABLED)
 536:apps/fs/src/fs_app.c ****              FSVol_Fmt("nand:0:", (void *)0, &err);
 537:apps/fs/src/fs_app.c **** #endif
 538:apps/fs/src/fs_app.c ****              if (err != FS_ERR_NONE) {
 539:apps/fs/src/fs_app.c ****                 APP_TRACE_DBG(("    ...format failed w/err = %d.\r\n", err));
 540:apps/fs/src/fs_app.c ****                 return (DEF_FAIL);
 541:apps/fs/src/fs_app.c ****              }
 542:apps/fs/src/fs_app.c ****              break;
 543:apps/fs/src/fs_app.c **** 
 544:apps/fs/src/fs_app.c **** 
 545:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1a).    
 546:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 547:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 548:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
ARM GAS  /tmp/ccJaibyu.s 			page 12


 549:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (unmounted) w/err = %d.\r\n", err));
 550:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 551:apps/fs/src/fs_app.c **** 
 552:apps/fs/src/fs_app.c **** 
 553:apps/fs/src/fs_app.c ****         default:
 554:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening volume failed w/err = %d.\r\n\r\n", err));
 555:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 556:apps/fs/src/fs_app.c ****     }
 557:apps/fs/src/fs_app.c **** 
 558:apps/fs/src/fs_app.c ****     return (DEF_OK);
 559:apps/fs/src/fs_app.c **** }
 560:apps/fs/src/fs_app.c **** #endif
 561:apps/fs/src/fs_app.c **** 
 562:apps/fs/src/fs_app.c **** 
 563:apps/fs/src/fs_app.c **** /*
 564:apps/fs/src/fs_app.c **** ***************************************************************************************************
 565:apps/fs/src/fs_app.c **** *                                           App_FS_AddNOR()
 566:apps/fs/src/fs_app.c **** *
 567:apps/fs/src/fs_app.c **** * Description : Add NOR volume.
 568:apps/fs/src/fs_app.c **** *
 569:apps/fs/src/fs_app.c **** * Argument(s) : none.
 570:apps/fs/src/fs_app.c **** *
 571:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if volume opened.
 572:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 573:apps/fs/src/fs_app.c **** *
 574:apps/fs/src/fs_app.c **** * Note(s)     : (1) (a) A device error will be returned from FSDev_Open(), FSVol_Open(), FSDev_NOR_
 575:apps/fs/src/fs_app.c **** *                       or FSVol_Fmt() if the device malfunctions.  The device may still be open;
 576:apps/fs/src/fs_app.c **** *                       however, since NOR flash are fixed devices assumed to be always-functioning
 577:apps/fs/src/fs_app.c **** *                       application change will be necessary to fully address the problem.
 578:apps/fs/src/fs_app.c **** *
 579:apps/fs/src/fs_app.c **** *                   (b) A low-level format invalid error will be returned from FSDev_Open() if the 
 580:apps/fs/src/fs_app.c **** *                        is not low-level formatted.
 581:apps/fs/src/fs_app.c **** *
 582:apps/fs/src/fs_app.c **** *               (2) A partition-not-found error will be returned from FSVol_Open() if the device is
 583:apps/fs/src/fs_app.c **** *                   formatted (this will always be the situation immediately after FSDev_NOR_LowFmt
 584:apps/fs/src/fs_app.c **** ***************************************************************************************************
 585:apps/fs/src/fs_app.c **** */
 586:apps/fs/src/fs_app.c **** 
 587:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_NOR_EN == DEF_ENABLED)
 588:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddNOR (void)
 589:apps/fs/src/fs_app.c **** {
 590:apps/fs/src/fs_app.c ****     FS_DEV_NOR_CFG  nor_cfg;
 591:apps/fs/src/fs_app.c ****     FS_ERR          err;
 592:apps/fs/src/fs_app.c **** 
 593:apps/fs/src/fs_app.c **** 
 594:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ===========================================================    \r\n"));
 595:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    Adding/opening NOR volume \"nor:0:\"...\r\n"));
 596:apps/fs/src/fs_app.c **** 
 597:apps/fs/src/fs_app.c ****     FS_DevDrvAdd((FS_DEV_API *)&FSDev_NOR,                      /* Add NOR device driver.          
 598:apps/fs/src/fs_app.c ****                  (FS_ERR     *)&err);
 599:apps/fs/src/fs_app.c ****     if ((err != FS_ERR_NONE) &&
 600:apps/fs/src/fs_app.c ****         (err != FS_ERR_DEV_DRV_ALREADY_ADDED)) {
 601:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ...could not add driver w/err = %d\r\n\r\n", err));
 602:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 603:apps/fs/src/fs_app.c ****     }
 604:apps/fs/src/fs_app.c **** 
 605:apps/fs/src/fs_app.c **** 
ARM GAS  /tmp/ccJaibyu.s 			page 13


 606:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN DEV -
 607:apps/fs/src/fs_app.c ****     nor_cfg.AddrBase         =  APP_CFG_FS_NOR_ADDR_BASE;
 608:apps/fs/src/fs_app.c ****     nor_cfg.RegionNbr        =  APP_CFG_FS_NOR_REGION_NBR;
 609:apps/fs/src/fs_app.c **** 
 610:apps/fs/src/fs_app.c ****     nor_cfg.AddrStart        =  APP_CFG_FS_NOR_ADDR_START;
 611:apps/fs/src/fs_app.c ****     nor_cfg.DevSize          =  APP_CFG_FS_NOR_DEV_SIZE;
 612:apps/fs/src/fs_app.c ****     nor_cfg.SecSize          =  APP_CFG_FS_NOR_SEC_SIZE;
 613:apps/fs/src/fs_app.c ****     nor_cfg.PctRsvd          =  APP_CFG_FS_NOR_PCT_RSVD;
 614:apps/fs/src/fs_app.c ****     nor_cfg.EraseCntDiffTh   =  APP_CFG_FS_NOR_ERASE_CNT_DIFF_TH;
 615:apps/fs/src/fs_app.c **** 
 616:apps/fs/src/fs_app.c ****     nor_cfg.PhyPtr           = (FS_DEV_NOR_PHY_API *)APP_CFG_FS_NOR_PHY_PTR;
 617:apps/fs/src/fs_app.c **** 
 618:apps/fs/src/fs_app.c ****     nor_cfg.BusWidth         =  APP_CFG_FS_NOR_BUS_WIDTH;
 619:apps/fs/src/fs_app.c ****     nor_cfg.BusWidthMax      =  APP_CFG_FS_NOR_BUS_WIDTH_MAX;
 620:apps/fs/src/fs_app.c ****     nor_cfg.PhyDevCnt        =  APP_CFG_FS_NOR_PHY_DEV_CNT;
 621:apps/fs/src/fs_app.c ****     nor_cfg.MaxClkFreq       =  APP_CFG_FS_NOR_MAX_CLK_FREQ;
 622:apps/fs/src/fs_app.c **** 
 623:apps/fs/src/fs_app.c ****     FSDev_Open("nor:0:", (void *)&nor_cfg, &err);               /* Open device "nor:0:".           
 624:apps/fs/src/fs_app.c ****     switch (err) {
 625:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 626:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device.\r\n"));
 627:apps/fs/src/fs_app.c ****              break;
 628:apps/fs/src/fs_app.c **** 
 629:apps/fs/src/fs_app.c **** 
 630:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_INVALID_LOW_FMT:                        /* Low fmt invalid (see Note #1b). 
 631:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not low-level formatted).\r\n"));
 632:apps/fs/src/fs_app.c **** #if (FS_CFG_RD_ONLY_EN == DEF_DISABLED)
 633:apps/fs/src/fs_app.c ****              FSDev_NOR_LowFmt("nor:0:", &err);
 634:apps/fs/src/fs_app.c **** #endif
 635:apps/fs/src/fs_app.c ****              if (err != FS_ERR_NONE) {
 636:apps/fs/src/fs_app.c ****                 APP_TRACE_DBG(("    ...low-level format failed.\r\n"));
 637:apps/fs/src/fs_app.c ****                 return (DEF_FAIL);
 638:apps/fs/src/fs_app.c ****              }
 639:apps/fs/src/fs_app.c ****              break;
 640:apps/fs/src/fs_app.c **** 
 641:apps/fs/src/fs_app.c **** 
 642:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1a).    
 643:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 644:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 645:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 646:apps/fs/src/fs_app.c ****         default:
 647:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening device failed w/err = %d.\r\n\r\n", err));
 648:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 649:apps/fs/src/fs_app.c ****     }
 650:apps/fs/src/fs_app.c **** 
 651:apps/fs/src/fs_app.c **** 
 652:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN VOL -
 653:apps/fs/src/fs_app.c ****     FSVol_Open("nor:0:", "nor:0:", 0, &err);                    /* Open volume "nor:0:".           
 654:apps/fs/src/fs_app.c ****     switch (err) {
 655:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 656:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (mounted).\r\n"));
 657:apps/fs/src/fs_app.c ****              break;
 658:apps/fs/src/fs_app.c **** 
 659:apps/fs/src/fs_app.c **** 
 660:apps/fs/src/fs_app.c ****         case FS_ERR_PARTITION_NOT_FOUND:                        /* Volume error (see Note #2).     
 661:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not formatted).\r\n"));
 662:apps/fs/src/fs_app.c **** #if (FS_CFG_RD_ONLY_EN == DEF_DISABLED)
ARM GAS  /tmp/ccJaibyu.s 			page 14


 663:apps/fs/src/fs_app.c ****              FSVol_Fmt("nor:0:", (void *)0, &err);
 664:apps/fs/src/fs_app.c **** #endif
 665:apps/fs/src/fs_app.c ****              if (err != FS_ERR_NONE) {
 666:apps/fs/src/fs_app.c ****                 APP_TRACE_DBG(("    ...format failed.\r\n"));
 667:apps/fs/src/fs_app.c ****                 return (DEF_FAIL);
 668:apps/fs/src/fs_app.c ****              }
 669:apps/fs/src/fs_app.c ****              break;
 670:apps/fs/src/fs_app.c **** 
 671:apps/fs/src/fs_app.c **** 
 672:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1a).    
 673:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 674:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 675:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 676:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (unmounted).\r\n"));
 677:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 678:apps/fs/src/fs_app.c **** 
 679:apps/fs/src/fs_app.c **** 
 680:apps/fs/src/fs_app.c ****         default:
 681:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening volume failed w/err = %d.\r\n\r\n", err));
 682:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 683:apps/fs/src/fs_app.c ****     }
 684:apps/fs/src/fs_app.c **** 
 685:apps/fs/src/fs_app.c ****     return (DEF_OK);
 686:apps/fs/src/fs_app.c **** }
 687:apps/fs/src/fs_app.c **** #endif
 688:apps/fs/src/fs_app.c **** 
 689:apps/fs/src/fs_app.c **** 
 690:apps/fs/src/fs_app.c **** /*
 691:apps/fs/src/fs_app.c **** ***************************************************************************************************
 692:apps/fs/src/fs_app.c **** *                                           App_FS_AddRAM()
 693:apps/fs/src/fs_app.c **** *
 694:apps/fs/src/fs_app.c **** * Description : Add RAM disk volume.
 695:apps/fs/src/fs_app.c **** *
 696:apps/fs/src/fs_app.c **** * Argument(s) : none.
 697:apps/fs/src/fs_app.c **** *
 698:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if volume opened.
 699:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 700:apps/fs/src/fs_app.c **** *
 701:apps/fs/src/fs_app.c **** * Note(s)     : (1) A partition-not-found error will be returned from FSVol_Open() if the device is
 702:apps/fs/src/fs_app.c **** *                   formatted (for a RAM disk, this will typically be the situation immediately aft
 703:apps/fs/src/fs_app.c **** *                   FSDev_Open()).
 704:apps/fs/src/fs_app.c **** ***************************************************************************************************
 705:apps/fs/src/fs_app.c **** */
 706:apps/fs/src/fs_app.c **** 
 707:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_RAM_EN == DEF_ENABLED)
 708:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddRAM (void)
 709:apps/fs/src/fs_app.c **** {
 710:apps/fs/src/fs_app.c ****     FS_DEV_RAM_CFG  ram_cfg;
 711:apps/fs/src/fs_app.c ****     FS_ERR          err;
 712:apps/fs/src/fs_app.c **** 
 713:apps/fs/src/fs_app.c **** 
 714:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ===========================================================    \r\n"));
 715:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    Adding/opening RAM disk volume \"ram:0:\"...\r\n"));
 716:apps/fs/src/fs_app.c **** 
 717:apps/fs/src/fs_app.c ****     FS_DevDrvAdd((FS_DEV_API *)&FSDev_RAM,                      /* Add RAM disk driver.            
 718:apps/fs/src/fs_app.c ****                  (FS_ERR     *)&err);
 719:apps/fs/src/fs_app.c ****     if ((err != FS_ERR_NONE) &&
ARM GAS  /tmp/ccJaibyu.s 			page 15


 720:apps/fs/src/fs_app.c ****         (err != FS_ERR_DEV_DRV_ALREADY_ADDED)) {
 721:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ...could not add driver w/err = %d\r\n\r\n", err));
 722:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 723:apps/fs/src/fs_app.c ****     }
 724:apps/fs/src/fs_app.c **** 
 725:apps/fs/src/fs_app.c **** 
 726:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN DEV -
 727:apps/fs/src/fs_app.c ****                                                                 /* Assign RAM disk configuration ..
 728:apps/fs/src/fs_app.c ****     ram_cfg.SecSize =  APP_CFG_FS_RAM_SEC_SIZE;                 /* ... (a) sector size           ..
 729:apps/fs/src/fs_app.c ****     ram_cfg.Size    =  APP_CFG_FS_RAM_NBR_SECS;                 /* ... (b) disk size (in sectors)..
 730:apps/fs/src/fs_app.c ****     ram_cfg.DiskPtr = (void *)&App_FS_RAM_Disk[0];              /* ... (c) pointer to disk RAM.    
 731:apps/fs/src/fs_app.c **** 
 732:apps/fs/src/fs_app.c ****     FSDev_Open("ram:0:", (void *)&ram_cfg, &err);               /* Open device "ram:0:".           
 733:apps/fs/src/fs_app.c ****     if (err != FS_ERR_NONE) {
 734:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ...opening device failed w/err = %d.\r\n\r\n", err));
 735:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 736:apps/fs/src/fs_app.c ****     }
 737:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ...opened device.\r\n"));
 738:apps/fs/src/fs_app.c **** 
 739:apps/fs/src/fs_app.c **** 
 740:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN VOL -
 741:apps/fs/src/fs_app.c ****     FSVol_Open("ram:0:", "ram:0:", 0, &err);                    /* Open volume "ram:0:".           
 742:apps/fs/src/fs_app.c ****     switch (err) {
 743:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 744:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (mounted).\r\n"));
 745:apps/fs/src/fs_app.c ****              break;
 746:apps/fs/src/fs_app.c **** 
 747:apps/fs/src/fs_app.c **** 
 748:apps/fs/src/fs_app.c ****         case FS_ERR_PARTITION_NOT_FOUND:                        /* Volume error (see Note #2).     
 749:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not formatted).\r\n"));
 750:apps/fs/src/fs_app.c **** #if (FS_CFG_RD_ONLY_EN == DEF_DISABLED)
 751:apps/fs/src/fs_app.c ****              FSVol_Fmt("ram:0:", (void *)0, &err);
 752:apps/fs/src/fs_app.c **** #endif
 753:apps/fs/src/fs_app.c ****              if (err != FS_ERR_NONE) {
 754:apps/fs/src/fs_app.c ****                 APP_TRACE_DBG(("    ...format failed.\r\n"));
 755:apps/fs/src/fs_app.c ****                 return (DEF_FAIL);
 756:apps/fs/src/fs_app.c ****              }
 757:apps/fs/src/fs_app.c ****              break;
 758:apps/fs/src/fs_app.c **** 
 759:apps/fs/src/fs_app.c **** 
 760:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:
 761:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 762:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 763:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 764:apps/fs/src/fs_app.c ****         default:
 765:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening volume failed w/err = %d.\r\n\r\n", err));
 766:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 767:apps/fs/src/fs_app.c ****     }
 768:apps/fs/src/fs_app.c **** 
 769:apps/fs/src/fs_app.c ****     return (DEF_OK);
 770:apps/fs/src/fs_app.c **** }
 771:apps/fs/src/fs_app.c **** #endif
 772:apps/fs/src/fs_app.c **** 
 773:apps/fs/src/fs_app.c **** 
 774:apps/fs/src/fs_app.c **** /*
 775:apps/fs/src/fs_app.c **** ***************************************************************************************************
 776:apps/fs/src/fs_app.c **** *                                         App_FS_AddSD_Card()
ARM GAS  /tmp/ccJaibyu.s 			page 16


 777:apps/fs/src/fs_app.c **** *
 778:apps/fs/src/fs_app.c **** * Description : Add SD/MMC (CardMode) volume.
 779:apps/fs/src/fs_app.c **** *
 780:apps/fs/src/fs_app.c **** * Argument(s) : none.
 781:apps/fs/src/fs_app.c **** *
 782:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if volume opened.
 783:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 784:apps/fs/src/fs_app.c **** *
 785:apps/fs/src/fs_app.c **** * Note(s)     : (1) A device error will be returned from FSDev_Open() & FSVol_Open() if the card is
 786:apps/fs/src/fs_app.c **** *                   present or malfunctions.  The device or volume, respectively, is still open, th
 787:apps/fs/src/fs_app.c **** *                   the device & volume information will need to be refreshed before the medium is
 788:apps/fs/src/fs_app.c **** *                   accessible.
 789:apps/fs/src/fs_app.c **** *
 790:apps/fs/src/fs_app.c **** *               (2) A volume error will be returned from FSVol_Open() if no valid file system is fo
 791:apps/fs/src/fs_app.c **** *                   on the card.  It may need to be formatted.
 792:apps/fs/src/fs_app.c **** ***************************************************************************************************
 793:apps/fs/src/fs_app.c **** */
 794:apps/fs/src/fs_app.c **** 
 795:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_SD_CARD_EN == DEF_ENABLED)
 796:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddSD_Card (void)
 797:apps/fs/src/fs_app.c **** {
 798:apps/fs/src/fs_app.c ****     FS_ERR  err;
 799:apps/fs/src/fs_app.c **** 
 800:apps/fs/src/fs_app.c **** 
 801:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ===========================================================    \r\n"));
 802:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    Adding/opening SD/MMC (CardMode) volume \"sdcard:0:\"...\r\n"));
 803:apps/fs/src/fs_app.c **** 
 804:apps/fs/src/fs_app.c ****     FS_DevDrvAdd((FS_DEV_API *)&FSDev_SD_Card,                  /* Add SD/MMC (CardMode) device dri
 805:apps/fs/src/fs_app.c ****                  (FS_ERR     *)&err);
 806:apps/fs/src/fs_app.c ****     if ((err != FS_ERR_NONE) &&
 807:apps/fs/src/fs_app.c ****         (err != FS_ERR_DEV_DRV_ALREADY_ADDED)) {
 808:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ...could not add driver w/err = %d\r\n\r\n", err));
 809:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 810:apps/fs/src/fs_app.c ****     }
 811:apps/fs/src/fs_app.c **** 
 812:apps/fs/src/fs_app.c **** 
 813:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN DEV -
 814:apps/fs/src/fs_app.c ****     FSDev_Open("sdcard:0:", (void *)0, &err);                   /* Open device "sdcard:0:".        
 815:apps/fs/src/fs_app.c ****     switch (err) {
 816:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 817:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device.\r\n"));
 818:apps/fs/src/fs_app.c ****              break;
 819:apps/fs/src/fs_app.c **** 
 820:apps/fs/src/fs_app.c **** 
 821:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1).     
 822:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 823:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 824:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 825:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not present).\r\n"));
 826:apps/fs/src/fs_app.c ****              break;
 827:apps/fs/src/fs_app.c **** 
 828:apps/fs/src/fs_app.c **** 
 829:apps/fs/src/fs_app.c ****         default:
 830:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening device failed w/err = %d.\r\n\r\n", err));
 831:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 832:apps/fs/src/fs_app.c ****     }
 833:apps/fs/src/fs_app.c **** 
ARM GAS  /tmp/ccJaibyu.s 			page 17


 834:apps/fs/src/fs_app.c **** 
 835:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN VOL -
 836:apps/fs/src/fs_app.c ****     FSVol_Open("sdcard:0:", "sdcard:0:", 0, &err);              /* Open volume "sdcard:0:".        
 837:apps/fs/src/fs_app.c ****     switch (err) {
 838:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 839:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (mounted).\r\n"));
 840:apps/fs/src/fs_app.c ****              break;
 841:apps/fs/src/fs_app.c **** 
 842:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1).     
 843:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 844:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 845:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 846:apps/fs/src/fs_app.c ****         case FS_ERR_PARTITION_NOT_FOUND:                        /* Volume error (see Note #2).     
 847:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (unmounted).\r\n"));
 848:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 849:apps/fs/src/fs_app.c **** 
 850:apps/fs/src/fs_app.c ****         default:
 851:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening volume failed w/err = %d.\r\n\r\n", err));
 852:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 853:apps/fs/src/fs_app.c ****     }
 854:apps/fs/src/fs_app.c **** 
 855:apps/fs/src/fs_app.c ****     return (DEF_OK);
 856:apps/fs/src/fs_app.c **** }
 857:apps/fs/src/fs_app.c **** #endif
 858:apps/fs/src/fs_app.c **** 
 859:apps/fs/src/fs_app.c **** 
 860:apps/fs/src/fs_app.c **** /*
 861:apps/fs/src/fs_app.c **** ***************************************************************************************************
 862:apps/fs/src/fs_app.c **** *                                         App_FS_AddSD_SPI()
 863:apps/fs/src/fs_app.c **** *
 864:apps/fs/src/fs_app.c **** * Description : Add SD/MMC (SPI) volume.
 865:apps/fs/src/fs_app.c **** *
 866:apps/fs/src/fs_app.c **** * Argument(s) : none.
 867:apps/fs/src/fs_app.c **** *
 868:apps/fs/src/fs_app.c **** * Return(s)   : DEF_OK,   if volume opened.
 869:apps/fs/src/fs_app.c **** *               DEF_FAIL, otherwise.
 870:apps/fs/src/fs_app.c **** *
 871:apps/fs/src/fs_app.c **** * Note(s)     : (1) A device error will be returned from FSDev_Open() & FSVol_Open() if the card is
 872:apps/fs/src/fs_app.c **** *                   present or malfunctions.  The device or volume, respectively, is still open, th
 873:apps/fs/src/fs_app.c **** *                   the device & volume information will need to be refreshed before the medium is
 874:apps/fs/src/fs_app.c **** *                   accessible.
 875:apps/fs/src/fs_app.c **** *
 876:apps/fs/src/fs_app.c **** *               (2) A volume error will be returned from FSVol_Open() if no valid file system is fo
 877:apps/fs/src/fs_app.c **** *                   on the card.  It may need to be formatted.
 878:apps/fs/src/fs_app.c **** ***************************************************************************************************
 879:apps/fs/src/fs_app.c **** */
 880:apps/fs/src/fs_app.c **** 
 881:apps/fs/src/fs_app.c **** #if (APP_CFG_FS_SD_EN == DEF_ENABLED)
 882:apps/fs/src/fs_app.c **** static  CPU_BOOLEAN  App_FS_AddSD_SPI (void)
 883:apps/fs/src/fs_app.c **** {
  52              		.loc 1 883 1 view -0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 8
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56 0000 00B5     		push	{lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccJaibyu.s 			page 18


  59              		.cfi_offset 14, -4
  60 0002 83B0     		sub	sp, sp, #12
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 16
 884:apps/fs/src/fs_app.c ****     FS_ERR  err;
  63              		.loc 1 884 5 view .LVU1
 885:apps/fs/src/fs_app.c **** 
 886:apps/fs/src/fs_app.c **** 
 887:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    ===========================================================    \r\n"));
  64              		.loc 1 887 5 view .LVU2
  65 0004 3148     		ldr	r0, .L15
  66 0006 FFF7FEFF 		bl	APP_TRACE_DBG
  67              	.LVL0:
 888:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("    Adding/opening SD/MMC (SPI) volume \"sd:0:\"...\r\n"));
  68              		.loc 1 888 5 view .LVU3
  69 000a 3148     		ldr	r0, .L15+4
  70 000c FFF7FEFF 		bl	APP_TRACE_DBG
  71              	.LVL1:
 889:apps/fs/src/fs_app.c **** 
 890:apps/fs/src/fs_app.c ****     FS_DevDrvAdd((FS_DEV_API *)&FSDev_SD_SPI,                   /* Add SD/MMC (SPI) device driver. 
  72              		.loc 1 890 5 view .LVU4
  73 0010 0DF10601 		add	r1, sp, #6
  74 0014 2F48     		ldr	r0, .L15+8
  75 0016 FFF7FEFF 		bl	FS_DevDrvAdd
  76              	.LVL2:
 891:apps/fs/src/fs_app.c ****                  (FS_ERR     *)&err);
 892:apps/fs/src/fs_app.c ****     if ((err != FS_ERR_NONE) &&
  77              		.loc 1 892 5 view .LVU5
  78              		.loc 1 892 14 is_stmt 0 view .LVU6
  79 001a BDF80600 		ldrh	r0, [sp, #6]
  80              		.loc 1 892 8 view .LVU7
  81 001e 10B1     		cbz	r0, .L2
  82              		.loc 1 892 30 discriminator 1 view .LVU8
  83 0020 B0F5C87F 		cmp	r0, #400
  84 0024 1AD1     		bne	.L14
  85              	.L2:
 893:apps/fs/src/fs_app.c ****         (err != FS_ERR_DEV_DRV_ALREADY_ADDED)) {
 894:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("    ...could not add driver w/err = %d\r\n\r\n", err));
 895:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 896:apps/fs/src/fs_app.c ****     }
 897:apps/fs/src/fs_app.c **** 
 898:apps/fs/src/fs_app.c **** 
 899:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN DEV -
 900:apps/fs/src/fs_app.c ****     FSDev_Open("sd:0:", (void *)0, &err);                       /* Open device "sd:0:".            
  86              		.loc 1 900 5 is_stmt 1 view .LVU9
  87 0026 0DF10602 		add	r2, sp, #6
  88 002a 0021     		movs	r1, #0
  89 002c 2A48     		ldr	r0, .L15+12
  90 002e FFF7FEFF 		bl	FSDev_Open
  91              	.LVL3:
 901:apps/fs/src/fs_app.c ****     switch (err) {
  92              		.loc 1 901 5 view .LVU10
  93 0032 BDF80600 		ldrh	r0, [sp, #6]
  94 0036 A8B1     		cbz	r0, .L4
  95 0038 B0F5A47F 		cmp	r0, #328
  96 003c 2AD2     		bcs	.L5
  97 003e B0F5967F 		cmp	r0, #300
ARM GAS  /tmp/ccJaibyu.s 			page 19


  98 0042 27D3     		bcc	.L5
  99 0044 A0F59673 		sub	r3, r0, #300
 100 0048 9AB2     		uxth	r2, r3
 101 004a 0123     		movs	r3, #1
 102 004c 9340     		lsls	r3, r3, r2
 103 004e 234A     		ldr	r2, .L15+16
 104 0050 1342     		tst	r3, r2
 105 0052 1FD0     		beq	.L5
 902:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 903:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device.\r\n"));
 904:apps/fs/src/fs_app.c ****              break;
 905:apps/fs/src/fs_app.c **** 
 906:apps/fs/src/fs_app.c **** 
 907:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1).     
 908:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 909:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 910:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 911:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened device (not present).\r\n"));
 106              		.loc 1 911 14 view .LVU11
 107 0054 2248     		ldr	r0, .L15+20
 108 0056 FFF7FEFF 		bl	APP_TRACE_DBG
 109              	.LVL4:
 912:apps/fs/src/fs_app.c ****              break;
 110              		.loc 1 912 14 view .LVU12
 111 005a 06E0     		b	.L7
 112              	.L14:
 894:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 113              		.loc 1 894 9 view .LVU13
 114 005c FFF7FEFF 		bl	APP_TRACE_DBG
 115              	.LVL5:
 895:apps/fs/src/fs_app.c ****     }
 116              		.loc 1 895 9 view .LVU14
 895:apps/fs/src/fs_app.c ****     }
 117              		.loc 1 895 16 is_stmt 0 view .LVU15
 118 0060 0020     		movs	r0, #0
 119 0062 1AE0     		b	.L3
 120              	.L4:
 903:apps/fs/src/fs_app.c ****              break;
 121              		.loc 1 903 14 is_stmt 1 view .LVU16
 122 0064 1F48     		ldr	r0, .L15+24
 123 0066 FFF7FEFF 		bl	APP_TRACE_DBG
 124              	.LVL6:
 904:apps/fs/src/fs_app.c **** 
 125              		.loc 1 904 14 view .LVU17
 126              	.L7:
 913:apps/fs/src/fs_app.c **** 
 914:apps/fs/src/fs_app.c **** 
 915:apps/fs/src/fs_app.c ****         default:
 916:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening device failed w/err = %d.\r\n\r\n", err));
 917:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 918:apps/fs/src/fs_app.c ****     }
 919:apps/fs/src/fs_app.c **** 
 920:apps/fs/src/fs_app.c **** 
 921:apps/fs/src/fs_app.c ****                                                                 /* --------------------- OPEN VOL -
 922:apps/fs/src/fs_app.c ****     FSVol_Open("sd:0:", "sd:0:", 0u, &err);                     /* Open volume "sd:0:".            
 127              		.loc 1 922 5 view .LVU18
 128 006a 1B48     		ldr	r0, .L15+12
ARM GAS  /tmp/ccJaibyu.s 			page 20


 129 006c 0DF10603 		add	r3, sp, #6
 130 0070 0022     		movs	r2, #0
 131 0072 0146     		mov	r1, r0
 132 0074 FFF7FEFF 		bl	FSVol_Open
 133              	.LVL7:
 923:apps/fs/src/fs_app.c ****     switch (err) {
 134              		.loc 1 923 5 view .LVU19
 135 0078 BDF80600 		ldrh	r0, [sp, #6]
 136 007c B0F5A47F 		cmp	r0, #328
 137 0080 1BD2     		bcs	.L8
 138 0082 B0F5967F 		cmp	r0, #300
 139 0086 0BD2     		bcs	.L9
 140 0088 D8B9     		cbnz	r0, .L11
 924:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 925:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (mounted).\r\n"));
 141              		.loc 1 925 14 view .LVU20
 142 008a 1748     		ldr	r0, .L15+28
 143 008c FFF7FEFF 		bl	APP_TRACE_DBG
 144              	.LVL8:
 926:apps/fs/src/fs_app.c ****              break;
 145              		.loc 1 926 14 view .LVU21
 927:apps/fs/src/fs_app.c **** 
 928:apps/fs/src/fs_app.c **** 
 929:apps/fs/src/fs_app.c ****         case FS_ERR_DEV:                                        /* Device error (see Note #1).     
 930:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_IO:
 931:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_TIMEOUT:
 932:apps/fs/src/fs_app.c ****         case FS_ERR_DEV_NOT_PRESENT:
 933:apps/fs/src/fs_app.c ****         case FS_ERR_PARTITION_NOT_FOUND:                        /* Volume error (see Note #2).     
 934:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opened volume (unmounted).\r\n"));
 935:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 936:apps/fs/src/fs_app.c **** 
 937:apps/fs/src/fs_app.c **** 
 938:apps/fs/src/fs_app.c ****         default:
 939:apps/fs/src/fs_app.c ****              APP_TRACE_DBG(("    ...opening volume failed w/err = %d.\r\n\r\n", err));
 940:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 941:apps/fs/src/fs_app.c ****     }
 942:apps/fs/src/fs_app.c **** 
 943:apps/fs/src/fs_app.c ****     return (DEF_OK);
 146              		.loc 1 943 5 view .LVU22
 147              		.loc 1 943 12 is_stmt 0 view .LVU23
 148 0090 0120     		movs	r0, #1
 149 0092 02E0     		b	.L3
 150              	.L5:
 916:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 151              		.loc 1 916 14 is_stmt 1 view .LVU24
 152 0094 FFF7FEFF 		bl	APP_TRACE_DBG
 153              	.LVL9:
 917:apps/fs/src/fs_app.c ****     }
 154              		.loc 1 917 14 view .LVU25
 917:apps/fs/src/fs_app.c ****     }
 155              		.loc 1 917 21 is_stmt 0 view .LVU26
 156 0098 0020     		movs	r0, #0
 157              	.L3:
 944:apps/fs/src/fs_app.c **** }
 158              		.loc 1 944 1 view .LVU27
 159 009a 03B0     		add	sp, sp, #12
 160              	.LCFI2:
ARM GAS  /tmp/ccJaibyu.s 			page 21


 161              		.cfi_remember_state
 162              		.cfi_def_cfa_offset 4
 163              		@ sp needed
 164 009c 5DF804FB 		ldr	pc, [sp], #4
 165              	.L9:
 166              	.LCFI3:
 167              		.cfi_restore_state
 168 00a0 A0F59673 		sub	r3, r0, #300
 169 00a4 9AB2     		uxth	r2, r3
 170 00a6 0123     		movs	r3, #1
 171 00a8 9340     		lsls	r3, r3, r2
 172 00aa 0C4A     		ldr	r2, .L15+16
 173 00ac 1342     		tst	r3, r2
 174 00ae 08D0     		beq	.L11
 175              	.L12:
 934:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 176              		.loc 1 934 14 is_stmt 1 view .LVU28
 177 00b0 0E48     		ldr	r0, .L15+32
 178 00b2 FFF7FEFF 		bl	APP_TRACE_DBG
 179              	.LVL10:
 935:apps/fs/src/fs_app.c **** 
 180              		.loc 1 935 14 view .LVU29
 935:apps/fs/src/fs_app.c **** 
 181              		.loc 1 935 21 is_stmt 0 view .LVU30
 182 00b6 0020     		movs	r0, #0
 183 00b8 EFE7     		b	.L3
 184              	.L8:
 923:apps/fs/src/fs_app.c ****         case FS_ERR_NONE:
 185              		.loc 1 923 5 view .LVU31
 186 00ba 40F2EF33 		movw	r3, #1007
 187 00be 9842     		cmp	r0, r3
 188 00c0 F6D0     		beq	.L12
 189              	.L11:
 939:apps/fs/src/fs_app.c ****              return (DEF_FAIL);
 190              		.loc 1 939 14 is_stmt 1 view .LVU32
 191 00c2 FFF7FEFF 		bl	APP_TRACE_DBG
 192              	.LVL11:
 940:apps/fs/src/fs_app.c ****     }
 193              		.loc 1 940 14 view .LVU33
 940:apps/fs/src/fs_app.c ****     }
 194              		.loc 1 940 21 is_stmt 0 view .LVU34
 195 00c6 0020     		movs	r0, #0
 196 00c8 E7E7     		b	.L3
 197              	.L16:
 198 00ca 00BF     		.align	2
 199              	.L15:
 200 00cc 00000000 		.word	.LC0
 201 00d0 48000000 		.word	.LC1
 202 00d4 00000000 		.word	FSDev_SD_SPI
 203 00d8 7C000000 		.word	.LC2
 204 00dc 0100800C 		.word	209715201
 205 00e0 9C000000 		.word	.LC4
 206 00e4 84000000 		.word	.LC3
 207 00e8 C4000000 		.word	.LC5
 208 00ec E8000000 		.word	.LC6
 209              		.cfi_endproc
 210              	.LFE1:
ARM GAS  /tmp/ccJaibyu.s 			page 22


 212              		.section	.rodata.App_FS_Init.str1.4,"aMS",%progbits,1
 213              		.align	2
 214              	.LC7:
 215 0000 0D0A00   		.ascii	"\015\012\000"
 216 0003 00       		.align	2
 217              	.LC8:
 218 0004 3D3D3D3D 		.ascii	"==================================================="
 218      3D3D3D3D 
 218      3D3D3D3D 
 218      3D3D3D3D 
 218      3D3D3D3D 
 219 0037 3D3D3D3D 		.ascii	"================\015\012\000"
 219      3D3D3D3D 
 219      3D3D3D3D 
 219      3D3D3D3D 
 219      0D0A00
 220 004a 0000     		.align	2
 221              	.LC9:
 222 004c 3D202020 		.ascii	"=                        FS INITIALIZATION         "
 222      20202020 
 222      20202020 
 222      20202020 
 222      20202020 
 223 007f 20202020 		.ascii	"               =\015\012\000"
 223      20202020 
 223      20202020 
 223      2020203D 
 223      0D0A00
 224 0092 0000     		.align	2
 225              	.LC10:
 226 0094 496E6974 		.ascii	"Initializing FS...\015\012\000"
 226      69616C69 
 226      7A696E67 
 226      2046532E 
 226      2E2E0D0A 
 227 00a9 000000   		.align	2
 228              	.LC11:
 229 00ac 2E2E2E69 		.ascii	"...init succeeded.\015\012\000"
 229      6E697420 
 229      73756363 
 229      65656465 
 229      642E0D0A 
 230              		.section	.text.App_FS_Init,"ax",%progbits
 231              		.align	1
 232              		.global	App_FS_Init
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu fpv4-sp-d16
 238              	App_FS_Init:
 239              	.LFB0:
 183:apps/fs/src/fs_app.c ****     FS_ERR       err;
 240              		.loc 1 183 1 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccJaibyu.s 			page 23


 245              	.LCFI4:
 246              		.cfi_def_cfa_offset 16
 247              		.cfi_offset 3, -16
 248              		.cfi_offset 4, -12
 249              		.cfi_offset 5, -8
 250              		.cfi_offset 14, -4
 184:apps/fs/src/fs_app.c ****     CPU_BOOLEAN  ok;
 251              		.loc 1 184 5 view .LVU36
 185:apps/fs/src/fs_app.c **** 
 252              		.loc 1 185 5 view .LVU37
 189:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 253              		.loc 1 189 5 view .LVU38
 254 0002 1748     		ldr	r0, .L24
 255 0004 FFF7FEFF 		bl	APP_TRACE_DBG
 256              	.LVL12:
 190:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("=                        FS INITIALIZATION                        =\r\n"));
 257              		.loc 1 190 5 view .LVU39
 258 0008 164C     		ldr	r4, .L24+4
 259 000a 2046     		mov	r0, r4
 260 000c FFF7FEFF 		bl	APP_TRACE_DBG
 261              	.LVL13:
 191:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 262              		.loc 1 191 5 view .LVU40
 263 0010 1548     		ldr	r0, .L24+8
 264 0012 FFF7FEFF 		bl	APP_TRACE_DBG
 265              	.LVL14:
 192:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("Initializing FS...\r\n"));
 266              		.loc 1 192 5 view .LVU41
 267 0016 2046     		mov	r0, r4
 268 0018 FFF7FEFF 		bl	APP_TRACE_DBG
 269              	.LVL15:
 193:apps/fs/src/fs_app.c ****     err = FS_Init((FS_CFG *)&App_FS_Cfg);
 270              		.loc 1 193 5 view .LVU42
 271 001c 1348     		ldr	r0, .L24+12
 272 001e FFF7FEFF 		bl	APP_TRACE_DBG
 273              	.LVL16:
 194:apps/fs/src/fs_app.c ****     if (err != FS_ERR_NONE) {
 274              		.loc 1 194 5 view .LVU43
 194:apps/fs/src/fs_app.c ****     if (err != FS_ERR_NONE) {
 275              		.loc 1 194 11 is_stmt 0 view .LVU44
 276 0022 1348     		ldr	r0, .L24+16
 277 0024 FFF7FEFF 		bl	FS_Init
 278              	.LVL17:
 195:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("...init failed w/err = %d\r\n\r\n", err));
 279              		.loc 1 195 5 is_stmt 1 view .LVU45
 195:apps/fs/src/fs_app.c ****         APP_TRACE_DBG(("...init failed w/err = %d\r\n\r\n", err));
 280              		.loc 1 195 8 is_stmt 0 view .LVU46
 281 0028 38B9     		cbnz	r0, .L22
 256:apps/fs/src/fs_app.c **** 
 282              		.loc 1 256 5 is_stmt 1 view .LVU47
 256:apps/fs/src/fs_app.c **** 
 283              		.loc 1 256 10 is_stmt 0 view .LVU48
 284 002a FFF7FEFF 		bl	App_FS_AddSD_SPI
 285              	.LVL18:
 256:apps/fs/src/fs_app.c **** 
 286              		.loc 1 256 10 view .LVU49
 287 002e 0446     		mov	r4, r0
ARM GAS  /tmp/ccJaibyu.s 			page 24


 288              	.LVL19:
 258:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 289              		.loc 1 258 5 is_stmt 1 view .LVU50
 258:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 290              		.loc 1 258 8 is_stmt 0 view .LVU51
 291 0030 0128     		cmp	r0, #1
 292 0032 06D0     		beq	.L23
 259:apps/fs/src/fs_app.c ****     }
 293              		.loc 1 259 16 view .LVU52
 294 0034 0024     		movs	r4, #0
 295              	.LVL20:
 296              	.L19:
 269:apps/fs/src/fs_app.c **** 
 297              		.loc 1 269 1 view .LVU53
 298 0036 2046     		mov	r0, r4
 299 0038 38BD     		pop	{r3, r4, r5, pc}
 300              	.LVL21:
 301              	.L22:
 196:apps/fs/src/fs_app.c ****         return (DEF_FAIL);
 302              		.loc 1 196 9 is_stmt 1 view .LVU54
 303 003a FFF7FEFF 		bl	APP_TRACE_DBG
 304              	.LVL22:
 197:apps/fs/src/fs_app.c ****     }
 305              		.loc 1 197 9 view .LVU55
 197:apps/fs/src/fs_app.c ****     }
 306              		.loc 1 197 16 is_stmt 0 view .LVU56
 307 003e 0024     		movs	r4, #0
 308 0040 F9E7     		b	.L19
 309              	.LVL23:
 310              	.L23:
 263:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 311              		.loc 1 263 5 is_stmt 1 view .LVU57
 312 0042 0C48     		ldr	r0, .L24+20
 313              	.LVL24:
 263:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 314              		.loc 1 263 5 is_stmt 0 view .LVU58
 315 0044 FFF7FEFF 		bl	APP_TRACE_DBG
 316              	.LVL25:
 264:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("===================================================================\r\n"));
 317              		.loc 1 264 5 is_stmt 1 view .LVU59
 318 0048 064D     		ldr	r5, .L24+4
 319 004a 2846     		mov	r0, r5
 320 004c FFF7FEFF 		bl	APP_TRACE_DBG
 321              	.LVL26:
 265:apps/fs/src/fs_app.c ****     APP_TRACE_DBG(("\r\n"));
 322              		.loc 1 265 5 view .LVU60
 323 0050 2846     		mov	r0, r5
 324 0052 FFF7FEFF 		bl	APP_TRACE_DBG
 325              	.LVL27:
 266:apps/fs/src/fs_app.c **** 
 326              		.loc 1 266 5 view .LVU61
 327 0056 0248     		ldr	r0, .L24
 328 0058 FFF7FEFF 		bl	APP_TRACE_DBG
 329              	.LVL28:
 268:apps/fs/src/fs_app.c **** }
 330              		.loc 1 268 5 view .LVU62
 268:apps/fs/src/fs_app.c **** }
ARM GAS  /tmp/ccJaibyu.s 			page 25


 331              		.loc 1 268 12 is_stmt 0 view .LVU63
 332 005c EBE7     		b	.L19
 333              	.L25:
 334 005e 00BF     		.align	2
 335              	.L24:
 336 0060 00000000 		.word	.LC7
 337 0064 04000000 		.word	.LC8
 338 0068 4C000000 		.word	.LC9
 339 006c 94000000 		.word	.LC10
 340 0070 00000000 		.word	.LANCHOR0
 341 0074 AC000000 		.word	.LC11
 342              		.cfi_endproc
 343              	.LFE0:
 345              		.section	.rodata.App_FS_Cfg,"a"
 346              		.align	2
 347              		.set	.LANCHOR0,. + 0
 350              	App_FS_Cfg:
 351 0000 0300     		.short	3
 352 0002 0300     		.short	3
 353 0004 0500     		.short	5
 354 0006 0500     		.short	5
 355 0008 0C00     		.short	12
 356 000a 0300     		.short	3
 357 000c 00020000 		.word	512
 358              		.text
 359              	.Letext0:
 360              		.file 2 "rtos/uC-CPU/ARM-Cortex-M/ARMv7-M/GNU/cpu.h"
 361              		.file 3 "rtos/uC-LIB/lib_mem.h"
 362              		.file 4 "rtos/uC-FS/Source/fs_type.h"
 363              		.file 5 "rtos/uC-FS/Dev/SD/SPI/../../../Source/fs_dev.h"
 364              		.file 6 "rtos/uC-FS/Source/fs_err.h"
 365              		.file 7 "rtos/uC-FS/Source/fs.h"
 366              		.file 8 "rtos/uC-FS/Dev/SD/SPI/../../../Source/fs_ctr.h"
 367              		.file 9 "rtos/uC-FS/Dev/SD/SPI/fs_dev_sd_spi.h"
 368              		.file 10 "rtos/uC-FS/Source/fs_vol.h"
ARM GAS  /tmp/ccJaibyu.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 fs_app.c
     /tmp/ccJaibyu.s:18     .rodata.App_FS_AddSD_SPI.str1.4:0000000000000000 $d
     /tmp/ccJaibyu.s:42     .text.App_FS_AddSD_SPI:0000000000000000 $t
     /tmp/ccJaibyu.s:49     .text.App_FS_AddSD_SPI:0000000000000000 App_FS_AddSD_SPI
     /tmp/ccJaibyu.s:200    .text.App_FS_AddSD_SPI:00000000000000cc $d
     /tmp/ccJaibyu.s:213    .rodata.App_FS_Init.str1.4:0000000000000000 $d
     /tmp/ccJaibyu.s:231    .text.App_FS_Init:0000000000000000 $t
     /tmp/ccJaibyu.s:238    .text.App_FS_Init:0000000000000000 App_FS_Init
     /tmp/ccJaibyu.s:336    .text.App_FS_Init:0000000000000060 $d
     /tmp/ccJaibyu.s:346    .rodata.App_FS_Cfg:0000000000000000 $d
     /tmp/ccJaibyu.s:350    .rodata.App_FS_Cfg:0000000000000000 App_FS_Cfg
                           .group:0000000000000000 wm4.0.0f5aa60db9403f389c005f20ecce4286
                           .group:0000000000000000 wm4.fs_app.h.40.587eb2e118e9764c610f8287c4a5bd21
                           .group:0000000000000000 wm4.cpu_core.h.51.7b35a59c319673f88ae4a256248776ec
                           .group:0000000000000000 wm4.cpu_def.h.46.baa122a2898bdc40bb50d1f21ead1515
                           .group:0000000000000000 wm4.cpu_cfg.h.45.38a6a562da8b04490c382a226238c57e
                           .group:0000000000000000 wm4.cpu.h.171.3cb15ee3ccb812cbfdf76d1fbfb9eda0
                           .group:0000000000000000 wm4.lib_def.h.66.6ab2a012067a8e1f4289db5765835062
                           .group:0000000000000000 wm4.cpu_core.h.143.d3b700e12b3a14ed3bee14c822b49a7d
                           .group:0000000000000000 wm4.app_cfg.h.2.3789fd7c8d66f929dd6bfa573df583d0
                           .group:0000000000000000 wm4.fs.h.42.4f6311a594ee5619f1ee7a9392eb7faa
                           .group:0000000000000000 wm4.lib_ascii.h.84.da234f9d4d202bba866fb26067887eec
                           .group:0000000000000000 wm4.fs_def.h.42.653ad677c23ef93c522ec84af681385d
                           .group:0000000000000000 wm4.fs_cfg.h.116.da4f8e9d0b9040a97ef3bf26c61e90fd
                           .group:0000000000000000 wm4.clk.h.99.39403db6a27321e53b261bbe20b56e1d
                           .group:0000000000000000 wm4.lib_str.h.60.32f6cabaf9bf142bd5051c414a220578
                           .group:0000000000000000 wm4.lib_cfg.h.40.b2958733f73e73af70f675ca0f89303e
                           .group:0000000000000000 wm4.lib_str.h.174.5879a17e9fe25aed81d2c99c1603a671
                           .group:0000000000000000 wm4.clk_cfg.h.45.428f260ed0fbcfa16fc822c67c85dade
                           .group:0000000000000000 wm4.clk.h.219.c24c7347fcc7691d3157fe73514cb366
                           .group:0000000000000000 wm4.fs_cfg_fs.h.176.c85074fbe881bfa594608376a65f4dc2
                           .group:0000000000000000 wm4.fs_type.h.42.0906d0337a2df5da9e27cec176b255f1
                           .group:0000000000000000 wm4.lib_mem.h.65.5ae3d762676d2043783018a38f269058
                           .group:0000000000000000 wm4.fs_type.h.139.acab71eb554f7e54c56a7894094211e6
                           .group:0000000000000000 wm4.fs_err.h.42.d52bfed31dff3d1419c5cf09952dee67
                           .group:0000000000000000 wm4.fs.h.97.1d629f0ba32b5622ab4e01a254bd98e8
                           .group:0000000000000000 wm4.fs_util.h.64.fe7812d6ca4c430dea2d2e705fd73c11
                           .group:0000000000000000 wm4.fs_dev_sd_spi.h.61.c7e90cfbafee903251d82d4271e26f25
                           .group:0000000000000000 wm4.fs_dev.h.42.457d0b7de373584765db5fbe40e7c30d
                           .group:0000000000000000 wm4.fs_ctr.h.42.9d1398cac157503ac8af114819f7782b
                           .group:0000000000000000 wm4.fs_dev.h.84.0b8682dc82cfd464ab0da30a876c8006
                           .group:0000000000000000 wm4.fs_dev_sd.h.51.8fab0a2de1a39903165fb5d84ccccc96
                           .group:0000000000000000 wm4.fs_dev_sd.h.87.291a6dec37946aecadc14eb5adc7a3fa
                           .group:0000000000000000 wm4.fs_app.h.157.f17b963f895f1d91e101169a5ba8a08d
                           .group:0000000000000000 wm4.fs_vol.h.42.6f34e6a2e2db310debaffbf0344054a2
                           .group:0000000000000000 wm4.fs_vol.h.83.fd165084f1d541edeb55ea0b6d9b6170

UNDEFINED SYMBOLS
APP_TRACE_DBG
FS_DevDrvAdd
FSDev_Open
FSVol_Open
FSDev_SD_SPI
FS_Init
