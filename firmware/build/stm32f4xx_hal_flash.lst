ARM GAS  /tmp/ccKFq4D8.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	FLASH_Program_DoubleWord:
  26              	.LVL0:
  27              	.LFB142:
  28              		.file 1 "bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c"
   1:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
   2:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   ******************************************************************************
   3:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @file    stm32f4xx_hal_flash.c
   4:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @author  MCD Application Team
   5:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *          This file provides firmware functions to manage the following 
   7:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *           + Program operations functions
   9:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *           + Memory Control functions 
  10:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *           + Peripheral Errors functions
  11:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         
  12:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   @verbatim
  13:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   ==============================================================================
  14:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                         ##### FLASH peripheral features #####
  15:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   ==============================================================================
  16:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****            
  17:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses 
  18:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations 
  19:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        and the read and write protection mechanisms.
  20:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       
  21:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  22:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        prefetch and cache lines. 
  23:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
  24:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   [..] The FLASH main features are:
  25:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (+) Flash memory read operations
  26:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (+) Flash memory program/erase operations
  27:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (+) Read / write protections
  28:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (+) Prefetch on I-Code
  29:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (+) 64 cache lines of 128 bits on I-Code
  30:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (+) 8 cache lines of 128 bits on D-Code
ARM GAS  /tmp/ccKFq4D8.s 			page 2


  31:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       
  32:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       
  33:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                      ##### How to use this driver #####
  34:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   ==============================================================================
  35:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     [..]                             
  36:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH 
  37:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       memory of all STM32F4xx devices.
  38:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
  39:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (#) FLASH Memory IO Programming functions: 
  40:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and 
  41:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  42:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****            (++) Program functions: byte, half word, word and double word
  43:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****            (++) There Two modes of programming :
  44:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  45:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  46:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
  47:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       (#) Interrupts and flags management functions : 
  48:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  49:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****            (++) Wait for last FLASH operation according to its status
  50:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****            (++) Get error flag status by calling HAL_SetErrorCode()          
  51:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
  52:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     [..] 
  53:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  54:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       to handle the following operations:
  55:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        (+) Set the latency
  56:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  57:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        (+) Enable/Disable the Instruction cache and the Data cache
  58:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        (+) Reset the Instruction cache and the Data cache
  59:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        (+) Enable/Disable the FLASH interrupts
  60:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****        (+) Monitor the FLASH flags status
  61:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****           
  62:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   @endverbatim
  63:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   ******************************************************************************
  64:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @attention
  65:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *
  66:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  67:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * All rights reserved.</center></h2>
  68:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *
  69:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  70:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * the "License"; You may not use this file except in compliance with the
  71:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * License. You may obtain a copy of the License at:
  72:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                        opensource.org/licenses/BSD-3-Clause
  73:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *
  74:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   ******************************************************************************
  75:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */ 
  76:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
  77:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  78:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #include "stm32f4xx_hal.h"
  79:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
  80:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @addtogroup STM32F4xx_HAL_Driver
  81:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
  82:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
  83:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
  84:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH FLASH
  85:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief FLASH HAL module driver
  86:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
  87:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
ARM GAS  /tmp/ccKFq4D8.s 			page 3


  88:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
  89:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  90:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
  91:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
  92:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Private define ------------------------------------------------------------*/
  93:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @addtogroup FLASH_Private_Constants
  94:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
  95:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
  96:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #define FLASH_TIMEOUT_VALUE       50000U /* 50 s */
  97:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
  98:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @}
  99:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */         
 100:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Private macro -------------------------------------------------------------*/
 101:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 102:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @addtogroup FLASH_Private_Variables
 103:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
 104:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 105:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Variable used for Erase sectors under interruption */
 106:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** FLASH_ProcessTypeDef pFlash;
 107:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 108:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @}
 109:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 110:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 111:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 112:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 113:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
 114:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 115:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Program operations */
 116:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 117:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_Word(uint32_t Address, uint32_t Data);
 118:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_HalfWord(uint32_t Address, uint16_t Data);
 119:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void   FLASH_Program_Byte(uint32_t Address, uint8_t Data);
 120:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void   FLASH_SetErrorCode(void);
 121:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 122:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout);
 123:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 124:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @}
 125:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 126:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 127:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 128:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 129:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
 130:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 131:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 132:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions 
 133:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  *  @brief   Programming operation functions 
 134:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  *
 135:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** @verbatim   
 136:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  ===============================================================================
 137:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                   ##### Programming operation functions #####
 138:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  ===============================================================================  
 139:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     [..]
 140:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH 
 141:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     program operations.
 142:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 143:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** @endverbatim
 144:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
ARM GAS  /tmp/ccKFq4D8.s 			page 4


 145:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 146:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 147:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 148:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Program byte, halfword, word or double word at a specified address
 149:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 150:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 151:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 152:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 153:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * 
 154:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 155:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 156:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 157:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 158:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 159:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 160:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Process Locked */
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 162:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 163:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 164:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 165:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 166:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Wait for last operation to be completed */
 167:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 168:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 169:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(status == HAL_OK)
 170:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 171:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 172:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 173:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*Program byte (8-bit) at a specified address.*/
 174:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_Byte(Address, (uint8_t) Data);
 175:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 176:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 177:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 178:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*Program halfword (16-bit) at a specified address.*/
 179:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_HalfWord(Address, (uint16_t) Data);
 180:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 181:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 182:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 183:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*Program word (32-bit) at a specified address.*/
 184:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_Word(Address, (uint32_t) Data);
 185:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 186:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     else
 187:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 188:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*Program double word (64-bit) at a specified address.*/
 189:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 190:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 191:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 192:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Wait for last operation to be completed */
 193:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 194:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 195:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* If the program operation is completed, disable the PG Bit */
 196:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);  
 197:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 198:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 199:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Process Unlocked */
 200:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 201:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
ARM GAS  /tmp/ccKFq4D8.s 			page 5


 202:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return status;
 203:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 204:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 205:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 206:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief   Program byte, halfword, word or double word at a specified address  with interrupt ena
 207:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 208:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_Type_Program
 209:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Address  specifies the address to be programmed.
 210:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed
 211:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * 
 212:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 213:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 214:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 215:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 216:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 217:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 218:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Process Locked */
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 220:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 221:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 222:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 223:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 224:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Enable End of FLASH Operation interrupt */
 225:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 226:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 227:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Enable Error source interrupt */
 228:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 229:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 230:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 231:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   pFlash.Address = Address;
 232:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 233:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 234:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 235:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /*Program byte (8-bit) at a specified address.*/
 236:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       FLASH_Program_Byte(Address, (uint8_t) Data);
 237:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 238:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 239:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 240:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /*Program halfword (16-bit) at a specified address.*/
 241:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_Program_HalfWord(Address, (uint16_t) Data);
 242:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 243:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 244:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 245:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /*Program word (32-bit) at a specified address.*/
 246:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_Program_Word(Address, (uint32_t) Data);
 247:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 248:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   else
 249:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 250:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /*Program double word (64-bit) at a specified address.*/
 251:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_Program_DoubleWord(Address, Data);
 252:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 253:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 254:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return status;
 255:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 256:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 257:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 258:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief This function handles FLASH interrupt request.
ARM GAS  /tmp/ccKFq4D8.s 			page 6


 259:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 260:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 261:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 262:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 263:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 264:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 265:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check FLASH operation error flags */
 266:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #if defined(FLASH_SR_RDERR) 
 267:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 268:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 269:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #else
 270:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 271:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
 272:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #endif /* FLASH_SR_RDERR */
 273:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 274:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 275:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 276:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*return the faulty sector*/
 277:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       addresstmp = pFlash.Sector;
 278:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       pFlash.Sector = 0xFFFFFFFFU;
 279:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 280:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 281:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 282:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*return the faulty bank*/
 283:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       addresstmp = pFlash.Bank;
 284:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 285:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     else
 286:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 287:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*return the faulty address*/
 288:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       addresstmp = pFlash.Address;
 289:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 290:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 291:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /*Save the Error code*/
 292:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_SetErrorCode();
 293:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 294:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* FLASH error interrupt user callback */
 295:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(addresstmp);
 296:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 297:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /*Stop the procedure ongoing*/
 298:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 299:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 300:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 301:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 302:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 303:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 304:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 305:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 306:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 307:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 308:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 309:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /*Nb of sector to erased can be decreased*/
 310:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       pFlash.NbSectorsToErase--;
 311:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       
 312:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       /* Check if there are still sectors to erase*/
 313:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       if(pFlash.NbSectorsToErase != 0U)
 314:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 315:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
ARM GAS  /tmp/ccKFq4D8.s 			page 7


 316:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /*Indicate user which sector has been erased*/
 317:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(addresstmp);
 318:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         
 319:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /*Increment sector number*/
 320:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         pFlash.Sector++;
 321:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
 322:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 323:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 324:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       else
 325:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 326:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /*No more sectors to Erase, user callback can be called.*/
 327:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /*Reset Sector and stop Erase sectors procedure*/
 328:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 329:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 330:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         
 331:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /* Flush the caches to be sure of the data consistency */
 332:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         FLASH_FlushCaches() ;
 333:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                 
 334:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 335:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(addresstmp);
 336:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 337:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 338:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     else 
 339:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 340:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 341:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 342:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /* MassErase ended. Return the selected bank */
 343:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /* Flush the caches to be sure of the data consistency */
 344:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         FLASH_FlushCaches() ;
 345:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 346:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 347:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 348:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 349:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       else
 350:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 351:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /*Program ended. Return the selected address*/
 352:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /* FLASH EOP interrupt user callback */
 353:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 354:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 355:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 356:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 357:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 358:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 359:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 360:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 361:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Operation is completed, disable the PG, SER, SNB and MER Bits */
 362:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 363:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 364:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Disable End of FLASH Operation interrupt */
 365:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 366:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 367:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Disable Error source interrupt */
 368:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 369:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 370:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Process Unlocked */
 371:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 372:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
ARM GAS  /tmp/ccKFq4D8.s 			page 8


 373:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 374:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 375:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 376:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback
 377:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 378:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                  Mass Erase: Bank number which has been requested to erase
 379:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                  Sectors Erase: Sector which has been erased 
 380:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
 381:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                  Program: Address which was selected for data program
 382:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 383:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 384:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 385:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 386:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 387:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   UNUSED(ReturnValue);
 388:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 389:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 390:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    */ 
 391:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 392:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 393:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 394:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback
 395:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 396:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                 Mass Erase: Bank number which has been requested to erase
 397:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                 Sectors Erase: Sector number which returned an error
 398:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *                 Program: Address which was selected for data program
 399:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 400:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 401:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 402:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 403:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 404:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   UNUSED(ReturnValue);
 405:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 406:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 407:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    */ 
 408:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 409:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 410:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 411:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @}
 412:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 413:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 414:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions 
 415:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  *  @brief   management functions 
 416:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  *
 417:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** @verbatim   
 418:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  ===============================================================================
 419:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                       ##### Peripheral Control functions #####
 420:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  ===============================================================================  
 421:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     [..]
 422:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH 
 423:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     memory operations.
 424:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 425:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** @endverbatim
 426:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
 427:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 428:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 429:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
ARM GAS  /tmp/ccKFq4D8.s 			page 9


 430:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Unlock the FLASH control register access
 431:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 432:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 433:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 434:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 435:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 436:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 437:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 438:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 439:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 440:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 441:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 442:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 443:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Verify Flash is unlocked */
 444:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 445:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 446:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       status = HAL_ERROR;
 447:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 448:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 449:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 450:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return status;
 451:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 452:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 453:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 454:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Locks the FLASH control register access
 455:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 456:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 457:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 458:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 459:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 460:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 461:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 462:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;  
 463:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 464:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 465:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 466:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Unlock the FLASH Option Control Registers access.
 467:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 468:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 469:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 470:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 471:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 472:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 473:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 474:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 475:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 476:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 477:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   else
 478:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 479:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     return HAL_ERROR;
 480:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }  
 481:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 482:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;  
 483:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 484:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 485:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 486:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Lock the FLASH Option Control Registers access.
ARM GAS  /tmp/ccKFq4D8.s 			page 10


 487:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status 
 488:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 489:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 490:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 491:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 492:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 493:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 494:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;  
 495:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 496:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 497:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 498:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Launch the option byte loading.
 499:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 500:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 501:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 502:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 503:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
 504:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 505:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 506:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Wait for last operation to be completed */
 507:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 508:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 509:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 510:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 511:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @}
 512:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 513:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 514:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions 
 515:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  *  @brief   Peripheral Errors functions 
 516:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  *
 517:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** @verbatim   
 518:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  ===============================================================================
 519:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 520:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****  ===============================================================================  
 521:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     [..]
 522:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 523:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 524:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** @endverbatim
 525:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @{
 526:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 527:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 528:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 529:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 530:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval FLASH_ErrorCode: The returned value can be a combination of:
 531:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_RD: FLASH Read Protection error flag (PCROP)
 532:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGS: FLASH Programming Sequence error flag 
 533:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGP: FLASH Programming Parallelism error flag  
 534:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
 535:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
 536:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
 537:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 538:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 539:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** { 
 540:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    return pFlash.ErrorCode;
 541:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }  
 542:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 543:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
ARM GAS  /tmp/ccKFq4D8.s 			page 11


 544:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @}
 545:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */    
 546:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 547:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 548:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 549:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Timeout maximum flash operationtimeout
 550:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval HAL Status
 551:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 552:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 553:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** { 
 554:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   uint32_t tickstart = 0U;
 555:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 556:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Clear Error Code */
 557:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 558:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 559:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 560:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 561:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****      flag will be set */
 562:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Get tick */
 563:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   tickstart = HAL_GetTick();
 564:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 565:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 566:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   { 
 567:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     if(Timeout != HAL_MAX_DELAY)
 568:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 569:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 570:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 571:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         return HAL_TIMEOUT;
 572:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 573:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     } 
 574:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 575:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 576:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check FLASH End of Operation flag  */
 577:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 578:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 579:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 580:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 581:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 582:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #if defined(FLASH_SR_RDERR)  
 583:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 584:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 585:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #else
 586:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 587:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
 588:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #endif /* FLASH_SR_RDERR */
 589:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 590:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /*Save the error code*/
 591:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_SetErrorCode();
 592:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     return HAL_ERROR;
 593:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 594:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 595:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* If there is no error flag set */
 596:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   return HAL_OK;
 597:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 598:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }  
 599:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 600:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
ARM GAS  /tmp/ccKFq4D8.s 			page 12


 601:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Program a double word (64-bit) at a specified address.
 602:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 603:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         2.7V to 3.6V and Vpp in the range 7V to 9V.
 604:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *
 605:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 606:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 607:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *  
 608:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 609:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 610:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 611:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 612:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 613:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
  29              		.loc 1 613 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 613 1 is_stmt 0 view .LVU1
  35 0000 10B4     		push	{r4}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 4, -4
 614:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 615:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
  39              		.loc 1 615 3 is_stmt 1 view .LVU2
 616:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 617:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 618:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
  40              		.loc 1 618 3 view .LVU3
  41 0002 0A49     		ldr	r1, .L3
  42 0004 0C69     		ldr	r4, [r1, #16]
  43 0006 24F44074 		bic	r4, r4, #768
  44 000a 0C61     		str	r4, [r1, #16]
 619:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
  45              		.loc 1 619 3 view .LVU4
  46              		.loc 1 619 13 is_stmt 0 view .LVU5
  47 000c 0C69     		ldr	r4, [r1, #16]
  48 000e 44F44074 		orr	r4, r4, #768
  49 0012 0C61     		str	r4, [r1, #16]
 620:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
  50              		.loc 1 620 3 is_stmt 1 view .LVU6
  51              		.loc 1 620 13 is_stmt 0 view .LVU7
  52 0014 0C69     		ldr	r4, [r1, #16]
  53 0016 44F00104 		orr	r4, r4, #1
  54 001a 0C61     		str	r4, [r1, #16]
 621:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 622:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Program first word */
 623:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *(__IO uint32_t*)Address = (uint32_t)Data;
  55              		.loc 1 623 3 is_stmt 1 view .LVU8
  56              		.loc 1 623 28 is_stmt 0 view .LVU9
  57 001c 0260     		str	r2, [r0]
 624:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 625:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Barrier to ensure programming is performed in 2 steps, in right order
 626:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     (independently of compiler optimization behavior) */
 627:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   __ISB();
  58              		.loc 1 627 3 is_stmt 1 view .LVU10
ARM GAS  /tmp/ccKFq4D8.s 			page 13


  59              	.LBB4:
  60              	.LBI4:
  61              		.file 2 "cmsis/Include/cmsis_gcc.h"
   1:cmsis/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:cmsis/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:cmsis/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:cmsis/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:cmsis/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:cmsis/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:cmsis/Include/cmsis_gcc.h **** /*
   8:cmsis/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:cmsis/Include/cmsis_gcc.h ****  *
  10:cmsis/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:cmsis/Include/cmsis_gcc.h ****  *
  12:cmsis/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:cmsis/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:cmsis/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:cmsis/Include/cmsis_gcc.h ****  *
  16:cmsis/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:cmsis/Include/cmsis_gcc.h ****  *
  18:cmsis/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:cmsis/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:cmsis/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:cmsis/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:cmsis/Include/cmsis_gcc.h ****  * limitations under the License.
  23:cmsis/Include/cmsis_gcc.h ****  */
  24:cmsis/Include/cmsis_gcc.h **** 
  25:cmsis/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:cmsis/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:cmsis/Include/cmsis_gcc.h **** 
  28:cmsis/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:cmsis/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:cmsis/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:cmsis/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:cmsis/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:cmsis/Include/cmsis_gcc.h **** 
  34:cmsis/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:cmsis/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:cmsis/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:cmsis/Include/cmsis_gcc.h **** #endif
  38:cmsis/Include/cmsis_gcc.h **** 
  39:cmsis/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:cmsis/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:cmsis/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:cmsis/Include/cmsis_gcc.h **** #endif
  43:cmsis/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:cmsis/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:cmsis/Include/cmsis_gcc.h **** #endif
  46:cmsis/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:cmsis/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:cmsis/Include/cmsis_gcc.h **** #endif
  49:cmsis/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:cmsis/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:cmsis/Include/cmsis_gcc.h **** #endif                                           
  52:cmsis/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:cmsis/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:cmsis/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccKFq4D8.s 			page 14


  55:cmsis/Include/cmsis_gcc.h **** #ifndef   __USED
  56:cmsis/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:cmsis/Include/cmsis_gcc.h **** #endif
  58:cmsis/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:cmsis/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:cmsis/Include/cmsis_gcc.h **** #endif
  61:cmsis/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:cmsis/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:cmsis/Include/cmsis_gcc.h **** #endif
  64:cmsis/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:cmsis/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:cmsis/Include/cmsis_gcc.h **** #endif
  67:cmsis/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:cmsis/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:cmsis/Include/cmsis_gcc.h **** #endif
  70:cmsis/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:cmsis/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:cmsis/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:cmsis/Include/cmsis_gcc.h **** #endif
  78:cmsis/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:cmsis/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:cmsis/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:cmsis/Include/cmsis_gcc.h **** #endif
  86:cmsis/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:cmsis/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:cmsis/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:cmsis/Include/cmsis_gcc.h **** #endif
  94:cmsis/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:cmsis/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:cmsis/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:cmsis/Include/cmsis_gcc.h **** #endif
 102:cmsis/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:cmsis/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:cmsis/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:cmsis/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:cmsis/Include/cmsis_gcc.h **** #endif
 110:cmsis/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:cmsis/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
ARM GAS  /tmp/ccKFq4D8.s 			page 15


 112:cmsis/Include/cmsis_gcc.h **** #endif
 113:cmsis/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:cmsis/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:cmsis/Include/cmsis_gcc.h **** #endif
 116:cmsis/Include/cmsis_gcc.h **** 
 117:cmsis/Include/cmsis_gcc.h **** 
 118:cmsis/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:cmsis/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:cmsis/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:cmsis/Include/cmsis_gcc.h ****   @{
 122:cmsis/Include/cmsis_gcc.h ****  */
 123:cmsis/Include/cmsis_gcc.h **** 
 124:cmsis/Include/cmsis_gcc.h **** /**
 125:cmsis/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:cmsis/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:cmsis/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:cmsis/Include/cmsis_gcc.h ****  */
 129:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:cmsis/Include/cmsis_gcc.h **** {
 131:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:cmsis/Include/cmsis_gcc.h **** }
 133:cmsis/Include/cmsis_gcc.h **** 
 134:cmsis/Include/cmsis_gcc.h **** 
 135:cmsis/Include/cmsis_gcc.h **** /**
 136:cmsis/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:cmsis/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:cmsis/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:cmsis/Include/cmsis_gcc.h ****  */
 140:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:cmsis/Include/cmsis_gcc.h **** {
 142:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:cmsis/Include/cmsis_gcc.h **** }
 144:cmsis/Include/cmsis_gcc.h **** 
 145:cmsis/Include/cmsis_gcc.h **** 
 146:cmsis/Include/cmsis_gcc.h **** /**
 147:cmsis/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:cmsis/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:cmsis/Include/cmsis_gcc.h ****   \return               Control Register value
 150:cmsis/Include/cmsis_gcc.h ****  */
 151:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:cmsis/Include/cmsis_gcc.h **** {
 153:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 154:cmsis/Include/cmsis_gcc.h **** 
 155:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:cmsis/Include/cmsis_gcc.h ****   return(result);
 157:cmsis/Include/cmsis_gcc.h **** }
 158:cmsis/Include/cmsis_gcc.h **** 
 159:cmsis/Include/cmsis_gcc.h **** 
 160:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:cmsis/Include/cmsis_gcc.h **** /**
 162:cmsis/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:cmsis/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:cmsis/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:cmsis/Include/cmsis_gcc.h ****  */
 166:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:cmsis/Include/cmsis_gcc.h **** {
 168:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccKFq4D8.s 			page 16


 169:cmsis/Include/cmsis_gcc.h **** 
 170:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:cmsis/Include/cmsis_gcc.h ****   return(result);
 172:cmsis/Include/cmsis_gcc.h **** }
 173:cmsis/Include/cmsis_gcc.h **** #endif
 174:cmsis/Include/cmsis_gcc.h **** 
 175:cmsis/Include/cmsis_gcc.h **** 
 176:cmsis/Include/cmsis_gcc.h **** /**
 177:cmsis/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:cmsis/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:cmsis/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:cmsis/Include/cmsis_gcc.h ****  */
 181:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:cmsis/Include/cmsis_gcc.h **** {
 183:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:cmsis/Include/cmsis_gcc.h **** }
 185:cmsis/Include/cmsis_gcc.h **** 
 186:cmsis/Include/cmsis_gcc.h **** 
 187:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:cmsis/Include/cmsis_gcc.h **** /**
 189:cmsis/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:cmsis/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:cmsis/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:cmsis/Include/cmsis_gcc.h ****  */
 193:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:cmsis/Include/cmsis_gcc.h **** {
 195:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:cmsis/Include/cmsis_gcc.h **** }
 197:cmsis/Include/cmsis_gcc.h **** #endif
 198:cmsis/Include/cmsis_gcc.h **** 
 199:cmsis/Include/cmsis_gcc.h **** 
 200:cmsis/Include/cmsis_gcc.h **** /**
 201:cmsis/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:cmsis/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:cmsis/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:cmsis/Include/cmsis_gcc.h ****  */
 205:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:cmsis/Include/cmsis_gcc.h **** {
 207:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 208:cmsis/Include/cmsis_gcc.h **** 
 209:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:cmsis/Include/cmsis_gcc.h ****   return(result);
 211:cmsis/Include/cmsis_gcc.h **** }
 212:cmsis/Include/cmsis_gcc.h **** 
 213:cmsis/Include/cmsis_gcc.h **** 
 214:cmsis/Include/cmsis_gcc.h **** /**
 215:cmsis/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:cmsis/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:cmsis/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:cmsis/Include/cmsis_gcc.h ****  */
 219:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:cmsis/Include/cmsis_gcc.h **** {
 221:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 222:cmsis/Include/cmsis_gcc.h **** 
 223:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:cmsis/Include/cmsis_gcc.h ****   return(result);
 225:cmsis/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccKFq4D8.s 			page 17


 226:cmsis/Include/cmsis_gcc.h **** 
 227:cmsis/Include/cmsis_gcc.h **** 
 228:cmsis/Include/cmsis_gcc.h **** /**
 229:cmsis/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:cmsis/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:cmsis/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:cmsis/Include/cmsis_gcc.h ****  */
 233:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:cmsis/Include/cmsis_gcc.h **** {
 235:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 236:cmsis/Include/cmsis_gcc.h **** 
 237:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:cmsis/Include/cmsis_gcc.h ****   return(result);
 239:cmsis/Include/cmsis_gcc.h **** }
 240:cmsis/Include/cmsis_gcc.h **** 
 241:cmsis/Include/cmsis_gcc.h **** 
 242:cmsis/Include/cmsis_gcc.h **** /**
 243:cmsis/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:cmsis/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:cmsis/Include/cmsis_gcc.h ****  */
 247:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:cmsis/Include/cmsis_gcc.h **** {
 249:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 250:cmsis/Include/cmsis_gcc.h **** 
 251:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:cmsis/Include/cmsis_gcc.h ****   return(result);
 253:cmsis/Include/cmsis_gcc.h **** }
 254:cmsis/Include/cmsis_gcc.h **** 
 255:cmsis/Include/cmsis_gcc.h **** 
 256:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:cmsis/Include/cmsis_gcc.h **** /**
 258:cmsis/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:cmsis/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:cmsis/Include/cmsis_gcc.h ****  */
 262:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:cmsis/Include/cmsis_gcc.h **** {
 264:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 265:cmsis/Include/cmsis_gcc.h **** 
 266:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:cmsis/Include/cmsis_gcc.h ****   return(result);
 268:cmsis/Include/cmsis_gcc.h **** }
 269:cmsis/Include/cmsis_gcc.h **** #endif
 270:cmsis/Include/cmsis_gcc.h **** 
 271:cmsis/Include/cmsis_gcc.h **** 
 272:cmsis/Include/cmsis_gcc.h **** /**
 273:cmsis/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:cmsis/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:cmsis/Include/cmsis_gcc.h ****  */
 277:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:cmsis/Include/cmsis_gcc.h **** {
 279:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:cmsis/Include/cmsis_gcc.h **** }
 281:cmsis/Include/cmsis_gcc.h **** 
 282:cmsis/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKFq4D8.s 			page 18


 283:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:cmsis/Include/cmsis_gcc.h **** /**
 285:cmsis/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:cmsis/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:cmsis/Include/cmsis_gcc.h ****  */
 289:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:cmsis/Include/cmsis_gcc.h **** {
 291:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:cmsis/Include/cmsis_gcc.h **** }
 293:cmsis/Include/cmsis_gcc.h **** #endif
 294:cmsis/Include/cmsis_gcc.h **** 
 295:cmsis/Include/cmsis_gcc.h **** 
 296:cmsis/Include/cmsis_gcc.h **** /**
 297:cmsis/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:cmsis/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:cmsis/Include/cmsis_gcc.h ****  */
 301:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:cmsis/Include/cmsis_gcc.h **** {
 303:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 304:cmsis/Include/cmsis_gcc.h **** 
 305:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:cmsis/Include/cmsis_gcc.h ****   return(result);
 307:cmsis/Include/cmsis_gcc.h **** }
 308:cmsis/Include/cmsis_gcc.h **** 
 309:cmsis/Include/cmsis_gcc.h **** 
 310:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:cmsis/Include/cmsis_gcc.h **** /**
 312:cmsis/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:cmsis/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:cmsis/Include/cmsis_gcc.h ****  */
 316:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:cmsis/Include/cmsis_gcc.h **** {
 318:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 319:cmsis/Include/cmsis_gcc.h **** 
 320:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:cmsis/Include/cmsis_gcc.h ****   return(result);
 322:cmsis/Include/cmsis_gcc.h **** }
 323:cmsis/Include/cmsis_gcc.h **** #endif
 324:cmsis/Include/cmsis_gcc.h **** 
 325:cmsis/Include/cmsis_gcc.h **** 
 326:cmsis/Include/cmsis_gcc.h **** /**
 327:cmsis/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:cmsis/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:cmsis/Include/cmsis_gcc.h ****  */
 331:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:cmsis/Include/cmsis_gcc.h **** {
 333:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:cmsis/Include/cmsis_gcc.h **** }
 335:cmsis/Include/cmsis_gcc.h **** 
 336:cmsis/Include/cmsis_gcc.h **** 
 337:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:cmsis/Include/cmsis_gcc.h **** /**
 339:cmsis/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
ARM GAS  /tmp/ccKFq4D8.s 			page 19


 340:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:cmsis/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:cmsis/Include/cmsis_gcc.h ****  */
 343:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:cmsis/Include/cmsis_gcc.h **** {
 345:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:cmsis/Include/cmsis_gcc.h **** }
 347:cmsis/Include/cmsis_gcc.h **** #endif
 348:cmsis/Include/cmsis_gcc.h **** 
 349:cmsis/Include/cmsis_gcc.h **** 
 350:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:cmsis/Include/cmsis_gcc.h **** /**
 352:cmsis/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:cmsis/Include/cmsis_gcc.h ****   \return               SP Register value
 355:cmsis/Include/cmsis_gcc.h ****  */
 356:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:cmsis/Include/cmsis_gcc.h **** {
 358:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 359:cmsis/Include/cmsis_gcc.h **** 
 360:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:cmsis/Include/cmsis_gcc.h ****   return(result);
 362:cmsis/Include/cmsis_gcc.h **** }
 363:cmsis/Include/cmsis_gcc.h **** 
 364:cmsis/Include/cmsis_gcc.h **** 
 365:cmsis/Include/cmsis_gcc.h **** /**
 366:cmsis/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:cmsis/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:cmsis/Include/cmsis_gcc.h ****  */
 370:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:cmsis/Include/cmsis_gcc.h **** {
 372:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:cmsis/Include/cmsis_gcc.h **** }
 374:cmsis/Include/cmsis_gcc.h **** #endif
 375:cmsis/Include/cmsis_gcc.h **** 
 376:cmsis/Include/cmsis_gcc.h **** 
 377:cmsis/Include/cmsis_gcc.h **** /**
 378:cmsis/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:cmsis/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:cmsis/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:cmsis/Include/cmsis_gcc.h ****  */
 382:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:cmsis/Include/cmsis_gcc.h **** {
 384:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 385:cmsis/Include/cmsis_gcc.h **** 
 386:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:cmsis/Include/cmsis_gcc.h ****   return(result);
 388:cmsis/Include/cmsis_gcc.h **** }
 389:cmsis/Include/cmsis_gcc.h **** 
 390:cmsis/Include/cmsis_gcc.h **** 
 391:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:cmsis/Include/cmsis_gcc.h **** /**
 393:cmsis/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:cmsis/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:cmsis/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:cmsis/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccKFq4D8.s 			page 20


 397:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:cmsis/Include/cmsis_gcc.h **** {
 399:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 400:cmsis/Include/cmsis_gcc.h **** 
 401:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:cmsis/Include/cmsis_gcc.h ****   return(result);
 403:cmsis/Include/cmsis_gcc.h **** }
 404:cmsis/Include/cmsis_gcc.h **** #endif
 405:cmsis/Include/cmsis_gcc.h **** 
 406:cmsis/Include/cmsis_gcc.h **** 
 407:cmsis/Include/cmsis_gcc.h **** /**
 408:cmsis/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:cmsis/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:cmsis/Include/cmsis_gcc.h ****  */
 412:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:cmsis/Include/cmsis_gcc.h **** {
 414:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:cmsis/Include/cmsis_gcc.h **** }
 416:cmsis/Include/cmsis_gcc.h **** 
 417:cmsis/Include/cmsis_gcc.h **** 
 418:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:cmsis/Include/cmsis_gcc.h **** /**
 420:cmsis/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:cmsis/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:cmsis/Include/cmsis_gcc.h ****  */
 424:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:cmsis/Include/cmsis_gcc.h **** {
 426:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:cmsis/Include/cmsis_gcc.h **** }
 428:cmsis/Include/cmsis_gcc.h **** #endif
 429:cmsis/Include/cmsis_gcc.h **** 
 430:cmsis/Include/cmsis_gcc.h **** 
 431:cmsis/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:cmsis/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:cmsis/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:cmsis/Include/cmsis_gcc.h **** /**
 435:cmsis/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:cmsis/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:cmsis/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:cmsis/Include/cmsis_gcc.h ****  */
 439:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:cmsis/Include/cmsis_gcc.h **** {
 441:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:cmsis/Include/cmsis_gcc.h **** }
 443:cmsis/Include/cmsis_gcc.h **** 
 444:cmsis/Include/cmsis_gcc.h **** 
 445:cmsis/Include/cmsis_gcc.h **** /**
 446:cmsis/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:cmsis/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:cmsis/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:cmsis/Include/cmsis_gcc.h ****  */
 450:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:cmsis/Include/cmsis_gcc.h **** {
 452:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:cmsis/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccKFq4D8.s 			page 21


 454:cmsis/Include/cmsis_gcc.h **** 
 455:cmsis/Include/cmsis_gcc.h **** 
 456:cmsis/Include/cmsis_gcc.h **** /**
 457:cmsis/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:cmsis/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:cmsis/Include/cmsis_gcc.h ****  */
 461:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:cmsis/Include/cmsis_gcc.h **** {
 463:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 464:cmsis/Include/cmsis_gcc.h **** 
 465:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:cmsis/Include/cmsis_gcc.h ****   return(result);
 467:cmsis/Include/cmsis_gcc.h **** }
 468:cmsis/Include/cmsis_gcc.h **** 
 469:cmsis/Include/cmsis_gcc.h **** 
 470:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:cmsis/Include/cmsis_gcc.h **** /**
 472:cmsis/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:cmsis/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:cmsis/Include/cmsis_gcc.h ****  */
 476:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:cmsis/Include/cmsis_gcc.h **** {
 478:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 479:cmsis/Include/cmsis_gcc.h **** 
 480:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:cmsis/Include/cmsis_gcc.h ****   return(result);
 482:cmsis/Include/cmsis_gcc.h **** }
 483:cmsis/Include/cmsis_gcc.h **** #endif
 484:cmsis/Include/cmsis_gcc.h **** 
 485:cmsis/Include/cmsis_gcc.h **** 
 486:cmsis/Include/cmsis_gcc.h **** /**
 487:cmsis/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:cmsis/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:cmsis/Include/cmsis_gcc.h ****  */
 491:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:cmsis/Include/cmsis_gcc.h **** {
 493:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:cmsis/Include/cmsis_gcc.h **** }
 495:cmsis/Include/cmsis_gcc.h **** 
 496:cmsis/Include/cmsis_gcc.h **** 
 497:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:cmsis/Include/cmsis_gcc.h **** /**
 499:cmsis/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:cmsis/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:cmsis/Include/cmsis_gcc.h ****  */
 503:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:cmsis/Include/cmsis_gcc.h **** {
 505:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:cmsis/Include/cmsis_gcc.h **** }
 507:cmsis/Include/cmsis_gcc.h **** #endif
 508:cmsis/Include/cmsis_gcc.h **** 
 509:cmsis/Include/cmsis_gcc.h **** 
 510:cmsis/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccKFq4D8.s 			page 22


 511:cmsis/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:cmsis/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:cmsis/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:cmsis/Include/cmsis_gcc.h ****  */
 516:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:cmsis/Include/cmsis_gcc.h **** {
 518:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:cmsis/Include/cmsis_gcc.h **** }
 520:cmsis/Include/cmsis_gcc.h **** 
 521:cmsis/Include/cmsis_gcc.h **** 
 522:cmsis/Include/cmsis_gcc.h **** /**
 523:cmsis/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:cmsis/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:cmsis/Include/cmsis_gcc.h ****  */
 527:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:cmsis/Include/cmsis_gcc.h **** {
 529:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 530:cmsis/Include/cmsis_gcc.h **** 
 531:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:cmsis/Include/cmsis_gcc.h ****   return(result);
 533:cmsis/Include/cmsis_gcc.h **** }
 534:cmsis/Include/cmsis_gcc.h **** 
 535:cmsis/Include/cmsis_gcc.h **** 
 536:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:cmsis/Include/cmsis_gcc.h **** /**
 538:cmsis/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:cmsis/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:cmsis/Include/cmsis_gcc.h ****  */
 542:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:cmsis/Include/cmsis_gcc.h **** {
 544:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 545:cmsis/Include/cmsis_gcc.h **** 
 546:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:cmsis/Include/cmsis_gcc.h ****   return(result);
 548:cmsis/Include/cmsis_gcc.h **** }
 549:cmsis/Include/cmsis_gcc.h **** #endif
 550:cmsis/Include/cmsis_gcc.h **** 
 551:cmsis/Include/cmsis_gcc.h **** 
 552:cmsis/Include/cmsis_gcc.h **** /**
 553:cmsis/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:cmsis/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:cmsis/Include/cmsis_gcc.h ****  */
 557:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:cmsis/Include/cmsis_gcc.h **** {
 559:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:cmsis/Include/cmsis_gcc.h **** }
 561:cmsis/Include/cmsis_gcc.h **** 
 562:cmsis/Include/cmsis_gcc.h **** 
 563:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:cmsis/Include/cmsis_gcc.h **** /**
 565:cmsis/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:cmsis/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
ARM GAS  /tmp/ccKFq4D8.s 			page 23


 568:cmsis/Include/cmsis_gcc.h ****  */
 569:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:cmsis/Include/cmsis_gcc.h **** {
 571:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:cmsis/Include/cmsis_gcc.h **** }
 573:cmsis/Include/cmsis_gcc.h **** #endif
 574:cmsis/Include/cmsis_gcc.h **** 
 575:cmsis/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:cmsis/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:cmsis/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:cmsis/Include/cmsis_gcc.h **** 
 579:cmsis/Include/cmsis_gcc.h **** 
 580:cmsis/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:cmsis/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:cmsis/Include/cmsis_gcc.h **** 
 583:cmsis/Include/cmsis_gcc.h **** /**
 584:cmsis/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:cmsis/Include/cmsis_gcc.h ****   mode.
 588:cmsis/Include/cmsis_gcc.h ****   
 589:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:cmsis/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:cmsis/Include/cmsis_gcc.h ****  */
 592:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:cmsis/Include/cmsis_gcc.h **** {
 594:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:cmsis/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:cmsis/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:cmsis/Include/cmsis_gcc.h ****   return 0U;
 598:cmsis/Include/cmsis_gcc.h **** #else
 599:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 600:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:cmsis/Include/cmsis_gcc.h ****   return result;
 602:cmsis/Include/cmsis_gcc.h **** #endif
 603:cmsis/Include/cmsis_gcc.h **** }
 604:cmsis/Include/cmsis_gcc.h **** 
 605:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:cmsis/Include/cmsis_gcc.h **** /**
 607:cmsis/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:cmsis/Include/cmsis_gcc.h **** 
 611:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:cmsis/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:cmsis/Include/cmsis_gcc.h ****  */
 614:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:cmsis/Include/cmsis_gcc.h **** {
 616:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:cmsis/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:cmsis/Include/cmsis_gcc.h ****   return 0U;
 619:cmsis/Include/cmsis_gcc.h **** #else
 620:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 621:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:cmsis/Include/cmsis_gcc.h ****   return result;
 623:cmsis/Include/cmsis_gcc.h **** #endif
 624:cmsis/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccKFq4D8.s 			page 24


 625:cmsis/Include/cmsis_gcc.h **** #endif
 626:cmsis/Include/cmsis_gcc.h **** 
 627:cmsis/Include/cmsis_gcc.h **** 
 628:cmsis/Include/cmsis_gcc.h **** /**
 629:cmsis/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:cmsis/Include/cmsis_gcc.h ****   mode.
 633:cmsis/Include/cmsis_gcc.h ****   
 634:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:cmsis/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:cmsis/Include/cmsis_gcc.h ****  */
 637:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:cmsis/Include/cmsis_gcc.h **** {
 639:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:cmsis/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:cmsis/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:cmsis/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:cmsis/Include/cmsis_gcc.h **** #else
 644:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:cmsis/Include/cmsis_gcc.h **** #endif
 646:cmsis/Include/cmsis_gcc.h **** }
 647:cmsis/Include/cmsis_gcc.h **** 
 648:cmsis/Include/cmsis_gcc.h **** 
 649:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:cmsis/Include/cmsis_gcc.h **** /**
 651:cmsis/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:cmsis/Include/cmsis_gcc.h **** 
 655:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:cmsis/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:cmsis/Include/cmsis_gcc.h ****  */
 658:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:cmsis/Include/cmsis_gcc.h **** {
 660:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:cmsis/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:cmsis/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:cmsis/Include/cmsis_gcc.h **** #else
 664:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:cmsis/Include/cmsis_gcc.h **** #endif
 666:cmsis/Include/cmsis_gcc.h **** }
 667:cmsis/Include/cmsis_gcc.h **** #endif
 668:cmsis/Include/cmsis_gcc.h **** 
 669:cmsis/Include/cmsis_gcc.h **** 
 670:cmsis/Include/cmsis_gcc.h **** /**
 671:cmsis/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:cmsis/Include/cmsis_gcc.h ****   mode.
 675:cmsis/Include/cmsis_gcc.h **** 
 676:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:cmsis/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:cmsis/Include/cmsis_gcc.h ****  */
 679:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:cmsis/Include/cmsis_gcc.h **** {
 681:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
ARM GAS  /tmp/ccKFq4D8.s 			page 25


 682:cmsis/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:cmsis/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:cmsis/Include/cmsis_gcc.h ****   return 0U;
 685:cmsis/Include/cmsis_gcc.h **** #else
 686:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 687:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:cmsis/Include/cmsis_gcc.h ****   return result;
 689:cmsis/Include/cmsis_gcc.h **** #endif
 690:cmsis/Include/cmsis_gcc.h **** }
 691:cmsis/Include/cmsis_gcc.h **** 
 692:cmsis/Include/cmsis_gcc.h **** 
 693:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:cmsis/Include/cmsis_gcc.h **** /**
 695:cmsis/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:cmsis/Include/cmsis_gcc.h **** 
 699:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:cmsis/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:cmsis/Include/cmsis_gcc.h ****  */
 702:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:cmsis/Include/cmsis_gcc.h **** {
 704:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:cmsis/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:cmsis/Include/cmsis_gcc.h ****   return 0U;
 707:cmsis/Include/cmsis_gcc.h **** #else
 708:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 709:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:cmsis/Include/cmsis_gcc.h ****   return result;
 711:cmsis/Include/cmsis_gcc.h **** #endif
 712:cmsis/Include/cmsis_gcc.h **** }
 713:cmsis/Include/cmsis_gcc.h **** #endif
 714:cmsis/Include/cmsis_gcc.h **** 
 715:cmsis/Include/cmsis_gcc.h **** 
 716:cmsis/Include/cmsis_gcc.h **** /**
 717:cmsis/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:cmsis/Include/cmsis_gcc.h ****   mode.
 721:cmsis/Include/cmsis_gcc.h **** 
 722:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:cmsis/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:cmsis/Include/cmsis_gcc.h ****  */
 725:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:cmsis/Include/cmsis_gcc.h **** {
 727:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:cmsis/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:cmsis/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:cmsis/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:cmsis/Include/cmsis_gcc.h **** #else
 732:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:cmsis/Include/cmsis_gcc.h **** #endif
 734:cmsis/Include/cmsis_gcc.h **** }
 735:cmsis/Include/cmsis_gcc.h **** 
 736:cmsis/Include/cmsis_gcc.h **** 
 737:cmsis/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:cmsis/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccKFq4D8.s 			page 26


 739:cmsis/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:cmsis/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:cmsis/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:cmsis/Include/cmsis_gcc.h **** 
 743:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:cmsis/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:cmsis/Include/cmsis_gcc.h ****  */
 746:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:cmsis/Include/cmsis_gcc.h **** {
 748:cmsis/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:cmsis/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:cmsis/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:cmsis/Include/cmsis_gcc.h **** #else
 752:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:cmsis/Include/cmsis_gcc.h **** #endif
 754:cmsis/Include/cmsis_gcc.h **** }
 755:cmsis/Include/cmsis_gcc.h **** #endif
 756:cmsis/Include/cmsis_gcc.h **** 
 757:cmsis/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:cmsis/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:cmsis/Include/cmsis_gcc.h **** 
 760:cmsis/Include/cmsis_gcc.h **** 
 761:cmsis/Include/cmsis_gcc.h **** /**
 762:cmsis/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:cmsis/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:cmsis/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:cmsis/Include/cmsis_gcc.h ****  */
 766:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:cmsis/Include/cmsis_gcc.h **** {
 768:cmsis/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:cmsis/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:cmsis/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:cmsis/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:cmsis/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:cmsis/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:cmsis/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:cmsis/Include/cmsis_gcc.h **** #else
 776:cmsis/Include/cmsis_gcc.h ****   uint32_t result;
 777:cmsis/Include/cmsis_gcc.h **** 
 778:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:cmsis/Include/cmsis_gcc.h ****   return(result);
 780:cmsis/Include/cmsis_gcc.h **** #endif
 781:cmsis/Include/cmsis_gcc.h **** #else
 782:cmsis/Include/cmsis_gcc.h ****   return(0U);
 783:cmsis/Include/cmsis_gcc.h **** #endif
 784:cmsis/Include/cmsis_gcc.h **** }
 785:cmsis/Include/cmsis_gcc.h **** 
 786:cmsis/Include/cmsis_gcc.h **** 
 787:cmsis/Include/cmsis_gcc.h **** /**
 788:cmsis/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:cmsis/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:cmsis/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:cmsis/Include/cmsis_gcc.h ****  */
 792:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:cmsis/Include/cmsis_gcc.h **** {
 794:cmsis/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:cmsis/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
ARM GAS  /tmp/ccKFq4D8.s 			page 27


 796:cmsis/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:cmsis/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:cmsis/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:cmsis/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:cmsis/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:cmsis/Include/cmsis_gcc.h **** #else
 802:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:cmsis/Include/cmsis_gcc.h **** #endif
 804:cmsis/Include/cmsis_gcc.h **** #else
 805:cmsis/Include/cmsis_gcc.h ****   (void)fpscr;
 806:cmsis/Include/cmsis_gcc.h **** #endif
 807:cmsis/Include/cmsis_gcc.h **** }
 808:cmsis/Include/cmsis_gcc.h **** 
 809:cmsis/Include/cmsis_gcc.h **** 
 810:cmsis/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:cmsis/Include/cmsis_gcc.h **** 
 812:cmsis/Include/cmsis_gcc.h **** 
 813:cmsis/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:cmsis/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:cmsis/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:cmsis/Include/cmsis_gcc.h ****   @{
 817:cmsis/Include/cmsis_gcc.h **** */
 818:cmsis/Include/cmsis_gcc.h **** 
 819:cmsis/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:cmsis/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:cmsis/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:cmsis/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:cmsis/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:cmsis/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:cmsis/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:cmsis/Include/cmsis_gcc.h **** #else
 827:cmsis/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:cmsis/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:cmsis/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:cmsis/Include/cmsis_gcc.h **** #endif
 831:cmsis/Include/cmsis_gcc.h **** 
 832:cmsis/Include/cmsis_gcc.h **** /**
 833:cmsis/Include/cmsis_gcc.h ****   \brief   No Operation
 834:cmsis/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:cmsis/Include/cmsis_gcc.h ****  */
 836:cmsis/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:cmsis/Include/cmsis_gcc.h **** 
 838:cmsis/Include/cmsis_gcc.h **** /**
 839:cmsis/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:cmsis/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:cmsis/Include/cmsis_gcc.h ****  */
 842:cmsis/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:cmsis/Include/cmsis_gcc.h **** 
 844:cmsis/Include/cmsis_gcc.h **** 
 845:cmsis/Include/cmsis_gcc.h **** /**
 846:cmsis/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:cmsis/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:cmsis/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:cmsis/Include/cmsis_gcc.h ****  */
 850:cmsis/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:cmsis/Include/cmsis_gcc.h **** 
 852:cmsis/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccKFq4D8.s 			page 28


 853:cmsis/Include/cmsis_gcc.h **** /**
 854:cmsis/Include/cmsis_gcc.h ****   \brief   Send Event
 855:cmsis/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:cmsis/Include/cmsis_gcc.h ****  */
 857:cmsis/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:cmsis/Include/cmsis_gcc.h **** 
 859:cmsis/Include/cmsis_gcc.h **** 
 860:cmsis/Include/cmsis_gcc.h **** /**
 861:cmsis/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:cmsis/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:cmsis/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:cmsis/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:cmsis/Include/cmsis_gcc.h ****  */
 866:cmsis/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
  62              		.loc 2 866 27 view .LVU11
  63              	.LBB5:
 867:cmsis/Include/cmsis_gcc.h **** {
 868:cmsis/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
  64              		.loc 2 868 3 view .LVU12
  65              		.syntax unified
  66              	@ 868 "cmsis/Include/cmsis_gcc.h" 1
  67 001e BFF36F8F 		isb 0xF
  68              	@ 0 "" 2
  69              		.thumb
  70              		.syntax unified
  71              	.LBE5:
  72              	.LBE4:
 628:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 629:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Program second word */
 630:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
  73              		.loc 1 630 3 view .LVU13
  74              		.loc 1 630 32 is_stmt 0 view .LVU14
  75 0022 4360     		str	r3, [r0, #4]
 631:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
  76              		.loc 1 631 1 view .LVU15
  77 0024 5DF8044B 		ldr	r4, [sp], #4
  78              	.LCFI1:
  79              		.cfi_restore 4
  80              		.cfi_def_cfa_offset 0
  81 0028 7047     		bx	lr
  82              	.L4:
  83 002a 00BF     		.align	2
  84              	.L3:
  85 002c 003C0240 		.word	1073888256
  86              		.cfi_endproc
  87              	.LFE142:
  89              		.section	.text.FLASH_Program_Word,"ax",%progbits
  90              		.align	1
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  94              		.fpu fpv4-sp-d16
  96              	FLASH_Program_Word:
  97              	.LVL1:
  98              	.LFB143:
 632:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 633:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
ARM GAS  /tmp/ccKFq4D8.s 			page 29


 634:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 635:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Program word (32-bit) at a specified address.
 636:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 637:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         2.7V to 3.6V.
 638:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *
 639:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 640:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 641:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *  
 642:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 643:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 644:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 645:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 646:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
 647:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
  99              		.loc 1 647 1 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 648:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 649:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 104              		.loc 1 649 3 view .LVU17
 650:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 651:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 652:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 105              		.loc 1 652 3 view .LVU18
 106 0000 074B     		ldr	r3, .L6
 107 0002 1A69     		ldr	r2, [r3, #16]
 108 0004 22F44072 		bic	r2, r2, #768
 109 0008 1A61     		str	r2, [r3, #16]
 653:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_WORD;
 110              		.loc 1 653 3 view .LVU19
 111              		.loc 1 653 13 is_stmt 0 view .LVU20
 112 000a 1A69     		ldr	r2, [r3, #16]
 113 000c 42F40072 		orr	r2, r2, #512
 114 0010 1A61     		str	r2, [r3, #16]
 654:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 115              		.loc 1 654 3 is_stmt 1 view .LVU21
 116              		.loc 1 654 13 is_stmt 0 view .LVU22
 117 0012 1A69     		ldr	r2, [r3, #16]
 118 0014 42F00102 		orr	r2, r2, #1
 119 0018 1A61     		str	r2, [r3, #16]
 655:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 656:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *(__IO uint32_t*)Address = Data;
 120              		.loc 1 656 3 is_stmt 1 view .LVU23
 121              		.loc 1 656 28 is_stmt 0 view .LVU24
 122 001a 0160     		str	r1, [r0]
 657:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 123              		.loc 1 657 1 view .LVU25
 124 001c 7047     		bx	lr
 125              	.L7:
 126 001e 00BF     		.align	2
 127              	.L6:
 128 0020 003C0240 		.word	1073888256
 129              		.cfi_endproc
 130              	.LFE143:
 132              		.section	.text.FLASH_Program_HalfWord,"ax",%progbits
ARM GAS  /tmp/ccKFq4D8.s 			page 30


 133              		.align	1
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu fpv4-sp-d16
 139              	FLASH_Program_HalfWord:
 140              	.LVL2:
 141              	.LFB144:
 658:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 659:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 660:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Program a half-word (16-bit) at a specified address.
 661:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 662:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         2.1V to 3.6V.
 663:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *
 664:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 665:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 666:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *  
 667:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 668:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 669:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 670:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 671:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
 672:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 142              		.loc 1 672 1 is_stmt 1 view -0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 673:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 674:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 147              		.loc 1 674 3 view .LVU27
 675:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 676:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 677:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 148              		.loc 1 677 3 view .LVU28
 149 0000 074B     		ldr	r3, .L9
 150 0002 1A69     		ldr	r2, [r3, #16]
 151 0004 22F44072 		bic	r2, r2, #768
 152 0008 1A61     		str	r2, [r3, #16]
 678:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 153              		.loc 1 678 3 view .LVU29
 154              		.loc 1 678 13 is_stmt 0 view .LVU30
 155 000a 1A69     		ldr	r2, [r3, #16]
 156 000c 42F48072 		orr	r2, r2, #256
 157 0010 1A61     		str	r2, [r3, #16]
 679:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 158              		.loc 1 679 3 is_stmt 1 view .LVU31
 159              		.loc 1 679 13 is_stmt 0 view .LVU32
 160 0012 1A69     		ldr	r2, [r3, #16]
 161 0014 42F00102 		orr	r2, r2, #1
 162 0018 1A61     		str	r2, [r3, #16]
 680:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 681:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *(__IO uint16_t*)Address = Data;
 163              		.loc 1 681 3 is_stmt 1 view .LVU33
 164              		.loc 1 681 28 is_stmt 0 view .LVU34
 165 001a 0180     		strh	r1, [r0]	@ movhi
 682:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
ARM GAS  /tmp/ccKFq4D8.s 			page 31


 166              		.loc 1 682 1 view .LVU35
 167 001c 7047     		bx	lr
 168              	.L10:
 169 001e 00BF     		.align	2
 170              	.L9:
 171 0020 003C0240 		.word	1073888256
 172              		.cfi_endproc
 173              	.LFE144:
 175              		.section	.text.FLASH_Program_Byte,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu fpv4-sp-d16
 182              	FLASH_Program_Byte:
 183              	.LVL3:
 184              	.LFB145:
 683:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 684:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 685:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Program byte (8-bit) at a specified address.
 686:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   This function must be used when the device voltage range is from
 687:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         1.8V to 3.6V.
 688:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *
 689:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 690:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *         the erase operation is performed before the program one.
 691:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *  
 692:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Address specifies the address to be programmed.
 693:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @param  Data specifies the data to be programmed.
 694:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 695:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 696:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
 697:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** {
 185              		.loc 1 697 1 is_stmt 1 view -0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 698:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Check the parameters */
 699:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 190              		.loc 1 699 3 view .LVU37
 700:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 701:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* If the previous operation is completed, proceed to program the new data */
 702:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 191              		.loc 1 702 3 view .LVU38
 192 0000 064B     		ldr	r3, .L12
 193 0002 1A69     		ldr	r2, [r3, #16]
 194 0004 22F44072 		bic	r2, r2, #768
 195 0008 1A61     		str	r2, [r3, #16]
 703:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_PSIZE_BYTE;
 196              		.loc 1 703 3 view .LVU39
 197              		.loc 1 703 13 is_stmt 0 view .LVU40
 198 000a 1A69     		ldr	r2, [r3, #16]
 199 000c 1A61     		str	r2, [r3, #16]
 704:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   FLASH->CR |= FLASH_CR_PG;
 200              		.loc 1 704 3 is_stmt 1 view .LVU41
 201              		.loc 1 704 13 is_stmt 0 view .LVU42
 202 000e 1A69     		ldr	r2, [r3, #16]
ARM GAS  /tmp/ccKFq4D8.s 			page 32


 203 0010 42F00102 		orr	r2, r2, #1
 204 0014 1A61     		str	r2, [r3, #16]
 705:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 706:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   *(__IO uint8_t*)Address = Data;
 205              		.loc 1 706 3 is_stmt 1 view .LVU43
 206              		.loc 1 706 27 is_stmt 0 view .LVU44
 207 0016 0170     		strb	r1, [r0]
 707:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 208              		.loc 1 707 1 view .LVU45
 209 0018 7047     		bx	lr
 210              	.L13:
 211 001a 00BF     		.align	2
 212              	.L12:
 213 001c 003C0240 		.word	1073888256
 214              		.cfi_endproc
 215              	.LFE145:
 217              		.section	.text.FLASH_SetErrorCode,"ax",%progbits
 218              		.align	1
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	FLASH_SetErrorCode:
 225              	.LFB146:
 708:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 709:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** /**
 710:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @brief  Set the specific FLASH error flag.
 711:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   * @retval None
 712:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   */
 713:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** static void FLASH_SetErrorCode(void)
 714:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** { 
 226              		.loc 1 714 1 is_stmt 1 view -0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              		@ link register save eliminated.
 715:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 231              		.loc 1 715 3 view .LVU47
 232              		.loc 1 715 6 is_stmt 0 view .LVU48
 233 0000 274B     		ldr	r3, .L21
 234 0002 DB68     		ldr	r3, [r3, #12]
 235              		.loc 1 715 5 view .LVU49
 236 0004 13F0100F 		tst	r3, #16
 237 0008 07D0     		beq	.L15
 716:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 717:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 238              		.loc 1 717 4 is_stmt 1 view .LVU50
 239              		.loc 1 717 21 is_stmt 0 view .LVU51
 240 000a 264A     		ldr	r2, .L21+4
 241 000c D369     		ldr	r3, [r2, #28]
 242 000e 43F01003 		orr	r3, r3, #16
 243 0012 D361     		str	r3, [r2, #28]
 718:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    
 719:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    /* Clear FLASH write protection error pending bit */
 720:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 244              		.loc 1 720 4 is_stmt 1 view .LVU52
 245 0014 224B     		ldr	r3, .L21
ARM GAS  /tmp/ccKFq4D8.s 			page 33


 246 0016 1022     		movs	r2, #16
 247 0018 DA60     		str	r2, [r3, #12]
 248              	.L15:
 721:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 722:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 723:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 249              		.loc 1 723 3 view .LVU53
 250              		.loc 1 723 6 is_stmt 0 view .LVU54
 251 001a 214B     		ldr	r3, .L21
 252 001c DB68     		ldr	r3, [r3, #12]
 253              		.loc 1 723 5 view .LVU55
 254 001e 13F0200F 		tst	r3, #32
 255 0022 07D0     		beq	.L16
 724:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 725:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 256              		.loc 1 725 4 is_stmt 1 view .LVU56
 257              		.loc 1 725 21 is_stmt 0 view .LVU57
 258 0024 1F4A     		ldr	r2, .L21+4
 259 0026 D369     		ldr	r3, [r2, #28]
 260 0028 43F00803 		orr	r3, r3, #8
 261 002c D361     		str	r3, [r2, #28]
 726:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    
 727:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    /* Clear FLASH Programming alignment error pending bit */
 728:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 262              		.loc 1 728 4 is_stmt 1 view .LVU58
 263 002e 1C4B     		ldr	r3, .L21
 264 0030 2022     		movs	r2, #32
 265 0032 DA60     		str	r2, [r3, #12]
 266              	.L16:
 729:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 730:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 731:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 267              		.loc 1 731 3 view .LVU59
 268              		.loc 1 731 6 is_stmt 0 view .LVU60
 269 0034 1A4B     		ldr	r3, .L21
 270 0036 DB68     		ldr	r3, [r3, #12]
 271              		.loc 1 731 5 view .LVU61
 272 0038 13F0400F 		tst	r3, #64
 273 003c 07D0     		beq	.L17
 732:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 733:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 274              		.loc 1 733 5 is_stmt 1 view .LVU62
 275              		.loc 1 733 22 is_stmt 0 view .LVU63
 276 003e 194A     		ldr	r2, .L21+4
 277 0040 D369     		ldr	r3, [r2, #28]
 278 0042 43F00403 		orr	r3, r3, #4
 279 0046 D361     		str	r3, [r2, #28]
 734:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 735:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Programming parallelism error pending bit */
 736:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 280              		.loc 1 736 5 is_stmt 1 view .LVU64
 281 0048 154B     		ldr	r3, .L21
 282 004a 4022     		movs	r2, #64
 283 004c DA60     		str	r2, [r3, #12]
 284              	.L17:
 737:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 738:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
ARM GAS  /tmp/ccKFq4D8.s 			page 34


 739:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 285              		.loc 1 739 3 view .LVU65
 286              		.loc 1 739 6 is_stmt 0 view .LVU66
 287 004e 144B     		ldr	r3, .L21
 288 0050 DB68     		ldr	r3, [r3, #12]
 289              		.loc 1 739 5 view .LVU67
 290 0052 13F0800F 		tst	r3, #128
 291 0056 07D0     		beq	.L18
 740:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 741:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 292              		.loc 1 741 5 is_stmt 1 view .LVU68
 293              		.loc 1 741 22 is_stmt 0 view .LVU69
 294 0058 124A     		ldr	r2, .L21+4
 295 005a D369     		ldr	r3, [r2, #28]
 296 005c 43F00203 		orr	r3, r3, #2
 297 0060 D361     		str	r3, [r2, #28]
 742:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 743:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Programming sequence error pending bit */
 744:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 298              		.loc 1 744 5 is_stmt 1 view .LVU70
 299 0062 0F4B     		ldr	r3, .L21
 300 0064 8022     		movs	r2, #128
 301 0066 DA60     		str	r2, [r3, #12]
 302              	.L18:
 745:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 746:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #if defined(FLASH_SR_RDERR) 
 747:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 303              		.loc 1 747 3 view .LVU71
 304              		.loc 1 747 6 is_stmt 0 view .LVU72
 305 0068 0D4B     		ldr	r3, .L21
 306 006a DB68     		ldr	r3, [r3, #12]
 307              		.loc 1 747 5 view .LVU73
 308 006c 13F4807F 		tst	r3, #256
 309 0070 08D0     		beq	.L19
 748:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 749:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 310              		.loc 1 749 5 is_stmt 1 view .LVU74
 311              		.loc 1 749 22 is_stmt 0 view .LVU75
 312 0072 0C4A     		ldr	r2, .L21+4
 313 0074 D369     		ldr	r3, [r2, #28]
 314 0076 43F00103 		orr	r3, r3, #1
 315 007a D361     		str	r3, [r2, #28]
 750:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 751:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Proprietary readout protection error pending bit */
 752:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 316              		.loc 1 752 5 is_stmt 1 view .LVU76
 317 007c 084B     		ldr	r3, .L21
 318 007e 4FF48072 		mov	r2, #256
 319 0082 DA60     		str	r2, [r3, #12]
 320              	.L19:
 753:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 754:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** #endif /* FLASH_SR_RDERR */  
 755:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 321              		.loc 1 755 3 view .LVU77
 322              		.loc 1 755 6 is_stmt 0 view .LVU78
 323 0084 064B     		ldr	r3, .L21
 324 0086 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccKFq4D8.s 			page 35


 325              		.loc 1 755 5 view .LVU79
 326 0088 13F0020F 		tst	r3, #2
 327 008c 07D0     		beq	.L14
 756:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 757:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 328              		.loc 1 757 5 is_stmt 1 view .LVU80
 329              		.loc 1 757 22 is_stmt 0 view .LVU81
 330 008e 054A     		ldr	r2, .L21+4
 331 0090 D369     		ldr	r3, [r2, #28]
 332 0092 43F02003 		orr	r3, r3, #32
 333 0096 D361     		str	r3, [r2, #28]
 758:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 759:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     /* Clear FLASH Operation error pending bit */
 760:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 334              		.loc 1 760 5 is_stmt 1 view .LVU82
 335 0098 014B     		ldr	r3, .L21
 336 009a 0222     		movs	r2, #2
 337 009c DA60     		str	r2, [r3, #12]
 338              	.L14:
 761:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 762:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 339              		.loc 1 762 1 is_stmt 0 view .LVU83
 340 009e 7047     		bx	lr
 341              	.L22:
 342              		.align	2
 343              	.L21:
 344 00a0 003C0240 		.word	1073888256
 345 00a4 00000000 		.word	pFlash
 346              		.cfi_endproc
 347              	.LFE146:
 349              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 350              		.align	1
 351              		.global	HAL_FLASH_Program_IT
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 355              		.fpu fpv4-sp-d16
 357              	HAL_FLASH_Program_IT:
 358              	.LVL4:
 359              	.LFB131:
 215:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 360              		.loc 1 215 1 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 215:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 364              		.loc 1 215 1 is_stmt 0 view .LVU85
 365 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 366              	.LCFI2:
 367              		.cfi_def_cfa_offset 24
 368              		.cfi_offset 3, -24
 369              		.cfi_offset 4, -20
 370              		.cfi_offset 5, -16
 371              		.cfi_offset 6, -12
 372              		.cfi_offset 7, -8
 373              		.cfi_offset 14, -4
 216:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
ARM GAS  /tmp/ccKFq4D8.s 			page 36


 374              		.loc 1 216 3 is_stmt 1 view .LVU86
 375              	.LVL5:
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 376              		.loc 1 219 3 view .LVU87
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 377              		.loc 1 219 3 view .LVU88
 378 0002 174D     		ldr	r5, .L33
 379 0004 2D7E     		ldrb	r5, [r5, #24]	@ zero_extendqisi2
 380 0006 012D     		cmp	r5, #1
 381 0008 28D0     		beq	.L28
 382 000a 0446     		mov	r4, r0
 383 000c 0846     		mov	r0, r1
 384              	.LVL6:
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 385              		.loc 1 219 3 discriminator 2 view .LVU89
 386 000e 144E     		ldr	r6, .L33
 387 0010 0121     		movs	r1, #1
 388              	.LVL7:
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 389              		.loc 1 219 3 is_stmt 0 discriminator 2 view .LVU90
 390 0012 3176     		strb	r1, [r6, #24]
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 391              		.loc 1 219 3 is_stmt 1 discriminator 2 view .LVU91
 222:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 392              		.loc 1 222 3 discriminator 2 view .LVU92
 225:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 393              		.loc 1 225 3 discriminator 2 view .LVU93
 394 0014 134D     		ldr	r5, .L33+4
 395 0016 2F69     		ldr	r7, [r5, #16]
 396 0018 47F08077 		orr	r7, r7, #16777216
 397 001c 2F61     		str	r7, [r5, #16]
 228:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 398              		.loc 1 228 3 discriminator 2 view .LVU94
 399 001e 2F69     		ldr	r7, [r5, #16]
 400 0020 47F00077 		orr	r7, r7, #33554432
 401 0024 2F61     		str	r7, [r5, #16]
 230:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   pFlash.Address = Address;
 402              		.loc 1 230 3 discriminator 2 view .LVU95
 230:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   pFlash.Address = Address;
 403              		.loc 1 230 27 is_stmt 0 discriminator 2 view .LVU96
 404 0026 0321     		movs	r1, #3
 405 0028 3170     		strb	r1, [r6]
 231:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 406              		.loc 1 231 3 is_stmt 1 discriminator 2 view .LVU97
 231:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 407              		.loc 1 231 18 is_stmt 0 discriminator 2 view .LVU98
 408 002a 7061     		str	r0, [r6, #20]
 233:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 409              		.loc 1 233 3 is_stmt 1 discriminator 2 view .LVU99
 233:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 410              		.loc 1 233 5 is_stmt 0 discriminator 2 view .LVU100
 411 002c 3CB1     		cbz	r4, .L30
 238:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 412              		.loc 1 238 8 is_stmt 1 view .LVU101
 238:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 413              		.loc 1 238 10 is_stmt 0 view .LVU102
 414 002e 012C     		cmp	r4, #1
ARM GAS  /tmp/ccKFq4D8.s 			page 37


 415 0030 0AD0     		beq	.L31
 243:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 416              		.loc 1 243 8 is_stmt 1 view .LVU103
 243:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 417              		.loc 1 243 10 is_stmt 0 view .LVU104
 418 0032 022C     		cmp	r4, #2
 419 0034 0DD0     		beq	.L32
 251:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 420              		.loc 1 251 5 is_stmt 1 view .LVU105
 421 0036 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 422              	.LVL8:
 254:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 423              		.loc 1 254 10 is_stmt 0 view .LVU106
 424 003a 0020     		movs	r0, #0
 425              	.LVL9:
 426              	.L24:
 255:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 427              		.loc 1 255 1 view .LVU107
 428 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 429              	.LVL10:
 430              	.L30:
 236:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 431              		.loc 1 236 7 is_stmt 1 view .LVU108
 432 003e D1B2     		uxtb	r1, r2
 433 0040 FFF7FEFF 		bl	FLASH_Program_Byte
 434              	.LVL11:
 254:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 435              		.loc 1 254 10 is_stmt 0 view .LVU109
 436 0044 0020     		movs	r0, #0
 437 0046 F9E7     		b	.L24
 438              	.LVL12:
 439              	.L31:
 241:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 440              		.loc 1 241 5 is_stmt 1 view .LVU110
 441 0048 91B2     		uxth	r1, r2
 442 004a FFF7FEFF 		bl	FLASH_Program_HalfWord
 443              	.LVL13:
 254:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 444              		.loc 1 254 10 is_stmt 0 view .LVU111
 445 004e 0020     		movs	r0, #0
 446 0050 F4E7     		b	.L24
 447              	.LVL14:
 448              	.L32:
 246:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 449              		.loc 1 246 5 is_stmt 1 view .LVU112
 450 0052 1146     		mov	r1, r2
 451 0054 FFF7FEFF 		bl	FLASH_Program_Word
 452              	.LVL15:
 254:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 453              		.loc 1 254 10 is_stmt 0 view .LVU113
 454 0058 0020     		movs	r0, #0
 455 005a EFE7     		b	.L24
 456              	.LVL16:
 457              	.L28:
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 458              		.loc 1 219 3 view .LVU114
 459 005c 0220     		movs	r0, #2
ARM GAS  /tmp/ccKFq4D8.s 			page 38


 460              	.LVL17:
 219:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 461              		.loc 1 219 3 view .LVU115
 462 005e EDE7     		b	.L24
 463              	.L34:
 464              		.align	2
 465              	.L33:
 466 0060 00000000 		.word	pFlash
 467 0064 003C0240 		.word	1073888256
 468              		.cfi_endproc
 469              	.LFE131:
 471              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 472              		.align	1
 473              		.weak	HAL_FLASH_EndOfOperationCallback
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	HAL_FLASH_EndOfOperationCallback:
 480              	.LVL18:
 481              	.LFB133:
 385:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 482              		.loc 1 385 1 is_stmt 1 view -0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              		@ link register save eliminated.
 387:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 487              		.loc 1 387 3 view .LVU117
 391:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 488              		.loc 1 391 1 is_stmt 0 view .LVU118
 489 0000 7047     		bx	lr
 490              		.cfi_endproc
 491              	.LFE133:
 493              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 494              		.align	1
 495              		.weak	HAL_FLASH_OperationErrorCallback
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv4-sp-d16
 501              	HAL_FLASH_OperationErrorCallback:
 502              	.LVL19:
 503              	.LFB134:
 402:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 504              		.loc 1 402 1 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 404:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 509              		.loc 1 404 3 view .LVU120
 408:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 510              		.loc 1 408 1 is_stmt 0 view .LVU121
 511 0000 7047     		bx	lr
 512              		.cfi_endproc
 513              	.LFE134:
ARM GAS  /tmp/ccKFq4D8.s 			page 39


 515              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 516              		.align	1
 517              		.global	HAL_FLASH_IRQHandler
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu fpv4-sp-d16
 523              	HAL_FLASH_IRQHandler:
 524              	.LFB132:
 262:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   uint32_t addresstmp = 0U;
 525              		.loc 1 262 1 is_stmt 1 view -0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529 0000 10B5     		push	{r4, lr}
 530              	.LCFI3:
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 4, -8
 533              		.cfi_offset 14, -4
 263:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 534              		.loc 1 263 3 view .LVU123
 535              	.LVL20:
 267:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 536              		.loc 1 267 3 view .LVU124
 267:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 537              		.loc 1 267 6 is_stmt 0 view .LVU125
 538 0002 3A4B     		ldr	r3, .L53
 539 0004 DB68     		ldr	r3, [r3, #12]
 267:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 540              		.loc 1 267 5 view .LVU126
 541 0006 13F4F97F 		tst	r3, #498
 542 000a 13D0     		beq	.L38
 274:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 543              		.loc 1 274 5 is_stmt 1 view .LVU127
 274:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 544              		.loc 1 274 14 is_stmt 0 view .LVU128
 545 000c 384B     		ldr	r3, .L53+4
 546 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 547 0010 DBB2     		uxtb	r3, r3
 274:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 548              		.loc 1 274 7 view .LVU129
 549 0012 012B     		cmp	r3, #1
 550 0014 3BD0     		beq	.L49
 280:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 551              		.loc 1 280 10 is_stmt 1 view .LVU130
 280:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 552              		.loc 1 280 19 is_stmt 0 view .LVU131
 553 0016 364B     		ldr	r3, .L53+4
 554 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 555 001a DBB2     		uxtb	r3, r3
 280:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 556              		.loc 1 280 12 view .LVU132
 557 001c 022B     		cmp	r3, #2
 558 001e 3CD0     		beq	.L50
 288:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 559              		.loc 1 288 7 is_stmt 1 view .LVU133
 288:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
ARM GAS  /tmp/ccKFq4D8.s 			page 40


 560              		.loc 1 288 18 is_stmt 0 view .LVU134
 561 0020 334B     		ldr	r3, .L53+4
 562 0022 5C69     		ldr	r4, [r3, #20]
 563              	.LVL21:
 564              	.L40:
 292:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 565              		.loc 1 292 5 is_stmt 1 view .LVU135
 566 0024 FFF7FEFF 		bl	FLASH_SetErrorCode
 567              	.LVL22:
 295:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 568              		.loc 1 295 5 view .LVU136
 569 0028 2046     		mov	r0, r4
 570 002a FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 571              	.LVL23:
 298:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 572              		.loc 1 298 5 view .LVU137
 298:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 573              		.loc 1 298 29 is_stmt 0 view .LVU138
 574 002e 304B     		ldr	r3, .L53+4
 575 0030 0022     		movs	r2, #0
 576 0032 1A70     		strb	r2, [r3]
 577              	.LVL24:
 578              	.L38:
 302:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 579              		.loc 1 302 3 is_stmt 1 view .LVU139
 302:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 580              		.loc 1 302 6 is_stmt 0 view .LVU140
 581 0034 2D4B     		ldr	r3, .L53
 582 0036 DB68     		ldr	r3, [r3, #12]
 302:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 583              		.loc 1 302 5 view .LVU141
 584 0038 13F0010F 		tst	r3, #1
 585 003c 13D0     		beq	.L42
 305:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 586              		.loc 1 305 5 is_stmt 1 view .LVU142
 587 003e 2B4B     		ldr	r3, .L53
 588 0040 0122     		movs	r2, #1
 589 0042 DA60     		str	r2, [r3, #12]
 307:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 590              		.loc 1 307 5 view .LVU143
 307:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 591              		.loc 1 307 14 is_stmt 0 view .LVU144
 592 0044 2A4B     		ldr	r3, .L53+4
 593 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 594 0048 DBB2     		uxtb	r3, r3
 307:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 595              		.loc 1 307 7 view .LVU145
 596 004a 9342     		cmp	r3, r2
 597 004c 28D0     		beq	.L51
 340:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 598              		.loc 1 340 7 is_stmt 1 view .LVU146
 340:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 599              		.loc 1 340 16 is_stmt 0 view .LVU147
 600 004e 284B     		ldr	r3, .L53+4
 601 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 602 0052 DBB2     		uxtb	r3, r3
 340:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
ARM GAS  /tmp/ccKFq4D8.s 			page 41


 603              		.loc 1 340 9 view .LVU148
 604 0054 022B     		cmp	r3, #2
 605 0056 41D0     		beq	.L52
 353:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 606              		.loc 1 353 9 is_stmt 1 view .LVU149
 607 0058 254B     		ldr	r3, .L53+4
 608 005a 5869     		ldr	r0, [r3, #20]
 609 005c FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 610              	.LVL25:
 611              	.L46:
 355:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 612              		.loc 1 355 7 view .LVU150
 355:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 613              		.loc 1 355 31 is_stmt 0 view .LVU151
 614 0060 234B     		ldr	r3, .L53+4
 615 0062 0022     		movs	r2, #0
 616 0064 1A70     		strb	r2, [r3]
 617              	.L42:
 359:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 618              		.loc 1 359 3 is_stmt 1 view .LVU152
 359:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 619              		.loc 1 359 12 is_stmt 0 view .LVU153
 620 0066 224B     		ldr	r3, .L53+4
 621 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 359:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 622              		.loc 1 359 5 view .LVU154
 623 006a 7BB9     		cbnz	r3, .L37
 362:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 624              		.loc 1 362 5 is_stmt 1 view .LVU155
 625 006c 1F4B     		ldr	r3, .L53
 626 006e 1A69     		ldr	r2, [r3, #16]
 627 0070 22F07F02 		bic	r2, r2, #127
 628 0074 1A61     		str	r2, [r3, #16]
 365:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 629              		.loc 1 365 5 view .LVU156
 630 0076 1A69     		ldr	r2, [r3, #16]
 631 0078 22F08072 		bic	r2, r2, #16777216
 632 007c 1A61     		str	r2, [r3, #16]
 368:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 633              		.loc 1 368 5 view .LVU157
 634 007e 1A69     		ldr	r2, [r3, #16]
 635 0080 22F00072 		bic	r2, r2, #33554432
 636 0084 1A61     		str	r2, [r3, #16]
 371:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 637              		.loc 1 371 5 view .LVU158
 371:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 638              		.loc 1 371 5 view .LVU159
 639 0086 1A4B     		ldr	r3, .L53+4
 640 0088 0022     		movs	r2, #0
 641 008a 1A76     		strb	r2, [r3, #24]
 371:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 642              		.loc 1 371 5 view .LVU160
 643              	.L37:
 373:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 644              		.loc 1 373 1 is_stmt 0 view .LVU161
 645 008c 10BD     		pop	{r4, pc}
 646              	.LVL26:
ARM GAS  /tmp/ccKFq4D8.s 			page 42


 647              	.L49:
 277:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       pFlash.Sector = 0xFFFFFFFFU;
 648              		.loc 1 277 7 is_stmt 1 view .LVU162
 277:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       pFlash.Sector = 0xFFFFFFFFU;
 649              		.loc 1 277 18 is_stmt 0 view .LVU163
 650 008e 184B     		ldr	r3, .L53+4
 651 0090 DC68     		ldr	r4, [r3, #12]
 652              	.LVL27:
 278:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 653              		.loc 1 278 7 is_stmt 1 view .LVU164
 278:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 654              		.loc 1 278 21 is_stmt 0 view .LVU165
 655 0092 4FF0FF32 		mov	r2, #-1
 656 0096 DA60     		str	r2, [r3, #12]
 657 0098 C4E7     		b	.L40
 658              	.LVL28:
 659              	.L50:
 283:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 660              		.loc 1 283 7 is_stmt 1 view .LVU166
 283:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 661              		.loc 1 283 18 is_stmt 0 view .LVU167
 662 009a 154B     		ldr	r3, .L53+4
 663 009c 1C69     		ldr	r4, [r3, #16]
 664              	.LVL29:
 283:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 665              		.loc 1 283 18 view .LVU168
 666 009e C1E7     		b	.L40
 667              	.LVL30:
 668              	.L51:
 310:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       
 669              		.loc 1 310 7 is_stmt 1 view .LVU169
 310:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       
 670              		.loc 1 310 13 is_stmt 0 view .LVU170
 671 00a0 134B     		ldr	r3, .L53+4
 672 00a2 5A68     		ldr	r2, [r3, #4]
 310:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       
 673              		.loc 1 310 30 view .LVU171
 674 00a4 013A     		subs	r2, r2, #1
 675 00a6 5A60     		str	r2, [r3, #4]
 313:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 676              		.loc 1 313 7 is_stmt 1 view .LVU172
 313:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 677              		.loc 1 313 16 is_stmt 0 view .LVU173
 678 00a8 5B68     		ldr	r3, [r3, #4]
 313:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 679              		.loc 1 313 9 view .LVU174
 680 00aa 5BB1     		cbz	r3, .L44
 315:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /*Indicate user which sector has been erased*/
 681              		.loc 1 315 9 is_stmt 1 view .LVU175
 315:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         /*Indicate user which sector has been erased*/
 682              		.loc 1 315 20 is_stmt 0 view .LVU176
 683 00ac 104C     		ldr	r4, .L53+4
 684 00ae E068     		ldr	r0, [r4, #12]
 685              	.LVL31:
 317:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         
 686              		.loc 1 317 9 is_stmt 1 view .LVU177
 687 00b0 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
ARM GAS  /tmp/ccKFq4D8.s 			page 43


 688              	.LVL32:
 320:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
 689              		.loc 1 320 9 view .LVU178
 320:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
 690              		.loc 1 320 15 is_stmt 0 view .LVU179
 691 00b4 E368     		ldr	r3, [r4, #12]
 320:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         addresstmp = pFlash.Sector;
 692              		.loc 1 320 22 view .LVU180
 693 00b6 0133     		adds	r3, r3, #1
 694 00b8 E360     		str	r3, [r4, #12]
 321:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 695              		.loc 1 321 9 is_stmt 1 view .LVU181
 321:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 696              		.loc 1 321 20 is_stmt 0 view .LVU182
 697 00ba E068     		ldr	r0, [r4, #12]
 698              	.LVL33:
 322:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 699              		.loc 1 322 9 is_stmt 1 view .LVU183
 700 00bc 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 701 00be FFF7FEFF 		bl	FLASH_Erase_Sector
 702              	.LVL34:
 322:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 703              		.loc 1 322 9 is_stmt 0 view .LVU184
 704 00c2 D0E7     		b	.L42
 705              	.L44:
 328:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 706              		.loc 1 328 9 is_stmt 1 view .LVU185
 707              	.LVL35:
 328:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 708              		.loc 1 328 23 is_stmt 0 view .LVU186
 709 00c4 0A4B     		ldr	r3, .L53+4
 710 00c6 4FF0FF34 		mov	r4, #-1
 711 00ca DC60     		str	r4, [r3, #12]
 329:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         
 712              		.loc 1 329 9 is_stmt 1 view .LVU187
 329:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****         
 713              		.loc 1 329 33 is_stmt 0 view .LVU188
 714 00cc 0022     		movs	r2, #0
 715 00ce 1A70     		strb	r2, [r3]
 332:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                 
 716              		.loc 1 332 9 is_stmt 1 view .LVU189
 717 00d0 FFF7FEFF 		bl	FLASH_FlushCaches
 718              	.LVL36:
 335:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 719              		.loc 1 335 9 view .LVU190
 720 00d4 2046     		mov	r0, r4
 721 00d6 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 722              	.LVL37:
 723 00da C4E7     		b	.L42
 724              	.LVL38:
 725              	.L52:
 344:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 726              		.loc 1 344 9 view .LVU191
 727 00dc FFF7FEFF 		bl	FLASH_FlushCaches
 728              	.LVL39:
 347:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 729              		.loc 1 347 9 view .LVU192
ARM GAS  /tmp/ccKFq4D8.s 			page 44


 730 00e0 034B     		ldr	r3, .L53+4
 731 00e2 1869     		ldr	r0, [r3, #16]
 732 00e4 FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 733              	.LVL40:
 734 00e8 BAE7     		b	.L46
 735              	.L54:
 736 00ea 00BF     		.align	2
 737              	.L53:
 738 00ec 003C0240 		.word	1073888256
 739 00f0 00000000 		.word	pFlash
 740              		.cfi_endproc
 741              	.LFE132:
 743              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 744              		.align	1
 745              		.global	HAL_FLASH_Unlock
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 749              		.fpu fpv4-sp-d16
 751              	HAL_FLASH_Unlock:
 752              	.LFB135:
 434:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 753              		.loc 1 434 1 view -0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 435:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 758              		.loc 1 435 3 view .LVU194
 759              	.LVL41:
 437:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 760              		.loc 1 437 3 view .LVU195
 437:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 761              		.loc 1 437 6 is_stmt 0 view .LVU196
 762 0000 094B     		ldr	r3, .L60
 763 0002 1B69     		ldr	r3, [r3, #16]
 437:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 764              		.loc 1 437 5 view .LVU197
 765 0004 002B     		cmp	r3, #0
 766 0006 01DB     		blt	.L59
 435:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 767              		.loc 1 435 21 view .LVU198
 768 0008 0020     		movs	r0, #0
 769 000a 7047     		bx	lr
 770              	.L59:
 440:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 771              		.loc 1 440 5 is_stmt 1 view .LVU199
 772 000c 064B     		ldr	r3, .L60
 773 000e 074A     		ldr	r2, .L60+4
 774 0010 5A60     		str	r2, [r3, #4]
 441:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 775              		.loc 1 441 5 view .LVU200
 776 0012 02F18832 		add	r2, r2, #-2004318072
 777 0016 5A60     		str	r2, [r3, #4]
 444:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 778              		.loc 1 444 5 view .LVU201
 444:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
ARM GAS  /tmp/ccKFq4D8.s 			page 45


 779              		.loc 1 444 8 is_stmt 0 view .LVU202
 780 0018 1B69     		ldr	r3, [r3, #16]
 444:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 781              		.loc 1 444 7 view .LVU203
 782 001a 002B     		cmp	r3, #0
 783 001c 01DB     		blt	.L58
 435:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 784              		.loc 1 435 21 view .LVU204
 785 001e 0020     		movs	r0, #0
 786 0020 7047     		bx	lr
 787              	.L58:
 446:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 788              		.loc 1 446 14 view .LVU205
 789 0022 0120     		movs	r0, #1
 790              	.LVL42:
 450:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 791              		.loc 1 450 3 is_stmt 1 view .LVU206
 451:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 792              		.loc 1 451 1 is_stmt 0 view .LVU207
 793 0024 7047     		bx	lr
 794              	.L61:
 795 0026 00BF     		.align	2
 796              	.L60:
 797 0028 003C0240 		.word	1073888256
 798 002c 23016745 		.word	1164378403
 799              		.cfi_endproc
 800              	.LFE135:
 802              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 803              		.align	1
 804              		.global	HAL_FLASH_Lock
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 808              		.fpu fpv4-sp-d16
 810              	HAL_FLASH_Lock:
 811              	.LFB136:
 458:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 812              		.loc 1 458 1 is_stmt 1 view -0
 813              		.cfi_startproc
 814              		@ args = 0, pretend = 0, frame = 0
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816              		@ link register save eliminated.
 460:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 817              		.loc 1 460 3 view .LVU209
 460:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 818              		.loc 1 460 13 is_stmt 0 view .LVU210
 819 0000 034A     		ldr	r2, .L63
 820 0002 1369     		ldr	r3, [r2, #16]
 821 0004 43F00043 		orr	r3, r3, #-2147483648
 822 0008 1361     		str	r3, [r2, #16]
 462:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 823              		.loc 1 462 3 is_stmt 1 view .LVU211
 463:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 824              		.loc 1 463 1 is_stmt 0 view .LVU212
 825 000a 0020     		movs	r0, #0
 826 000c 7047     		bx	lr
 827              	.L64:
ARM GAS  /tmp/ccKFq4D8.s 			page 46


 828 000e 00BF     		.align	2
 829              	.L63:
 830 0010 003C0240 		.word	1073888256
 831              		.cfi_endproc
 832              	.LFE136:
 834              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 835              		.align	1
 836              		.global	HAL_FLASH_OB_Unlock
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv4-sp-d16
 842              	HAL_FLASH_OB_Unlock:
 843              	.LFB137:
 470:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 844              		.loc 1 470 1 is_stmt 1 view -0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 471:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 849              		.loc 1 471 3 view .LVU214
 471:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 850              		.loc 1 471 12 is_stmt 0 view .LVU215
 851 0000 074B     		ldr	r3, .L68
 852 0002 5B69     		ldr	r3, [r3, #20]
 471:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 853              		.loc 1 471 5 view .LVU216
 854 0004 13F0010F 		tst	r3, #1
 855 0008 07D0     		beq	.L67
 474:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 856              		.loc 1 474 5 is_stmt 1 view .LVU217
 474:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 857              		.loc 1 474 20 is_stmt 0 view .LVU218
 858 000a 054B     		ldr	r3, .L68
 859 000c 054A     		ldr	r2, .L68+4
 860 000e 9A60     		str	r2, [r3, #8]
 475:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 861              		.loc 1 475 5 is_stmt 1 view .LVU219
 475:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 862              		.loc 1 475 20 is_stmt 0 view .LVU220
 863 0010 02F14432 		add	r2, r2, #1145324612
 864 0014 9A60     		str	r2, [r3, #8]
 482:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 865              		.loc 1 482 3 is_stmt 1 view .LVU221
 482:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 866              		.loc 1 482 10 is_stmt 0 view .LVU222
 867 0016 0020     		movs	r0, #0
 868 0018 7047     		bx	lr
 869              	.L67:
 479:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }  
 870              		.loc 1 479 12 view .LVU223
 871 001a 0120     		movs	r0, #1
 483:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 872              		.loc 1 483 1 view .LVU224
 873 001c 7047     		bx	lr
 874              	.L69:
ARM GAS  /tmp/ccKFq4D8.s 			page 47


 875 001e 00BF     		.align	2
 876              	.L68:
 877 0020 003C0240 		.word	1073888256
 878 0024 3B2A1908 		.word	135866939
 879              		.cfi_endproc
 880              	.LFE137:
 882              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 883              		.align	1
 884              		.global	HAL_FLASH_OB_Lock
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 888              		.fpu fpv4-sp-d16
 890              	HAL_FLASH_OB_Lock:
 891              	.LFB138:
 490:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 892              		.loc 1 490 1 is_stmt 1 view -0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 492:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 897              		.loc 1 492 3 view .LVU226
 492:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 898              		.loc 1 492 16 is_stmt 0 view .LVU227
 899 0000 034A     		ldr	r2, .L71
 900 0002 5369     		ldr	r3, [r2, #20]
 901 0004 43F00103 		orr	r3, r3, #1
 902 0008 5361     		str	r3, [r2, #20]
 494:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 903              		.loc 1 494 3 is_stmt 1 view .LVU228
 495:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 904              		.loc 1 495 1 is_stmt 0 view .LVU229
 905 000a 0020     		movs	r0, #0
 906 000c 7047     		bx	lr
 907              	.L72:
 908 000e 00BF     		.align	2
 909              	.L71:
 910 0010 003C0240 		.word	1073888256
 911              		.cfi_endproc
 912              	.LFE138:
 914              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 915              		.align	1
 916              		.global	HAL_FLASH_GetError
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	HAL_FLASH_GetError:
 923              	.LFB140:
 539:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****    return pFlash.ErrorCode;
 924              		.loc 1 539 1 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 540:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }  
ARM GAS  /tmp/ccKFq4D8.s 			page 48


 929              		.loc 1 540 4 view .LVU231
 540:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }  
 930              		.loc 1 540 17 is_stmt 0 view .LVU232
 931 0000 014B     		ldr	r3, .L74
 932 0002 D869     		ldr	r0, [r3, #28]
 541:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 933              		.loc 1 541 1 view .LVU233
 934 0004 7047     		bx	lr
 935              	.L75:
 936 0006 00BF     		.align	2
 937              	.L74:
 938 0008 00000000 		.word	pFlash
 939              		.cfi_endproc
 940              	.LFE140:
 942              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 943              		.align	1
 944              		.global	FLASH_WaitForLastOperation
 945              		.syntax unified
 946              		.thumb
 947              		.thumb_func
 948              		.fpu fpv4-sp-d16
 950              	FLASH_WaitForLastOperation:
 951              	.LVL43:
 952              	.LFB141:
 553:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   uint32_t tickstart = 0U;
 953              		.loc 1 553 1 is_stmt 1 view -0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 553:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   uint32_t tickstart = 0U;
 957              		.loc 1 553 1 is_stmt 0 view .LVU235
 958 0000 38B5     		push	{r3, r4, r5, lr}
 959              	.LCFI4:
 960              		.cfi_def_cfa_offset 16
 961              		.cfi_offset 3, -16
 962              		.cfi_offset 4, -12
 963              		.cfi_offset 5, -8
 964              		.cfi_offset 14, -4
 965 0002 0446     		mov	r4, r0
 554:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 966              		.loc 1 554 3 is_stmt 1 view .LVU236
 967              	.LVL44:
 557:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 968              		.loc 1 557 3 view .LVU237
 557:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 969              		.loc 1 557 20 is_stmt 0 view .LVU238
 970 0004 144B     		ldr	r3, .L87
 971 0006 0022     		movs	r2, #0
 972 0008 DA61     		str	r2, [r3, #28]
 563:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 973              		.loc 1 563 3 is_stmt 1 view .LVU239
 563:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 974              		.loc 1 563 15 is_stmt 0 view .LVU240
 975 000a FFF7FEFF 		bl	HAL_GetTick
 976              	.LVL45:
 563:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 977              		.loc 1 563 15 view .LVU241
ARM GAS  /tmp/ccKFq4D8.s 			page 49


 978 000e 0546     		mov	r5, r0
 979              	.LVL46:
 565:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   { 
 980              		.loc 1 565 3 is_stmt 1 view .LVU242
 981              	.L78:
 565:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   { 
 982              		.loc 1 565 8 view .LVU243
 565:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   { 
 983              		.loc 1 565 9 is_stmt 0 view .LVU244
 984 0010 124B     		ldr	r3, .L87+4
 985 0012 DB68     		ldr	r3, [r3, #12]
 565:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   { 
 986              		.loc 1 565 8 view .LVU245
 987 0014 13F4803F 		tst	r3, #65536
 988 0018 0AD0     		beq	.L85
 567:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 989              		.loc 1 567 5 is_stmt 1 view .LVU246
 567:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 990              		.loc 1 567 7 is_stmt 0 view .LVU247
 991 001a B4F1FF3F 		cmp	r4, #-1
 992 001e F7D0     		beq	.L78
 569:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 993              		.loc 1 569 7 is_stmt 1 view .LVU248
 569:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 994              		.loc 1 569 9 is_stmt 0 view .LVU249
 995 0020 24B1     		cbz	r4, .L79
 569:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 996              		.loc 1 569 29 discriminator 1 view .LVU250
 997 0022 FFF7FEFF 		bl	HAL_GetTick
 998              	.LVL47:
 569:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 999              		.loc 1 569 43 discriminator 1 view .LVU251
 1000 0026 401B     		subs	r0, r0, r5
 569:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       {
 1001              		.loc 1 569 25 discriminator 1 view .LVU252
 1002 0028 A042     		cmp	r0, r4
 1003 002a F1D9     		bls	.L78
 1004              	.L79:
 571:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 1005              		.loc 1 571 9 is_stmt 1 view .LVU253
 571:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****       }
 1006              		.loc 1 571 16 is_stmt 0 view .LVU254
 1007 002c 0320     		movs	r0, #3
 1008 002e 0DE0     		b	.L80
 1009              	.L85:
 577:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 1010              		.loc 1 577 3 is_stmt 1 view .LVU255
 577:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 1011              		.loc 1 577 7 is_stmt 0 view .LVU256
 1012 0030 0A4B     		ldr	r3, .L87+4
 1013 0032 DB68     		ldr	r3, [r3, #12]
 577:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 1014              		.loc 1 577 6 view .LVU257
 1015 0034 13F0010F 		tst	r3, #1
 1016 0038 02D0     		beq	.L82
 580:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 1017              		.loc 1 580 5 is_stmt 1 view .LVU258
ARM GAS  /tmp/ccKFq4D8.s 			page 50


 1018 003a 084B     		ldr	r3, .L87+4
 1019 003c 0122     		movs	r2, #1
 1020 003e DA60     		str	r2, [r3, #12]
 1021              	.L82:
 583:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 1022              		.loc 1 583 3 view .LVU259
 583:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 1023              		.loc 1 583 6 is_stmt 0 view .LVU260
 1024 0040 064B     		ldr	r3, .L87+4
 1025 0042 DB68     		ldr	r3, [r3, #12]
 583:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
 1026              		.loc 1 583 5 view .LVU261
 1027 0044 13F4F97F 		tst	r3, #498
 1028 0048 01D1     		bne	.L86
 596:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1029              		.loc 1 596 10 view .LVU262
 1030 004a 0020     		movs	r0, #0
 1031              	.L80:
 598:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 1032              		.loc 1 598 1 view .LVU263
 1033 004c 38BD     		pop	{r3, r4, r5, pc}
 1034              	.LVL48:
 1035              	.L86:
 591:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     return HAL_ERROR;
 1036              		.loc 1 591 5 is_stmt 1 view .LVU264
 1037 004e FFF7FEFF 		bl	FLASH_SetErrorCode
 1038              	.LVL49:
 592:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 1039              		.loc 1 592 5 view .LVU265
 592:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 1040              		.loc 1 592 12 is_stmt 0 view .LVU266
 1041 0052 0120     		movs	r0, #1
 1042 0054 FAE7     		b	.L80
 1043              	.L88:
 1044 0056 00BF     		.align	2
 1045              	.L87:
 1046 0058 00000000 		.word	pFlash
 1047 005c 003C0240 		.word	1073888256
 1048              		.cfi_endproc
 1049              	.LFE141:
 1051              		.section	.text.HAL_FLASH_Program,"ax",%progbits
 1052              		.align	1
 1053              		.global	HAL_FLASH_Program
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	HAL_FLASH_Program:
 1060              	.LVL50:
 1061              	.LFB130:
 157:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1062              		.loc 1 157 1 is_stmt 1 view -0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 0
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 157:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1066              		.loc 1 157 1 is_stmt 0 view .LVU268
ARM GAS  /tmp/ccKFq4D8.s 			page 51


 1067 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1068              	.LCFI5:
 1069              		.cfi_def_cfa_offset 24
 1070              		.cfi_offset 3, -24
 1071              		.cfi_offset 4, -20
 1072              		.cfi_offset 5, -16
 1073              		.cfi_offset 6, -12
 1074              		.cfi_offset 7, -8
 1075              		.cfi_offset 14, -4
 1076 0002 1646     		mov	r6, r2
 158:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1077              		.loc 1 158 3 is_stmt 1 view .LVU269
 1078              	.LVL51:
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1079              		.loc 1 161 3 view .LVU270
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1080              		.loc 1 161 3 view .LVU271
 1081 0004 1B4A     		ldr	r2, .L101
 1082              	.LVL52:
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1083              		.loc 1 161 3 is_stmt 0 view .LVU272
 1084 0006 127E     		ldrb	r2, [r2, #24]	@ zero_extendqisi2
 1085 0008 012A     		cmp	r2, #1
 1086 000a 30D0     		beq	.L96
 1087 000c 0446     		mov	r4, r0
 1088 000e 0D46     		mov	r5, r1
 1089 0010 1F46     		mov	r7, r3
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1090              		.loc 1 161 3 is_stmt 1 discriminator 2 view .LVU273
 1091 0012 184B     		ldr	r3, .L101
 1092 0014 0122     		movs	r2, #1
 1093 0016 1A76     		strb	r2, [r3, #24]
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1094              		.loc 1 161 3 discriminator 2 view .LVU274
 164:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1095              		.loc 1 164 3 discriminator 2 view .LVU275
 167:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1096              		.loc 1 167 3 discriminator 2 view .LVU276
 167:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1097              		.loc 1 167 12 is_stmt 0 discriminator 2 view .LVU277
 1098 0018 4CF25030 		movw	r0, #50000
 1099              	.LVL53:
 167:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1100              		.loc 1 167 12 discriminator 2 view .LVU278
 1101 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1102              	.LVL54:
 169:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 1103              		.loc 1 169 3 is_stmt 1 discriminator 2 view .LVU279
 169:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   {
 1104              		.loc 1 169 5 is_stmt 0 discriminator 2 view .LVU280
 1105 0020 90B9     		cbnz	r0, .L91
 171:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 1106              		.loc 1 171 5 is_stmt 1 view .LVU281
 171:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 1107              		.loc 1 171 7 is_stmt 0 view .LVU282
 1108 0022 ACB1     		cbz	r4, .L98
 176:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
ARM GAS  /tmp/ccKFq4D8.s 			page 52


 1109              		.loc 1 176 10 is_stmt 1 view .LVU283
 176:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 1110              		.loc 1 176 12 is_stmt 0 view .LVU284
 1111 0024 012C     		cmp	r4, #1
 1112 0026 18D0     		beq	.L99
 181:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 1113              		.loc 1 181 10 is_stmt 1 view .LVU285
 181:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     {
 1114              		.loc 1 181 12 is_stmt 0 view .LVU286
 1115 0028 022C     		cmp	r4, #2
 1116 002a 1BD0     		beq	.L100
 189:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 1117              		.loc 1 189 7 is_stmt 1 view .LVU287
 1118 002c 3246     		mov	r2, r6
 1119 002e 3B46     		mov	r3, r7
 1120 0030 2846     		mov	r0, r5
 1121              	.LVL55:
 189:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 1122              		.loc 1 189 7 is_stmt 0 view .LVU288
 1123 0032 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 1124              	.LVL56:
 1125              	.L93:
 193:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 1126              		.loc 1 193 5 is_stmt 1 view .LVU289
 193:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     
 1127              		.loc 1 193 14 is_stmt 0 view .LVU290
 1128 0036 4CF25030 		movw	r0, #50000
 1129 003a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1130              	.LVL57:
 196:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 1131              		.loc 1 196 5 is_stmt 1 view .LVU291
 196:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   }
 1132              		.loc 1 196 15 is_stmt 0 view .LVU292
 1133 003e 0E4A     		ldr	r2, .L101+4
 1134 0040 1369     		ldr	r3, [r2, #16]
 1135 0042 23F00103 		bic	r3, r3, #1
 1136 0046 1361     		str	r3, [r2, #16]
 1137              	.L91:
 200:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1138              		.loc 1 200 3 is_stmt 1 view .LVU293
 200:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1139              		.loc 1 200 3 view .LVU294
 1140 0048 0A4B     		ldr	r3, .L101
 1141 004a 0022     		movs	r2, #0
 1142 004c 1A76     		strb	r2, [r3, #24]
 200:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1143              		.loc 1 200 3 view .LVU295
 202:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 1144              		.loc 1 202 3 view .LVU296
 1145              	.LVL58:
 1146              	.L90:
 203:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 1147              		.loc 1 203 1 is_stmt 0 view .LVU297
 1148 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1149              	.LVL59:
 1150              	.L98:
 174:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
ARM GAS  /tmp/ccKFq4D8.s 			page 53


 1151              		.loc 1 174 7 is_stmt 1 view .LVU298
 1152 0050 F1B2     		uxtb	r1, r6
 1153 0052 2846     		mov	r0, r5
 1154              	.LVL60:
 174:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 1155              		.loc 1 174 7 is_stmt 0 view .LVU299
 1156 0054 FFF7FEFF 		bl	FLASH_Program_Byte
 1157              	.LVL61:
 1158 0058 EDE7     		b	.L93
 1159              	.LVL62:
 1160              	.L99:
 179:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 1161              		.loc 1 179 7 is_stmt 1 view .LVU300
 1162 005a B1B2     		uxth	r1, r6
 1163 005c 2846     		mov	r0, r5
 1164              	.LVL63:
 179:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 1165              		.loc 1 179 7 is_stmt 0 view .LVU301
 1166 005e FFF7FEFF 		bl	FLASH_Program_HalfWord
 1167              	.LVL64:
 1168 0062 E8E7     		b	.L93
 1169              	.LVL65:
 1170              	.L100:
 184:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 1171              		.loc 1 184 7 is_stmt 1 view .LVU302
 1172 0064 3146     		mov	r1, r6
 1173 0066 2846     		mov	r0, r5
 1174              	.LVL66:
 184:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****     }
 1175              		.loc 1 184 7 is_stmt 0 view .LVU303
 1176 0068 FFF7FEFF 		bl	FLASH_Program_Word
 1177              	.LVL67:
 1178 006c E3E7     		b	.L93
 1179              	.LVL68:
 1180              	.L96:
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1181              		.loc 1 161 3 view .LVU304
 1182 006e 0220     		movs	r0, #2
 1183              	.LVL69:
 161:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   
 1184              		.loc 1 161 3 view .LVU305
 1185 0070 EDE7     		b	.L90
 1186              	.L102:
 1187 0072 00BF     		.align	2
 1188              	.L101:
 1189 0074 00000000 		.word	pFlash
 1190 0078 003C0240 		.word	1073888256
 1191              		.cfi_endproc
 1192              	.LFE130:
 1194              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
 1195              		.align	1
 1196              		.global	HAL_FLASH_OB_Launch
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu fpv4-sp-d16
 1202              	HAL_FLASH_OB_Launch:
ARM GAS  /tmp/ccKFq4D8.s 			page 54


 1203              	.LFB139:
 502:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
 1204              		.loc 1 502 1 is_stmt 1 view -0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208 0000 08B5     		push	{r3, lr}
 1209              	.LCFI6:
 1210              		.cfi_def_cfa_offset 8
 1211              		.cfi_offset 3, -8
 1212              		.cfi_offset 14, -4
 504:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 1213              		.loc 1 504 3 view .LVU307
 504:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 1214              		.loc 1 504 40 is_stmt 0 view .LVU308
 1215 0002 054A     		ldr	r2, .L105
 1216 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1217 0006 43F00203 		orr	r3, r3, #2
 1218 000a 1370     		strb	r3, [r2]
 507:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 1219              		.loc 1 507 3 is_stmt 1 view .LVU309
 507:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** }
 1220              		.loc 1 507 10 is_stmt 0 view .LVU310
 1221 000c 4CF25030 		movw	r0, #50000
 1222 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1223              	.LVL70:
 508:bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Src/stm32f4xx_hal_flash.c **** 
 1224              		.loc 1 508 1 view .LVU311
 1225 0014 08BD     		pop	{r3, pc}
 1226              	.L106:
 1227 0016 00BF     		.align	2
 1228              	.L105:
 1229 0018 143C0240 		.word	1073888276
 1230              		.cfi_endproc
 1231              	.LFE139:
 1233              		.comm	pFlash,32,4
 1234              		.text
 1235              	.Letext0:
 1236              		.file 3 "/home/sijin/Git/ARM-Toolchain-Setup/gcc-arm-none-eabi/arm-none-eabi/include/machine/_defa
 1237              		.file 4 "/home/sijin/Git/ARM-Toolchain-Setup/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1238              		.file 5 "cmsis/Include/core_cm4.h"
 1239              		.file 6 "cmsis/Device/ST/Include/system_stm32f4xx.h"
 1240              		.file 7 "cmsis/Device/ST/Include/stm32f413xx.h"
 1241              		.file 8 "cmsis/Device/ST/Include/stm32f4xx.h"
 1242              		.file 9 "bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Inc/stm32f4xx_hal_def.h"
 1243              		.file 10 "bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Inc/stm32f4xx_hal_flash.h"
 1244              		.file 11 "bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Inc/stm32f4xx_hal.h"
 1245              		.file 12 "bsp/STMicroelectronics/stm32f413/stm32f4xx_hal_driver/Inc/stm32f4xx_hal_flash_ex.h"
ARM GAS  /tmp/ccKFq4D8.s 			page 55


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_flash.c
     /tmp/ccKFq4D8.s:18     .text.FLASH_Program_DoubleWord:0000000000000000 $t
     /tmp/ccKFq4D8.s:25     .text.FLASH_Program_DoubleWord:0000000000000000 FLASH_Program_DoubleWord
     /tmp/ccKFq4D8.s:85     .text.FLASH_Program_DoubleWord:000000000000002c $d
     /tmp/ccKFq4D8.s:90     .text.FLASH_Program_Word:0000000000000000 $t
     /tmp/ccKFq4D8.s:96     .text.FLASH_Program_Word:0000000000000000 FLASH_Program_Word
     /tmp/ccKFq4D8.s:128    .text.FLASH_Program_Word:0000000000000020 $d
     /tmp/ccKFq4D8.s:133    .text.FLASH_Program_HalfWord:0000000000000000 $t
     /tmp/ccKFq4D8.s:139    .text.FLASH_Program_HalfWord:0000000000000000 FLASH_Program_HalfWord
     /tmp/ccKFq4D8.s:171    .text.FLASH_Program_HalfWord:0000000000000020 $d
     /tmp/ccKFq4D8.s:176    .text.FLASH_Program_Byte:0000000000000000 $t
     /tmp/ccKFq4D8.s:182    .text.FLASH_Program_Byte:0000000000000000 FLASH_Program_Byte
     /tmp/ccKFq4D8.s:213    .text.FLASH_Program_Byte:000000000000001c $d
     /tmp/ccKFq4D8.s:218    .text.FLASH_SetErrorCode:0000000000000000 $t
     /tmp/ccKFq4D8.s:224    .text.FLASH_SetErrorCode:0000000000000000 FLASH_SetErrorCode
     /tmp/ccKFq4D8.s:344    .text.FLASH_SetErrorCode:00000000000000a0 $d
                            *COM*:0000000000000020 pFlash
     /tmp/ccKFq4D8.s:350    .text.HAL_FLASH_Program_IT:0000000000000000 $t
     /tmp/ccKFq4D8.s:357    .text.HAL_FLASH_Program_IT:0000000000000000 HAL_FLASH_Program_IT
     /tmp/ccKFq4D8.s:466    .text.HAL_FLASH_Program_IT:0000000000000060 $d
     /tmp/ccKFq4D8.s:472    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 $t
     /tmp/ccKFq4D8.s:479    .text.HAL_FLASH_EndOfOperationCallback:0000000000000000 HAL_FLASH_EndOfOperationCallback
     /tmp/ccKFq4D8.s:494    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 $t
     /tmp/ccKFq4D8.s:501    .text.HAL_FLASH_OperationErrorCallback:0000000000000000 HAL_FLASH_OperationErrorCallback
     /tmp/ccKFq4D8.s:516    .text.HAL_FLASH_IRQHandler:0000000000000000 $t
     /tmp/ccKFq4D8.s:523    .text.HAL_FLASH_IRQHandler:0000000000000000 HAL_FLASH_IRQHandler
     /tmp/ccKFq4D8.s:738    .text.HAL_FLASH_IRQHandler:00000000000000ec $d
     /tmp/ccKFq4D8.s:744    .text.HAL_FLASH_Unlock:0000000000000000 $t
     /tmp/ccKFq4D8.s:751    .text.HAL_FLASH_Unlock:0000000000000000 HAL_FLASH_Unlock
     /tmp/ccKFq4D8.s:797    .text.HAL_FLASH_Unlock:0000000000000028 $d
     /tmp/ccKFq4D8.s:803    .text.HAL_FLASH_Lock:0000000000000000 $t
     /tmp/ccKFq4D8.s:810    .text.HAL_FLASH_Lock:0000000000000000 HAL_FLASH_Lock
     /tmp/ccKFq4D8.s:830    .text.HAL_FLASH_Lock:0000000000000010 $d
     /tmp/ccKFq4D8.s:835    .text.HAL_FLASH_OB_Unlock:0000000000000000 $t
     /tmp/ccKFq4D8.s:842    .text.HAL_FLASH_OB_Unlock:0000000000000000 HAL_FLASH_OB_Unlock
     /tmp/ccKFq4D8.s:877    .text.HAL_FLASH_OB_Unlock:0000000000000020 $d
     /tmp/ccKFq4D8.s:883    .text.HAL_FLASH_OB_Lock:0000000000000000 $t
     /tmp/ccKFq4D8.s:890    .text.HAL_FLASH_OB_Lock:0000000000000000 HAL_FLASH_OB_Lock
     /tmp/ccKFq4D8.s:910    .text.HAL_FLASH_OB_Lock:0000000000000010 $d
     /tmp/ccKFq4D8.s:915    .text.HAL_FLASH_GetError:0000000000000000 $t
     /tmp/ccKFq4D8.s:922    .text.HAL_FLASH_GetError:0000000000000000 HAL_FLASH_GetError
     /tmp/ccKFq4D8.s:938    .text.HAL_FLASH_GetError:0000000000000008 $d
     /tmp/ccKFq4D8.s:943    .text.FLASH_WaitForLastOperation:0000000000000000 $t
     /tmp/ccKFq4D8.s:950    .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/ccKFq4D8.s:1046   .text.FLASH_WaitForLastOperation:0000000000000058 $d
     /tmp/ccKFq4D8.s:1052   .text.HAL_FLASH_Program:0000000000000000 $t
     /tmp/ccKFq4D8.s:1059   .text.HAL_FLASH_Program:0000000000000000 HAL_FLASH_Program
     /tmp/ccKFq4D8.s:1189   .text.HAL_FLASH_Program:0000000000000074 $d
     /tmp/ccKFq4D8.s:1195   .text.HAL_FLASH_OB_Launch:0000000000000000 $t
     /tmp/ccKFq4D8.s:1202   .text.HAL_FLASH_OB_Launch:0000000000000000 HAL_FLASH_OB_Launch
     /tmp/ccKFq4D8.s:1229   .text.HAL_FLASH_OB_Launch:0000000000000018 $d
                           .group:0000000000000000 wm4.0.0f5aa60db9403f389c005f20ecce4286
                           .group:0000000000000000 wm4.stm32f4xx_hal_conf.h.24.49915eda91abe45d897cb4b7f0e0c969
                           .group:0000000000000000 wm4.stm32f4xx.h.55.60c09cb5ab474e463c44285ed7739f1f
                           .group:0000000000000000 wm4.stm32f413xx.h.51.056d3d585e2d067bbb384490eebcddec
                           .group:0000000000000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
ARM GAS  /tmp/ccKFq4D8.s 			page 56


                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.f42444deefab66ffa141b9b9fddb57a3
                           .group:0000000000000000 wm4.core_cm4.h.174.059a5e001a9e729091d1407208e93224
                           .group:0000000000000000 wm4.mpu_armv7.h.32.27b4593cb2f8d3152ca5d97a9d72b321
                           .group:0000000000000000 wm4.stm32f413xx.h.931.135ef1268ffd04ff90978aa2b475f8a0
                           .group:0000000000000000 wm4.stm32f4xx.h.212.729f0f890654645a3f47ccc0cc2b00e7
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.394d12941f5a0482dbe3c36ee9e57b2b
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32f4xx_hal_def.h.58.2d2c85d5b9693a63e90566b806e8a752
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc_ex.h.22.5a8f849a3b0614ab22db1d7c22b7410a
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc.h.108.0c18a3cfc2dd91bdf92470b4bd0ea1b5
                           .group:0000000000000000 wm4.stm32f4xx_hal_exti.h.22.362bf341926a2fd3363cdafa6cac5f16
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.22.be2c6bcf9722096ea8f49a41bf6aa50c
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio_ex.h.22.bf544e65d63b7ac4a13ca5f7938b821b
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.264.978ac12eab1d3b3400b35b8c427e2c33
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.22.91874dedf3efdfd19ab60261dcf7928c
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.704.31aa663b064412fd28303766eb63eb65
                           .group:0000000000000000 wm4.stm32f4xx_hal_cortex.h.22.e6aa3b847b5388be63c32d1f9e696ef7
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.22.31b301be2655c3eb8583e51c8231544a
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash_ex.h.22.ebebea52434d28454b2b987fa9e698fc
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.363.51efdf0f6c88f683efb89d7cc95cc1be
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.22.2c27d93ae187efe3a73816f03a329970
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr_ex.h.22.a735ba4f49c5b2574a98d58f3b7ae925
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.337.60b43975c84527a23cb6994b23165a5e
                           .group:0000000000000000 wm4.stm32f4xx_hal.h.72.7cab665cef831b3c8c4718884b1ec523

UNDEFINED SYMBOLS
FLASH_Erase_Sector
FLASH_FlushCaches
HAL_GetTick
